<?xml version="1.0" encoding="ISO-8859-1"?>
<!DOCTYPE book PUBLIC "-//Norman Walsh//DTD DocBk XML V3.1.7//EN"
"E:/Dokumente/DocBook/db3x317/docbookx.dtd">
<!-- <?xml-stylesheet alternate="yes" type="text/xsl"
href="E:/Dokumente/DocBook/db_xsl_113/docbook/xhtml/docbook.xsl"?> -->
<?xml-stylesheet alternate="yes" type="text/xsl" href="./style.xsl"?>
<book id="book">
<bookinfo>
<titleabbrev>XDOM 2.2.7</titleabbrev>
<title>Extended Document Object Model 2.2.7</title>
<subtitle>Delphi 3 Implementation</subtitle>
<author><firstname>Dieter</firstname><surname>Köhler</surname></author>
<pubdate>May  2000</pubdate>
<legalnotice>
<para>
LICENSE

Copyright (c) 2000 by Dieter Köhler ("http://www.philo.de/homepage.htm")
</para>
<para>
             
Permission is hereby granted, free of charge, to any person obtaining a copy of
this software and associated documentation files (the <quote>Software</quote>),
to deal in the Software without restriction, including without limitation the
rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is furnished
to do so, subject to the following conditions:

</para>
         <para>
The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.
</para>
         <para>
            
THE SOFTWARE IS PROVIDED <quote>AS IS</quote>, WITHOUT WARRANTY OF ANY KIND,
EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO
EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR
OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
THE SOFTWARE.
</para>
      </legalnotice>
      <othercredit>
         <contrib>Many thanks to all people who supported this project by
         sending bug reports and bug fixes, wrote articles or encouraged me in
         other ways. Special thanks to (in alphabetical order): Marco Bommeljé,
         David Burridge, David Butler, Vladimir Buzuev, Charlie Calvert, Bernard
         Eblin, Hans-Eric
         Grönlund, Herbert Hrachovec, Li Ling, Diego Novati, Matthew Peebles,
         Ernst van der Pols, Lijun Qin, John Romedahl, Dirk Speidel, Marco
         Wobben.
    </contrib>
      </othercredit>
   </bookinfo>
   <preface>
      <title>Preface</title>
      <para>
                                  
         This file contains the documentation for the the Delphi 3
         implementation of the 
         <quote> Document Object Model (Core) Level 1</quote>
          of the W3C according to REC-DOM-Level-1-19981001 (copyright (c) World
          Wide Web Consortium, (Massachusetts Institute of Technology, Institute
          National de Recherche en Informatique et en Automatique, Keio
          University), all rights reserved).  For a detailed introduction to the 
         <quote>Document Object Model (Core) Level 1</quote>
          see the corresponding website:
          "http://www.w3.org/TR/1998/REC-DOM-Level-1-19981001/level-one-core.htm
          l"

      </para>
      <para>
          
The modifications and additions to the DOM Core and the DOM Traversal as
suggested by the working draft for the 
<quote>Document Object Model (DOM) Level 2 Specification. Version 1.0. W3C
Candidate Recommendation 07 March, 2000</quote>
         
("http://www.w3.org/TR/2000/CR-DOM-Level-2-20000307" -- copyright (c) World Wide
Web Consortium, (Massachusetts Institute of Technology, Institute National de
Recherche en Informatique et en Automatique, Keio University), all rights
reserved) have been implemented as well. These modifications and additions are
indicated by a '#'-sign. 

      </para>
      <para> 
Due to a few problems in the offical specifications of the DOM some
modifications had been made in this implementation. In the following text these
modifications are indicated by an asterisk (*). The DOM specifications allow
additional procedures and functions to improve the functionality of the
implementation. In the following text this additions are indicated by a
plus-sign (+). Due to the wide range of the additions the name of this
implementation had been changed to eXtended Document Object Model (XDOM).
</para>
      <para> 
The latest version of this Software can be found at "http://www.philo.de/xml/".
Please, report unknown bugs in the source code or in this documentation to the
author via "service@philo.de" (make sure that you refere to the latest XDOM
version). For known bugs, please consult the file 'buglist.txt' which
accompanies this release of the 'Extended Document Object Model'. For all other
matters, please post to the openxml mailing list. Instructions how to join the
mailing list may be found at "http://www.philo.de/xml/" as well.
      
      </para>
   </preface>
   <chapter>
      <title>Overview of the XDOM Interfaces</title>
      <sect1>
         <title>The XDOM Structure Model</title>
         <para>The XDOM presents documents as a hierarchy of
         <quote>node</quote>objects that also implement other, more specialized
         interfaces. Some types of nodes may have child nodes of various types,
         and others are leaf nodes that cannot have anything below them in the
         document structure. The node types, and which node types they may have
         as children, are as follows:             
            
          <itemizedlist>
               <listitem>
                  <para>Attribute (TdomAttr)</para>
                  <itemizedlist>
                     <listitem>
                        <para>Text</para>
                        <itemizedlist>
                           <listitem>
                              <para>EntityReference</para>
                           </listitem>
                        </itemizedlist>
                     </listitem>
                  </itemizedlist>
               </listitem>
               <listitem>
                  <para>AttributeDefinition (TdomAttrDefinition) (+)</para>
                  <itemizedlist>
                     <listitem>
                        <para>Nametoken (depending on the attribute type)</para>
                        <itemizedlist>
                           <listitem>
                              <para>ElementParticle (depending on the attribute
                              type)</para>
                           </listitem>
                        </itemizedlist>
                     </listitem>
                  </itemizedlist>
               </listitem>
               <listitem>
                  <para>AttributeList (TdomAttrList) (+)
     (no children)</para>
               </listitem>
               <listitem>
                  <para>CDATASection (TdomCDATASection)
     (no children)</para>
               </listitem>
               <listitem>
                  <para>ChoiceParticle (TdomChoiceParticle) (+)</para>
                  <itemizedlist>
                     <listitem>
                        <para>SequenceParticle</para>
                     </listitem>
                     <listitem>
                        <para>ChoiceParticle</para>
                     </listitem>
                     <listitem>
                        <para>ElementParticle</para>
                     </listitem>
                  </itemizedlist>
               </listitem>
               <listitem>
                  <para>Comment (TdomComment)
     (no children)</para>
               </listitem>
               <listitem>
                  <para>ConditionalSection (TdomConditionalSection) (+)</para>
                  <itemizedlist>
                     <listitem>
                        <para>ParameterEntityReference</para>
                     </listitem>
                  </itemizedlist>
                  <itemizedlist>
                     <listitem>
                        <para>ElementTypeDeclaration</para>
                     </listitem>
                  </itemizedlist>
                  <itemizedlist>
                     <listitem>
                        <para>AttributeList</para>
                     </listitem>
                  </itemizedlist>
                  <itemizedlist>
                     <listitem>
                        <para>EntityDeclaration</para>
                     </listitem>
                  </itemizedlist>
                  <itemizedlist>
                     <listitem>
                        <para>ParameterEntityDeclaration</para>
                     </listitem>
                  </itemizedlist>
                  <itemizedlist>
                     <listitem>
                        <para>NotationDeclaration</para>
                     </listitem>
                  </itemizedlist>
                  <itemizedlist>
                     <listitem>
                        <para>ProcessingInstruction</para>
                     </listitem>
                  </itemizedlist>
                  <itemizedlist>
                     <listitem>
                        <para>Comment</para>
                     </listitem>
                  </itemizedlist>
                  <itemizedlist>
                     <listitem>
                        <para>ConditionalSection</para>
                     </listitem>
                  </itemizedlist>
               </listitem>
               <listitem>
                  <para>Document (TdomDocument) (*)</para>
                  <itemizedlist>
                     <listitem>
                        <para>XmlDeclaration (maximum of one)</para>
                     </listitem>
                  </itemizedlist>
                  <itemizedlist>
                     <listitem>
                        <para>Element (maximum of one)</para>
                     </listitem>
                  </itemizedlist>
                  <itemizedlist>
                     <listitem>
                        <para>ProcessingInstruction</para>
                     </listitem>
                  </itemizedlist>
                  <itemizedlist>
                     <listitem>
                        <para>Comment</para>
                     </listitem>
                  </itemizedlist>
                  <itemizedlist>
                     <listitem>
                        <para>DocumentType</para>
                     </listitem>
                  </itemizedlist>
               </listitem>
               <listitem>
                  <para>DocumentFragment (TdomDocumentFragment) (*)</para>
                  <itemizedlist>
                     <listitem>
                        <para>Element</para>
                     </listitem>
                  </itemizedlist>
                  <itemizedlist>
                     <listitem>
                        <para>Attribute</para>
                     </listitem>
                  </itemizedlist>
                  <itemizedlist>
                     <listitem>
                        <para>Text</para>
                     </listitem>
                  </itemizedlist>
                  <itemizedlist>
                     <listitem>
                        <para>CDATASection</para>
                     </listitem>
                  </itemizedlist>
                  <itemizedlist>
                     <listitem>
                        <para>EntityReference</para>
                     </listitem>
                  </itemizedlist>
                  <itemizedlist>
                     <listitem>
                        <para>ParameterEntityReference</para>
                     </listitem>
                  </itemizedlist>
                  <itemizedlist>
                     <listitem>
                        <para>EntityDeclaration</para>
                     </listitem>
                  </itemizedlist>
                  <itemizedlist>
                     <listitem>
                        <para>ParameterEntityDeclaration</para>
                     </listitem>
                  </itemizedlist>
                  <itemizedlist>
                     <listitem>
                        <para>ProcessingInstruction</para>
                     </listitem>
                  </itemizedlist>
                  <itemizedlist>
                     <listitem>
                        <para>XmlDeclaration</para>
                     </listitem>
                  </itemizedlist>
                  <itemizedlist>
                     <listitem>
                        <para>Comment</para>
                     </listitem>
                  </itemizedlist>
                  <itemizedlist>
                     <listitem>
                        <para>Document</para>
                     </listitem>
                  </itemizedlist>
                  <itemizedlist>
                     <listitem>
                        <para>DocumentType</para>
                     </listitem>
                  </itemizedlist>
                  <itemizedlist>
                     <listitem>
                        <para>ConditionalSection</para>
                     </listitem>
                  </itemizedlist>
                  <itemizedlist>
                     <listitem>
                        <para>Notation</para>
                     </listitem>
                  </itemizedlist>
                  <itemizedlist>
                     <listitem>
                        <para>NotationDeclaration</para>
                     </listitem>
                  </itemizedlist>
                  <itemizedlist>
                     <listitem>
                        <para>ElementTypeDeclaration</para>
                     </listitem>
                  </itemizedlist>
                  <itemizedlist>
                     <listitem>
                        <para>SequenceParticle</para>
                     </listitem>
                  </itemizedlist>
                  <itemizedlist>
                     <listitem>
                        <para>ChoiceParticle</para>
                     </listitem>
                  </itemizedlist>
                  <itemizedlist>
                     <listitem>
                        <para>ElementParticle</para>
                     </listitem>
                  </itemizedlist>
                  <itemizedlist>
                     <listitem>
                        <para>AttributeList</para>
                     </listitem>
                  </itemizedlist>
                  <itemizedlist>
                     <listitem>
                        <para>AttributeDefinition</para>
                     </listitem>
                  </itemizedlist>
                  <itemizedlist>
                     <listitem>
                        <para>Nametoken</para>
                        <itemizedlist>
                           <listitem>
                              <para>ExternalSubset</para>
                           </listitem>
                        </itemizedlist>
                        <itemizedlist>
                           <listitem>
                              <para>InternalSubset</para>
                           </listitem>
                        </itemizedlist>
                     </listitem>
                  </itemizedlist>
               </listitem>
               <listitem>
                  <para>DocumentType (TdomDocumentType) (*)</para>
                  <itemizedlist>
                     <listitem>
                        <para>ExternalSubset</para>
                     </listitem>
                  </itemizedlist>
                  <itemizedlist>
                     <listitem>
                        <para>InternalSubset</para>
                     </listitem>
                  </itemizedlist>
               </listitem>
               <listitem>
                  <para>Element (TdomElement) (*)</para>
                  <itemizedlist>
                     <listitem>
                        <para>Element</para>
                        <itemizedlist>
                           <listitem>
                              <para>Text</para>
                           </listitem>
                        </itemizedlist>
                        <itemizedlist>
                           <listitem>
                              <para>Comment</para>
                           </listitem>
                        </itemizedlist>
                        <itemizedlist>
                           <listitem>
                              <para>ProcessingInstruction</para>
                           </listitem>
                        </itemizedlist>
                        <itemizedlist>
                           <listitem>
                              <para>CDATASection</para>
                           </listitem>
                        </itemizedlist>
                     </listitem>
                  </itemizedlist>
                  <itemizedlist>
                     <listitem>
                        <para>EntityReference </para>
                     </listitem>
                  </itemizedlist>
               </listitem>
               <listitem>
                  <para>ElementParticle (TdomElementParticle) (+)
     (no children)</para>
               </listitem>
               <listitem>
                  <para>ElementTypeDeclaration (TdomElementTypeDeclaration) (+)
     (no children, if contentspec is ctEmpty or ctAny)</para>
                  <itemizedlist>
                     <listitem>
                        <para>PcdataChoiceParticle, if contentspec is
                        ctMixed</para>
                     </listitem>
                  </itemizedlist>
                  <itemizedlist>
                     <listitem>
                        <para>SequenceParticle, if contentspec is
                        ctChildren</para>
                     </listitem>
                  </itemizedlist>
                  <itemizedlist>
                     <listitem>
                        <para>ChoiceParticle, if contentspec is
                        ctChildren</para>
                     </listitem>
                  </itemizedlist>
                  <itemizedlist>
                     <listitem>
                        <para>ElementParticle, if contentspec is
                        ctChildren</para>
                     </listitem>
                  </itemizedlist>
               </listitem>
               <listitem>
                  <para>Entity (TdomEntity) (*)</para>
                  <itemizedlist>
                     <listitem>
                        <para>Element</para>
                     </listitem>
                  </itemizedlist>
                  <itemizedlist>
                     <listitem>
                        <para>ProcessingInstruction</para>
                     </listitem>
                  </itemizedlist>
                  <itemizedlist>
                     <listitem>
                        <para>Comment</para>
                     </listitem>
                  </itemizedlist>
                  <itemizedlist>
                     <listitem>
                        <para>Text</para>
                     </listitem>
                  </itemizedlist>
                  <itemizedlist>
                     <listitem>
                        <para>CDATASection</para>
                     </listitem>
                  </itemizedlist>
                  <itemizedlist>
                     <listitem>
                        <para>EntityReference</para>
                     </listitem>
                  </itemizedlist>
                  <itemizedlist>
                     <listitem>
                        <para>ParameterEntityReference</para>
                     </listitem>
                  </itemizedlist>
               </listitem>
               <listitem>
                  <para>EntityDeclaration (TdomEntity) (+)
     (no children)</para>
               </listitem>
               <listitem>
                  <para>EntityReference (TdomEntityReference) (*)</para>
                  <itemizedlist>
                     <listitem>
                        <para>Element</para>
                        <itemizedlist>
                           <listitem>
                              <para>Text</para>
                           </listitem>
                        </itemizedlist>
                        <itemizedlist>
                           <listitem>
                              <para>Comment</para>
                           </listitem>
                        </itemizedlist>
                        <itemizedlist>
                           <listitem>
                              <para>ProcessingInstruction</para>
                           </listitem>
                        </itemizedlist>
                        <itemizedlist>
                           <listitem>
                              <para>CDATASection</para>
                           </listitem>
                        </itemizedlist>
                     </listitem>
                  </itemizedlist>
                  <itemizedlist>
                     <listitem>
                        <para>EntityReference</para>
                     </listitem>
                  </itemizedlist>
               </listitem>
               <listitem>
                  <para>ExternalParameterEntity (TdomExternalParameterEntity)
                  (+)</para>
                  <itemizedlist>
                     <listitem>
                        <para>ParameterEntityReference</para>
                     </listitem>
                  </itemizedlist>
                  <itemizedlist>
                     <listitem>
                        <para>ElementTypeDeclaration</para>
                     </listitem>
                  </itemizedlist>
                  <itemizedlist>
                     <listitem>
                        <para>AttributeList</para>
                     </listitem>
                  </itemizedlist>
                  <itemizedlist>
                     <listitem>
                        <para>EntityDeclaration</para>
                     </listitem>
                  </itemizedlist>
                  <itemizedlist>
                     <listitem>
                        <para>ParameterEntityDeclaration</para>
                     </listitem>
                  </itemizedlist>
                  <itemizedlist>
                     <listitem>
                        <para>NotationDeclaration</para>
                     </listitem>
                  </itemizedlist>
                  <itemizedlist>
                     <listitem>
                        <para>ProcessingInstruction</para>
                     </listitem>
                  </itemizedlist>
                  <itemizedlist>
                     <listitem>
                        <para>Comment</para>
                     </listitem>
                  </itemizedlist>
                  <itemizedlist>
                     <listitem>
                        <para>ConditionalSection</para>
                     </listitem>
                  </itemizedlist>
               </listitem>
               <listitem>
                  <para>ExternalParsedEntity (TdomExternalParsedEntity)
                  (+)</para>
                  <itemizedlist>
                     <listitem>
                        <para>Element</para>
                        <itemizedlist>
                           <listitem>
                              <para>Text</para>
                           </listitem>
                        </itemizedlist>
                        <itemizedlist>
                           <listitem>
                              <para>Comment</para>
                           </listitem>
                        </itemizedlist>
                        <itemizedlist>
                           <listitem>
                              <para>ProcessingInstruction</para>
                           </listitem>
                        </itemizedlist>
                        <itemizedlist>
                           <listitem>
                              <para>CDATASection</para>
                           </listitem>
                        </itemizedlist>
                     </listitem>
                  </itemizedlist>
                  <itemizedlist>
                     <listitem>
                        <para>EntityReference</para>
                     </listitem>
                  </itemizedlist>
               </listitem>
               <listitem>
                  <para>ExternalSubset (TdomNode) (+)</para>
                  <itemizedlist>
                     <listitem>
                        <para>ParameterEntityReference</para>
                     </listitem>
                  </itemizedlist>
                  <itemizedlist>
                     <listitem>
                        <para>ElementTypeDeclaration</para>
                     </listitem>
                  </itemizedlist>
                  <itemizedlist>
                     <listitem>
                        <para>AttributeList</para>
                     </listitem>
                  </itemizedlist>
                  <itemizedlist>
                     <listitem>
                        <para>EntityDeclaration</para>
                     </listitem>
                  </itemizedlist>
                  <itemizedlist>
                     <listitem>
                        <para>TextDeclaration</para>
                     </listitem>
                  </itemizedlist>
                  <itemizedlist>
                     <listitem>
                        <para>ParameterEntityDeclaration</para>
                     </listitem>
                  </itemizedlist>
                  <itemizedlist>
                     <listitem>
                        <para>NotationDeclaration</para>
                     </listitem>
                  </itemizedlist>
                  <itemizedlist>
                     <listitem>
                        <para>ProcessingInstruction</para>
                     </listitem>
                  </itemizedlist>
                  <itemizedlist>
                     <listitem>
                        <para>Comment</para>
                        <itemizedlist>
                           <listitem>
                              <para>ConditionalSection</para>
                           </listitem>
                        </itemizedlist>
                     </listitem>
                  </itemizedlist>
               </listitem>
               <listitem>
                  <para>InternalSubset (TdomNode) (+)</para>
                  <itemizedlist>
                     <listitem>
                        <para>ParameterEntityReference</para>
                     </listitem>
                  </itemizedlist>
                  <itemizedlist>
                     <listitem>
                        <para>ElementTypeDeclaration</para>
                     </listitem>
                  </itemizedlist>
                  <itemizedlist>
                     <listitem>
                        <para>AttributeList</para>
                     </listitem>
                  </itemizedlist>
                  <itemizedlist>
                     <listitem>
                        <para>EntityDeclaration</para>
                     </listitem>
                  </itemizedlist>
                  <itemizedlist>
                     <listitem>
                        <para>ParameterEntityDeclaration</para>
                     </listitem>
                  </itemizedlist>
                  <itemizedlist>
                     <listitem>
                        <para>NotationDeclaration</para>
                     </listitem>
                  </itemizedlist>
                  <itemizedlist>
                     <listitem>
                        <para>ProcessingInstruction</para>
                     </listitem>
                  </itemizedlist>
                  <itemizedlist>
                     <listitem>
                        <para>Comment</para>
                     </listitem>
                  </itemizedlist>
               </listitem>
               <listitem>
                  <para>Nametoken (TdomNametoken) (+)
     (no children)</para>
               </listitem>
               <listitem>
                  <para>Notation (TdomNotation)
     (no children)</para>
               </listitem>
               <listitem>
                  <para>NotationDeclaration (TdomNotationDeclaration) (+)
     (no children)</para>
               </listitem>
               <listitem>
                  <para>ParameterEntity (TdomParameterEntity) (+)</para>
                  <itemizedlist>
                     <listitem>
                        <para>Element</para>
                     </listitem>
                  </itemizedlist>
                  <itemizedlist>
                     <listitem>
                        <para>ProcessingInstruction</para>
                     </listitem>
                  </itemizedlist>
                  <itemizedlist>
                     <listitem>
                        <para>Comment</para>
                     </listitem>
                  </itemizedlist>
                  <itemizedlist>
                     <listitem>
                        <para>Text</para>
                     </listitem>
                  </itemizedlist>
                  <itemizedlist>
                     <listitem>
                        <para>CDATASection</para>
                     </listitem>
                  </itemizedlist>
                  <itemizedlist>
                     <listitem>
                        <para>EntityReference</para>
                     </listitem>
                  </itemizedlist>
                  <itemizedlist>
                     <listitem>
                        <para>ParameterEntityReference</para>
                     </listitem>
                  </itemizedlist>
               </listitem>
               <listitem>
                  <para>ParameterEntityDeclaration (TdomParameterEntity) (+)
     (no children)</para>
               </listitem>
               <listitem>
                  <para>ParameterEntityReference (TdomParameterEntityReference)
                  (+)</para>
                  <itemizedlist>
                     <listitem>
                        <para>ParameterEntityReference</para>
                     </listitem>
                  </itemizedlist>
                  <itemizedlist>
                     <listitem>
                        <para>ElementTypeDeclaration</para>
                     </listitem>
                  </itemizedlist>
                  <itemizedlist>
                     <listitem>
                        <para>AttributeList</para>
                     </listitem>
                  </itemizedlist>
                  <itemizedlist>
                     <listitem>
                        <para>EntityDeclaration</para>
                     </listitem>
                  </itemizedlist>
                  <itemizedlist>
                     <listitem>
                        <para>ParameterEntityDeclaration</para>
                     </listitem>
                  </itemizedlist>
                  <itemizedlist>
                     <listitem>
                        <para>NotationDeclaration</para>
                     </listitem>
                  </itemizedlist>
                  <itemizedlist>
                     <listitem>
                        <para>ProcessingInstruction</para>
                     </listitem>
                  </itemizedlist>
                  <itemizedlist>
                     <listitem>
                        <para>Comment</para>
                     </listitem>
                  </itemizedlist>
               </listitem>
               <listitem>
                  <para>PcdataChoiceParticle (TdomPcdataChoiceParticle) (+)
     ElementParticle</para>
               </listitem>
               <listitem>
                  <para>ProcessingInstruction (TdomProcessingInstruction)
     (no children)</para>
               </listitem>
               <listitem>
                  <para>SequenceParticle (TdomSequenceParticle) (+)</para>
                  <itemizedlist>
                     <listitem>
                        <para>PcdataChoiceParticle</para>
                     </listitem>
                  </itemizedlist>
                  <itemizedlist>
                     <listitem>
                        <para>SequenceParticle</para>
                     </listitem>
                  </itemizedlist>
                  <itemizedlist>
                     <listitem>
                        <para>ChoiceParticle</para>
                     </listitem>
                  </itemizedlist>
                  <itemizedlist>
                     <listitem>
                        <para>ElementParticle</para>
                     </listitem>
                  </itemizedlist>
               </listitem>
               <listitem>
                  <para>Text (TdomText)
     (no children)</para>
               </listitem>
               <listitem>
                  <para>XmlDeclaration (TdomXmlDeclaration) (+)
     (no children)</para>
               </listitem>
            </itemizedlist>
            
The DOM also specifies a <quote>NodeList</quote>(TdomNodeList) interface to
handle ordered lists of Nodes, such as the children of a Node, or the elements
returned by the TdomDocument.getElementsByTagName method, and also a
<quote>NamedNodeMap</quote>(TdomNamedNodeMape) interface to handle unordered
sets of Nodes referenced by their name attribute, such as the Attributes of an
Element. NodeLists and NamedNodeMaps in the DOM are <quote>live</quote>, that
is, changes to the underlying document structure are reflected in all relevant
NodeLists and NamedNodeMaps. For example, if a DOM user gets a NodeList object
containing the children of an Element, then subsequently adds more children to
that element (or removes children, or modifies them), those changes are
automatically reflected in the NodeList without further action on the user's
part. Likewise changes to a Node in the tree are reflected in all references to
that Node in NodeLists and NamedNodeMaps. 

</para>
      </sect1>
      <sect1>
         <title>The Class Hierarchy of the XDOM core</title>
         <para>The class hierarchy of the XDOM is as follows:</para>
         <para>
            <literallayout>
               <emphasis>
TdomNode
  |___TdomAttr
  |___TdomAttrDefinition
  |___TdomCharacterData
  |     |___TdomComment
  |     |___TdomText
  |           |___TdomCDATASection
  |___TdomCustomDeclaration
  |     |___TdomAttrList
  |     |___TdomCustomEntity
  |     |     |___TdomEntity
  |     |     |___TdomParameterEntity
  |     |     |___TdomEntityDeclaration
  |     |     |___TdomParameterEntityDeclaration
  |     |___TdomElementTypeDeclaration
  |___TdomDocument
  |___TdomDocumentFragment
  |___TdomCustomDocumentType
  |     |___TdomConditionalSection
  |     |___TdomDocumentType
  |     |___TdomExternalSubset
  |     |___TdomInternalSubset
  |___TdomElement
  |___TdomExternalParameterEntity
  |___TdomExternalParsedEntity
  |___TdomNametoken
  |___TdomNotation
  |___TdomNotationDeclaration
  |___TdomParticle
  |     |___TdomChoiceParticle
  |     |___TdomElementParticle
  |     |___TdomSequenceParticle
  |___TdomProcessingInstruction
  |___TdomReference
  |     |___TdomEntityReference
  |     |___TdomParameterEntityReference
  |___TdomTextDeclaration
  |___TdomXmlDeclaration
</emphasis>
            </literallayout>
         </para>
      </sect1>
      <sect1>
         <title>Case Sensitivity in the XDOM</title>
         <para>The XDOM has many interfaces that imply string matching. XML is
         explicitly case sensitive. For the purposes of the XDOM, string
         matching takes place on a character code by character code basis, on
         the 16 bit value of a WideString. As such, the XDOM assumes that any
         normalizations will take place in the processor, before the XDOM
         structures are built.
</para>
      </sect1>
   </chapter>
   <chapter>
      <title>The Delphi Implementation of the XDOM core</title>
      <sect1>
         <title>Exceptions</title>
         <para>
XDOM operations only raise exceptions in <quote>exceptional</quote>
circumstances, i.e., when an operation is impossible to perform (either for
logical reasons, because data is lost, or because the implementation has become
unstable). In general, XDOM methods raise exceptions in ordinary processing
situation, such as out-of-bound errors when using NodeList. 
         </para>
         <para>
            <itemizedlist>
               <listitem>
                  <para>
                     <emphasis>EdomException = class(Exception);</emphasis>
                     
    This is the fundamental class of all DOM exceptions.

                  </para>
               </listitem>
               <listitem>
                  <para>
                     <emphasis>EIndex_Size_Err =
                     class(EdomException);</emphasis>
                     
    Raised if index or size is negative, or greater than the allowed value.

                  </para>
               </listitem>
               <listitem>
                  <para>
                     <emphasis>EDomstring_Size_Err =
                     class(EdomException);</emphasis>
                     
    Raised if the specified range of text does not fit into a WideString.

                  </para>
               </listitem>
               <listitem>
                  <para>
                     <emphasis>EHierarchy_Request_Err =
                     class(EdomException);</emphasis>
                     
    Raised if any node is inserted somewhere it doesn't belong.

                  </para>
               </listitem>
               <listitem>
                  <para>
                     <emphasis>EWrong_Document_Err =
                     class(EdomException);</emphasis>
                     
    Raised if a node is used in a different document than the one that created
    it (that doesn't support it)

                  </para>
               </listitem>
               <listitem>
                  <para>
                     <emphasis>EInvalid_Character_Err =
                     class(EdomException);</emphasis>
                     
    Raised if an invalid name is specified.

                  </para>
               </listitem>
               <listitem>
                  <para>
                     <emphasis>ENo_Data_Allowed_Err =
                     class(EdomException);</emphasis>
                     
    Raised if data is specified for a node which does not support data.

                  </para>
               </listitem>
               <listitem>
                  <para>
                     <emphasis>ENo_Modification_Allowed_Err =
                     class(EdomException);</emphasis>
                     
    Raised if an attempt is made to modify an object where modifications are not
    allowed.

                  </para>
               </listitem>
               <listitem>
                  <para>
                     <emphasis>ENot_Found_Err = class(EdomException);</emphasis>
                     
    Raised if an attempt was made to reference a node in a context where it does
    not exist.

                  </para>
               </listitem>
               <listitem>
                  <para>
                     <emphasis>ENot_Supported_Err =
                     class(EdomException);</emphasis>
                     
    Raised if the implementation does not support the type of object requested. 

                  </para>
               </listitem>
               <listitem>
                  <para>
                     <emphasis>EInuse_Attribute_Err =
                     class(EdomException);</emphasis>
                     
    Raised if an attempt is made to add an attribute node that is already inuse
    elsewhere.

                  </para>
               </listitem>
               <listitem>
                  <para>
                     <emphasis>EInvalid_State_Err =
                     class(EdomException);</emphasis>
                     
    Raised if an attempt is made to use an object that is not, or no longer,
    usable.

                  </para>
               </listitem>
               <listitem>
                  <para>
                     <emphasis>ESyntax_Err = class(EdomException);</emphasis>
                     
    Raised if an invalid or illegal string is specified.

                  </para>
               </listitem>
               <listitem>
                  <para>
                     <emphasis>EInvalid_Modification_Err =
                     class(EdomException);</emphasis>
                     
    Raised if an attempt is made to modify the type of the underlying object.

                  </para>
               </listitem>
               <listitem>
                  <para>
                     <emphasis>ENamespace_Err = class(EdomException);</emphasis>
                     
    Raised if an attempt is made to create or change an object in a way which is
    incorrect with regard to namespaces.

                  </para>
               </listitem>
               <listitem>
                  <para>
                     <emphasis>EInvalid_Access_Err =
                     class(EdomException);</emphasis>
                     
    Raised if a parameter or an operation is not supported by the underlying
    object.

                  </para>
               </listitem>
               <listitem>
                  <para>
                     <emphasis>EInuse_Node_Err = class(EdomException);
                     (+)</emphasis>
                     
    Raised if an attempt is made to add a node that is already inuse elsewhere. 

                  </para>
               </listitem>
               <listitem>
                  <para>
                     <emphasis>EInuse_AttributeDefinition_Err =
                     class(EdomException); (+)</emphasis>
                     
    Raised if an attempt is made to add an attributeDefinition node that is
    already inuse elsewhere. 

                  </para>
               </listitem>
               <listitem>
                  <para>
                     <emphasis>ENo_Exernal_Entity_Allowed_Err =
                     class(EdomException); (+)</emphasis>
                     
    Raised if an external parsed entity or an external parameter entity is
    specified for an entity or parameter entity node 
which is internal.

                  </para>
               </listitem>
               <listitem>
                  <para>
                     <emphasis>EIllegal_Entity_Reference_Err =
                     class(EdomException); (+)</emphasis>
                     
    Raised if an illegal entity reference is found.

                  </para>
               </listitem>
               <listitem>
                  <para>
                     <emphasis>EUnknown_Document_Format_Err =
                     class(EdomException); (+)</emphasis>
                     
    Raised if an attempt is made to retrive an unknown document format.

                  </para>
               </listitem>
            </itemizedlist>
         </para>
      </sect1>
      <sect1>
         <title>General Functions (+)</title>
         <para>
                        
            In addition to the 
            <quote>Document Object Model Level 2</quote>
             guidelines the DOM Delphi implemetation offers the following
             functions for extracting the prefix resp. local name of a qualified
             name as defined in the 
            <quote>Namespaces in XML</quote>
             recommendation of the W3C (
            <quote>REC-xml-names-19990114</quote>
            ). Both functions raise an EInvalid_Character_Err, if the specified
            qualified name contains an illegal value.
         </para>
         <para>
            <itemizedlist>
               <listitem>

                  <para>
(+) function <emphasis>XMLExtractPrefix</emphasis>
	(const qualifiedName: wideString): wideString;

                  </para>
               </listitem>
               <listitem>
                  <para>
                     
(+) function 
                     <emphasis>XMLExtractLocalName</emphasis>
                     (const qualifiedName: wideString): wideString;

                  </para>
               </listitem>
            </itemizedlist>
         </para>
         <para>
            
In addition to the 
            <quote>Document Object Model Level 2</quote>
             guidelines the DOM Delphi implemetation offers the following
             functions for testing whether a WideChar S belongs to the
             respective xml character class. All functions return 'true' if S
             belongs to the class, otherwise they return 'false'. Since the
             value to be tested is always of type WideChar characters out of the
             interval [$10000;$10FFFF] cannot be tested. Instead you can either
             use their low or their high surrogate.

         </para>
         <para>
            <itemizedlist>
               <listitem>
                  <para>
                     
(+) function 
                     <emphasis>IsXmlChar</emphasis>
                     (const S: WideChar): boolean;

                  </para>
               </listitem>
               <listitem>
                  <para>
                     
(+) function 
                     <emphasis>IsXmlWideSpace</emphasis>
                     (const S: WideChar): boolean;

                  </para>
               </listitem>
               <listitem>
                  <para>
                     
(+) function 
                     <emphasis>IsXmlLetter</emphasis>
                     (const S: WideChar): boolean;

                  </para>
               </listitem>
               <listitem>
                  <para>
                     
(+) function 
                     <emphasis>IsXmlBaseChar</emphasis>
                     (const S: WideChar): boolean;

                  </para>
               </listitem>
               <listitem>
                  <para>
                     
(+) function 
                     <emphasis>IsXmlIdeographic</emphasis>
                     (const S: WideChar): boolean;

                  </para>
               </listitem>
               <listitem>
                  <para>
                     
(+) function 
                     <emphasis>IsXmlCombiningChar</emphasis>
                     (const S: WideChar): boolean;

                  </para>
               </listitem>
               <listitem>
                  <para>
                     
(+) function 
                     <emphasis>IsXmlDigit</emphasis>
                     (const S: WideChar): boolean;

                  </para>
               </listitem>
               <listitem>
                  <para>
                     
(+) function 
                     <emphasis>IsXmlExtender</emphasis>
                     (const S: WideChar): boolean;

                  </para>
               </listitem>
               <listitem>
                  <para>
                     
(+) function 
                     <emphasis>IsXmlNameChar</emphasis>
                     (const S: WideChar): boolean;

                  </para>
               </listitem>
               <listitem>
                  <para>
                     
(+) function 
                     <emphasis>IsXmlPubidChar</emphasis>
                     (const S: WideChar): boolean;

                  </para>
               </listitem>
            </itemizedlist>
         </para>
         <para>
            
In addition to the 
            <quote>Document Object Model Level 2</quote>
             guidelines the DOM Delphi implemetation offers the following
             functions for testing whether a WideString S belongs to the
             respective xml string type.  All functions return 'true' if S
             belongs to the type, otherwise they return 'false'.

         </para>
         <para>
            <itemizedlist>
               <listitem>
                  <para>
                     
(+) function 
                     <emphasis>IsXmlS</emphasis>
                     (const S: WideString): boolean;

                  </para>
               </listitem>
               <listitem>
                  <para>
                     
(+) function 
                     <emphasis>IsXmlName</emphasis>
                     (const S: WideString): boolean;

                  </para>
               </listitem>
               <listitem>
                  <para>
                     
(+) function 
                     <emphasis>IsXmlNmtoken</emphasis>
                     (const S: WideString): boolean;

                  </para>
               </listitem>
               <listitem>
                  <para>
                     
(+) function 
                     <emphasis>Isdef</emphasis>
                     (const S: WideString): boolean;

                  </para>
               </listitem>
               <listitem>
                  <para>
                     
(+) function 
                     <emphasis>IsXmlEntityRef</emphasis>
                     (const S: WideString): boolean;

                  </para>
               </listitem>
               <listitem>
                  <para>
                     
(+) function 
                     <emphasis>IsXmlPEReference</emphasis>
                     (const S: WideString): boolean;

                  </para>
               </listitem>
               <listitem>
                  <para>
                     
(+) function 
                     <emphasis>IsXmlReference</emphasis>
                     (const S: WideString): boolean;

                  </para>
               </listitem>
               <listitem>
                  <para>
                     
(+) function 
                     <emphasis>IsXmlEntityValue</emphasis>
                     (const S: WideString): boolean;

                  </para>
               </listitem>
               <listitem>
                  <para>
                     
(+) function 
                     <emphasis>IsXmlAttValue</emphasis>
                     (const S: WideString): boolean;

                  </para>
               </listitem>
               <listitem>
                  <para>
                     
(+) function 
                     <emphasis>IsXmlSystemLiteral</emphasis>
                     (const S: WideString): boolean;

                  </para>
               </listitem>
               <listitem>
                  <para>
                     
(+) function 
                     <emphasis>IsXmlPubidLiteral</emphasis>
                     (const S: WideString): boolean;

                  </para>
               </listitem>
               <listitem>
                  <para>
                     
(+) function 
                     <emphasis>IsXmlCharData</emphasis>
                     (const S: WideString): boolean;

                  </para>
               </listitem>
               <listitem>
                  <para>
                     
(+) function 
                     <emphasis>IsXmlPITarget</emphasis>
                     (const S: WideString): boolean;

                  </para>
               </listitem>
               <listitem>
                  <para>
                     
(+) function 
                     <emphasis>IsXmlVersionNum</emphasis>
                     (const S: WideString): boolean;

                  </para>
               </listitem>
               <listitem>
                  <para>
                     
(+) function 
                     <emphasis>IsXmlEncName</emphasis>
                     (const S: WideString): boolean;

                  </para>
               </listitem>
               <listitem>
                  <para>
                     
(+) function 
                     <emphasis>IsXmlStringType</emphasis>
                     (const S: WideString): boolean;

                  </para>
               </listitem>
               <listitem>
                  <para>
                     
(+) function 
                     <emphasis>IsXmlTokenizedType</emphasis>
                     (const S: WideString): boolean;

                  </para>
               </listitem>
            </itemizedlist>
         </para>
         <para>
            

In addition to the 
            <quote>Document Object Model (Core) Level 1</quote>
             guidelines the DOM Delphi implemetation offers the following
             functions for testing whether a WideChar S or a WideString S
             belongs to the respective XML-namespace string type.  All functions
             return 'true' if S belongs to the type, otherwise they return
             'false'.

         </para>
         <para>
            <itemizedlist>
               <listitem>
                  <para>
                     
(+) function 
                     <emphasis>IsXmlNCNameChar</emphasis>
                     (const s: WideChar): boolean;

                  </para>
               </listitem>
               <listitem>
                  <para>
                     
(+) function 
                     <emphasis>IsXmlNCName</emphasis>
                     (const S: WideString): boolean;

                  </para>
               </listitem>
               <listitem>
                  <para>
                     
(+) function 
                     <emphasis>IsXmlDefaultAttName</emphasis>
                     (const S: WideString): boolean;

                  </para>
               </listitem>
               <listitem>
                  <para>
                     
(+) function 
                     <emphasis>IsXmlPrefixedAttName</emphasis>
                     (const S: WideString): boolean;

                  </para>
               </listitem>
               <listitem>
                  <para>
                     
(+) function 
                     <emphasis>IsXmlNSAttName</emphasis>
                     (const S: WideString): boolean;

                  </para>
               </listitem>
               <listitem>
                  <para>
                     
(+) function 
                     <emphasis>IsXmlLocalPart</emphasis>
                     (const S: WideString): boolean;

                  </para>
               </listitem>
               <listitem>
                  <para>
                     
(+) function 
                     <emphasis>IsXmlPrefix</emphasis>
                     (const S: WideString): boolean;

                  </para>
               </listitem>
               <listitem>
                  <para>
                     
(+) function 
                     <emphasis>IsXmlQName</emphasis>
                     (const S: WideString): boolean;

                  </para>
               </listitem>
            </itemizedlist>
         </para>
         <para>
            

In addition to the 
            <quote>Document Object Model (Core) Level 1</quote>
             guidelines the DOM Delphi implemetation offers the following
             convertion functions:

         </para>
         <para>
            <itemizedlist>
               <listitem>
                  <para>
                     
(+) function 
                     <emphasis>XmlIntToCharRef</emphasis>
                     (const value: integer): wideString;
      <para>Converts an integer value into a character reference of the form
      '&amp;#value;'.</para>
      Parameters:
      - value
		 The integer value being transformed.
                  </para>
               </listitem>
               <listitem>
                  <para>
                     
(+) function 
                     <emphasis>XmlCharRefToInt</emphasis>
                     (const S: WideString): integer;
                     <literallayout>
      Converts a character reference into its integer value. 
      A character reference has the form &amp;#n; or &amp;#xh;, 
      where n is a decimal number out of the interval [0;1114111] 
      or h is a hexadecimal number out of the interval [0000;10FFFF]. 
      The character reference must also refer to a valid xml-character. 
      If that is not true an EConvertError is raised.

      Parameters:
      - S
		 The character reference being transformed.
      Return Value:
         The integer value of the character reference. 
      Exceptions:		 
      - EConvertError
          This Delphi exception is raised if S is not a valid character refence
          value.</literallayout>
                  </para>
               </listitem>
               <listitem>
                  <para>
                     
(+) function 
                     <emphasis>XmlCharRefToStr</emphasis>
                     (const S: WideString): WideString;
                     <literallayout>
      Converts a character reference into a UTF-16BE conformal wideString. 
      A character reference has the form &amp;#n; or &amp;#xh;, 
      where n is a decimal number out of the interval [0;1114111] 
      or h is a hexadecimal number out of the interval [0000;10FFFF]. 
      The character reference must also refer to a valid xml-character. 
      If that is not true an EConvertError is raised. 
      If the value of the character reference exceeds $FFFF it is transformed
      into a UTF-16BE surrogate.

      Parameters:
      - S
		 The character reference being transformed.
      Return Value:
         A UTF-16BE conformal wideString of the character reference. 
      Exceptions:		 
      - EConvertError
          This Delphi exception is raised if S is not a valid character refence
          value.</literallayout>
                  </para>
               </listitem>
               <listitem>
                  <para>
                     	  
(+) function 
                     <emphasis>XmlStrToCharRef</emphasis>
                     (const S: WideString): WideString;
                     <literallayout>
      Converts a UTF-16BE conformal wideString into a sequence of character
      references. 
      A character reference has the form &amp;#n; or &amp;#xh;, 
      where n is a decimal number out of the interval [0;1114111] 
      or h is a hexadecimal number out of the interval [0000;10FFFF]. 
      The character reference must also refer to a valid xml-character. 
      If that is not true an EConvertError is raised.

      Parameters:
      - S
         The UTF-16BE conformal wideString being transformed.
      Return Value:
         A wideString consisting of a sequence of character references.
      Exceptions:		 
      - EConvertError
          This Delphi exception is raised if S contains an invalid
          xml-character.</literallayout>
                  </para>
               </listitem>

               <listitem>
                  <para>
                     	  
(+) function 
                     <emphasis>UTF8ToUTF16BEStr</emphasis>
                     (const s: string): wideString;
                     <literallayout>
      Converts a UTF-8 string into a UTF-16BE WideString; The widestring 
	  starts with a byte order mark. No special conversions (e.g. on 
	  line breaks) and no XML-char checking are done.

      Parameters:
      - s
         The UTF-8 string to be converted.
      Return Value:
         The content of 's' as an UTF-16BE wideString starting with a byte order mark.
      Exceptions:		 
      - EConvertError
          This Delphi exception is raised if 's' contains an invalid
          UTF-8 sequence.</literallayout>
                  </para>
               </listitem>

               <listitem>
                  <para>
                     	  
(+) function 
                     <emphasis>UTF16BEToUTF8Str</emphasis>
                     (const ws: wideString): string;
                     <literallayout>
      Converts a UTF-16BE widestring into a UTF-8 encoded string
      (and expands LF to CR+LF). The implementation is optimized
      for code that contains mainly ASCII characters (&lt;=#$7F) and
      little above ASCII-chars. The buffer for the Result is set
      to the widestrings-length. With each non-ASCII character the
      Result-buffer is expanded (by the Insert-function), which leads
      to performance problems when one processes e.g. mainly Japanese
      documents.

      Parameters:
      - ws
         The UTF-16BE wideString to be converted.
      Return Value:
         The content of 'ws' as an UTF-8 string.
      Exceptions:		 
      - EConvertError
          This Delphi exception is raised if 'ws' contains an invalid
          UTF-16BE sequence.</literallayout>
                  </para>
               </listitem>

            </itemizedlist>
         </para>
         <para>
            

In addition to the 
            <quote>Document Object Model (Core) Level 1</quote>
             guidelines the DOM Delphi implemetation offers the following
             functions for UTF-16 surrogate treatment:

         </para>
         <para>
            <itemizedlist>
               <listitem>
                  <para>
                     
(+) function 
                     <emphasis>Utf16HighSurrogate</emphasis>
                     (const value: integer): WideChar;
                     <literallayout>
      Extracts the high surrogate of a number out of the interval
      [$10000;$10FFFF].
      Parameters:
      - value
		 The number from which the high surrogate is to be extracted.
      Return Value:
         The high surrogate as a WideChar.
      Exceptions:		 
      - EConvertError
          This Delphi exception is raised if value is not contained in the
          interval [$10000;$10FFFF].</literallayout>
                  </para>
               </listitem>
               <listitem>
                  <para>
                     
(+) function 
                     <emphasis>Utf16LowSurrogate</emphasis>
                     (const value: integer): WideChar;
                     <literallayout>
      Extracts the high surrogate of a number out of the interval
      [$10000;$10FFFF].
      Parameters:
      - value
		 The number from which the low surrogate is to be extracted.
      Return Value:
         The low surrogate as a WideChar.
      Exceptions:		 
      - EConvertError
          This Delphi exception is raised if value is not contained in the
          interval [$10000;$10FFFF].</literallayout>
                  </para>
               </listitem>
               <listitem>
                  <para>
                     
(+) function 
                     <emphasis>Utf16SurrogateToInt</emphasis>
                     (const highSurrogate, lowSurrogate: WideChar): integer;
                     <literallayout>
      Transforms a high surrogate plus a low surrogate into an integer.
      Parameters:
      - highSurrogate
		 The high surrogate part of the integer.
      - lowSurrogate
		 The low surrogate part of the integer.
      Return Value:
         The integer value of the high surrogate plus the low surrogate.
      Exceptions:		 
      - EConvertError
          This Delphi exception is raised if the ordinal value 
of the highSurrogate is not contained in the interval [$D800;$DBFF] 
or if the ordinal value of the lowSurrogate is not contained 
in the interval [$DC00;$DFFF].</literallayout>
                  </para>
               </listitem>
               <listitem>
                  <para>
                     
(+) function 
                     <emphasis>IsUtf16HighSurrogate</emphasis>
                     (const S: WideChar): boolean;
                     <literallayout>
      Tests whether the specified WideChar is a UTF16 high surrogate.
      Return Value:
         'true' if the specified WideChar is a UTF16 high surrogate, 
         otherwise 'false'.</literallayout>
                  </para>
               </listitem>
               <listitem>
                  <para>
                     
(+) function 
                     <emphasis>IsUtf16LowSurrogate</emphasis>
                     (const S: WideChar): boolean;
                     <literallayout>
      Tests whether the specified WideChar is a UTF16 low surrogate.
      Return Value:
         'true' if the specified WideChar is a UTF16 low surrogate, 
         otherwise 'false'.</literallayout>
                  </para>
               </listitem>
            </itemizedlist>
         </para>
      </sect1>
      <sect1>
         <title>General Classes</title>
         <sect2>
            <title>TdomNodeType (+)</title>
            <para>TdomNodeType defines all valid node types of the DOM.</para>
            <para>
Defined Constants:
</para>
            <para>
               <itemizedlist>
                  <listitem>
                     <para>
                        <emphasis>ntUnknown</emphasis>
                        
      The type of the node is not specified.

                     </para>
                  </listitem>
                  <listitem>
                     <para>
                        <emphasis>ntElement_Node</emphasis>
                        
      The node is a TdomElement.

                     </para>
                  </listitem>
                  <listitem>
                     <para>
                        <emphasis>ntAttribute_Node</emphasis>
                        
      The node is a TdomAttr.

                     </para>
                  </listitem>
                  <listitem>
                     <para>
                        <emphasis>ntText_Node</emphasis>
                        
      The node is a TdomText.

                     </para>
                  </listitem>
                  <listitem>
                     <para>
                        <emphasis>ntCDATA_Section_Node</emphasis>
                        
      The node is a TdomCDATASection.

                     </para>
                  </listitem>
                  <listitem>
                     <para>
                        <emphasis>ntEntity_Reference_Node</emphasis>
                        
      The node is a TdomEntityReference.

                     </para>
                  </listitem>
                  <listitem>
                     <para>
                        <emphasis>ntParameter_Entity_Reference_Node</emphasis>
                        
      The node is a TdomParameterEntityReference.

                     </para>
                  </listitem>
                  <listitem>
                     <para>
                        <emphasis>ntEntity_Node</emphasis>
                        
      The node is a TdomEntity.

                     </para>
                  </listitem>
                  <listitem>
                     <para>
                        <emphasis>ntParameter_Entity_Node</emphasis>
                        
      The node is a TdomParameterEntity.

                     </para>
                  </listitem>
                  <listitem>
                     <para>
                        <emphasis>ntEntity_Declaration_Node</emphasis>
                        
      The node is a TdomEntityDeclaration.

                     </para>
                  </listitem>
                  <listitem>
                     <para>
                        <emphasis>ntParameter_Entity_Declaration_Node</emphasis>
                        
      The node is a TdomParameterEntityDeclaration.

                     </para>
                  </listitem>
                  <listitem>
                     <para>
                        <emphasis>ntProcessing_Instruction_Node</emphasis>
                        
      The node is a TdomProcessingInstruction.

                     </para>
                  </listitem>
                  <listitem>
                     <para>
                        <emphasis>ntXml_Declaration_Node</emphasis>
                        
      The node is a TdomXmlDeclaration.

                     </para>
                  </listitem>
                  <listitem>
                     <para>
                        <emphasis>ntComment_Node</emphasis>
                        
      The node is a TdomComment.

                     </para>
                  </listitem>
                  <listitem>
                     <para>
                        <emphasis>ntDocument_Node</emphasis>
                        
      The node is a TdomDocument.

                     </para>
                  </listitem>
                  <listitem>
                     <para>
                        <emphasis>ntDocument_Type_Node</emphasis>
                        
      The node is a TdomDocumentType.

                     </para>
                  </listitem>
                  <listitem>
                     <para>
                        <emphasis>ntConditional_Section_Node</emphasis>
                        
      The node is a TdomConditionalSection.

                     </para>
                  </listitem>
                  <listitem>
                     <para>
                        <emphasis>ntDocument_Fragment_Node</emphasis>
                        
      The node is a TdomDocumentFragment.

                     </para>
                  </listitem>
                  <listitem>
                     <para>
                        <emphasis>ntNotation_Node</emphasis>
                        
      The node is a TdomNotation.

                     </para>
                  </listitem>
                  <listitem>
                     <para>
                        <emphasis>ntNotation_Declaration_Node</emphasis>
                        
      The node is a TdomNotationDeclaration.

                     </para>
                  </listitem>
                  <listitem>
                     <para>
                        <emphasis>ntElement_Type_Declaration_Node</emphasis>
                        
      The node is a TdomElementTypeDeclaration.

                     </para>
                  </listitem>
                  <listitem>
                     <para>
                        <emphasis>ntSequence_Particle_Node</emphasis>
                        
      The node is a TdomSequenceParticle.

                     </para>
                  </listitem>
                  <listitem>
                     <para>
                        <emphasis>ntChoice_Particle_Node</emphasis>
                        
      The node is a TdomChoiceParticle.

                     </para>
                  </listitem>
                  <listitem>
                     <para>
                        <emphasis>ntPcdata_Choice_Particle_Node</emphasis>
                        
      The node is a TdomPcdataChoiceParticle.

                     </para>
                  </listitem>
                  <listitem>
                     <para>
                        <emphasis>ntElement_Particle_Node</emphasis>
                        
      The node is a TdomElementParticle.

                     </para>
                  </listitem>
                  <listitem>
                     <para>
                        <emphasis>ntAttribute_List_Node</emphasis>
                        
      The node is a TdomAttrList.

                     </para>
                  </listitem>
                  <listitem>
                     <para>
                        <emphasis>ntAttribute_Definition_Node</emphasis>
                        
      The node is a TdomAttrDefinition.

                     </para>
                  </listitem>
                  <listitem>
                     <para>
                        <emphasis>ntNametoken_Node</emphasis>
                        
      The node is a TdomNametoken.

                     </para>
                  </listitem>
                  <listitem>
                     <para>
                        <emphasis>ntExternal_Subset_Node</emphasis>
                        
      The node is a TdomExternalSubset.

                     </para>
                  </listitem>
                  <listitem>
                     <para>
                        <emphasis>ntInternal_Subset_Node</emphasis>
                        
      The node is a TdomInternalSubset.

                     </para>
                  </listitem>
               </itemizedlist>
            </para>
         </sect2>
         <sect2>
            <title>TdomNodeTypeSet (+)</title>
            <para>TdomNodeTypeSet = set of TdomNodeType;</para>
            <para>
TdomNodeTypeSet defines a set of TdomNodeType instances.

         </para>
         </sect2>
         <sect2>
            <title>TdomContentspecType (+)</title>
            <para>TdomContentspecType defines all valid content specification
            types of an element type declaration. </para>
            <para>
               <emphasis>Defined constants:</emphasis>
                ctEmpty, ctAny, ctMixed, ctChildren.

         
            </para>
         </sect2>
         <sect2>
            <title>Document Format Classes (+)</title>
            <para>The following classes, pointers and variables are used to
            implement the registration of classes derived from the TdomDocument
            class.  For details see the description of the
            registerDocumentFormat and getDocumentClass methods of the
            TdomImplementation class.</para>
            <para>
               <emphasis>type</emphasis>
            </para>
            <para>
               <literallayout>
  TdomDocumentClass = class of TdomDocument;

  PdomDocumentFormat = ^TdomDocumentFormat;

  TdomDocumentFormat = record
    DocumentClass: TdomDocumentClass;
    NamespaceUri:  wideString;
    LocalName:     wideString;
    next:          PdomDocumentFormat;
  end;

var
  domDocumentFormatList: PdomDocumentFormat = nil;
</literallayout>
            </para>
         </sect2>
         <sect2>
            <title>TdomCustomStr (+)</title>
            <para>
TdomCustomStr is used by some other classes to improve the performance of
concating wideString. You should better not use this class in your own
applications, because it is not garanteed, that its functionality will remain
the same in future XDOM versions.
</para>
         </sect2>
      </sect1>
      <sect1>
         <title>TdomImplementation = class (*+)</title>
         <para>
TdomImplementation provides a number of methods for performing operations that
are independent of any particular instance of the document object model.</para>
         <para>
            <emphasis>Properties</emphasis>
            <itemizedlist>
               <listitem>
                  <para>
                     
(+) property documents: TdomNodeList (readonly)
                     <literallayout>
 A list of all TdomDocuments that had been created by this
 TdomImplementation.</literallayout>
                  </para>
               </listitem>
               <listitem>
                  <para>
                     
(+) property documentTypes: TdomNodeList (readonly)
                     <literallayout>
      A list of all TdomDocumentTypes which had been 
created by this TdomImplementation and which are 
currently not attached to any TdomDocument.</literallayout>
                  </para>
               </listitem>
            </itemizedlist>
         </para>
         <para>
            <emphasis>Public methods</emphasis>
            <itemizedlist>
               <listitem>
                  <para>
                     
    constructor Create(aOwner: TComponent); override;
                     <literallayout>
	  Creates a new TdomImplementation object. 
Note, that TdomImplementation objects are automatically 
being created when adding them from the component's palette onto a form.

      Parameters:
      - AOwner
         The component that holds the new TdomImplementation
         object.</literallayout>
                  </para>
               </listitem>
               <listitem>
                  <para>
                     
(+) procedure Clear; virtual;
                     <literallayout>
      Frees all TdomDocumentTypes and TdomDocuments 
that had been created by this TdomImplementation. 
If there are TdomNodes, TdomNodeIterators, or TdomTreeWalkers 
that belong to a TdomDocument object to be freed, they are freed, too. 
Afterwards, 'documents' and 'documentTypes' are empty.</literallayout>
                  </para>
               </listitem>
               <listitem>
                  <para>
                     
(+) procedure FreeDocument(const doc: TdomDocument); virtual;
                     <literallayout>
      Removes the specified TdomDocument from the 'documents' list
and frees it. 
If there are TdomNodes, TdomNodeIterators, or TdomTreeWalkers 
that belong to a TdomDocument object to be freed, they are freed, too.

      Exceptions:
      - ENot_Found_Err
         Raised if the specified TdomDocument is not contained in the
         'documents' list.</literallayout>
                  </para>
               </listitem>
               <listitem>
                  <para>
                     
(+) procedure FreeDocumentType(const docType: TdomDocumentType); virtual;
                     <literallayout>
      Removes the specified TdomDocumentType from the 'documentTypes' list and
      frees it. 
      Exceptions:
      - ENot_Found_Err
         Raised if the specified TdomDocumentType is not contained in the
         'documentTypes' list.</literallayout>
                  </para>
               </listitem>
               <listitem>
                  <para>
                     
(#*)function createDocument(const name: WideString;
                                  doctype: TdomDocumentType): TdomDocument;
                                  virtual;
                     <literallayout>
      Creates a TdomDocument with its document element 
      using a non-namespace aware method.*

      Parameters:
      - Name
         The name of the TdomElement to create.
      - doctype
         The type of document to be created or nil. 
When doctype is not nil, its Node.ownerDocument attribute is set 
to the document being created, it is removed from the documentTypes list, 
and it is further treated as if it had been created by the new TdomDocument
object.

      Return Values:
         A new TdomDocument object, or an object of a class derived 
from TdomDocument if this class has previously been registered with 
the specified name (see the describtion of RegisterDocumentFormat for more
details). 

      Exceptions:
      - EInvalid_Character_Err
         Raised if the specified name contains an illegal character.
      - EWrong_Document_Err
         Raised if doctype has already been used with a different document
or was created from a different implementation.</literallayout>
                  </para>
               </listitem>
               <listitem>
                  <para>
                     
(+) function createDocumentNS(const namespaceURI,
                                    qualifiedName: WideString;
                                    doctype: TdomDocumentType): TdomDocument;
                                    virtual;
                     <literallayout>
      Creates a TdomDocument with its document element using a namespace aware
      method.
      Parameters:
      - NamespaceURI
         The namespace URI of the TdomElement to create.
      - QualifiedName
         The qualified name of the TdomElement to create.
      - doctype
         The type of document to be created or nil. 
When doctype is not nil, its Node.ownerDocument attribute is set 
to the document being created, it is removed from the documentTypes list, 
and it is further treated as if it had been created by the new TdomDocument
object.

      Return Values:
         A new TdomDocument object, or an object of a class 
derived from TdomDocument if this class has previously been 
registered with the specified namespace URI and qualified name
 (see the describtion of RegisterDocumentFormat for more details).

      Exceptions:
      - EInvalid_Character_Err
         Raised if the specified qualified name contains an illegal character.
      - ENamespace_Err (*)
         Raised if the qualifiedName is malformed, if the qualifiedName 
has a prefix and the namespaceURI is an empty string, if the qualifiedName 
has a prefix that is 'xml' and the namespaceURI is different from 
'http://wwww.w3.org/XML/1998/namespace'[*, if the qualifiedName has 
a prefix that is 'xmlns' and the namespaceURI is different from 
'http://www.w3.org/2000/xmlns/', or if the qualifiedName is 'xmlns', 
and the namespaceURI is different from 'http://www.w3.org/2000/xmlns/'].
      - EWrong_Document_Err
         Raised if doctype has already been used with a different document 
or was created from a different implementation.</literallayout>
                  </para>
               </listitem>
               <listitem>
                  <para>
                     
(#*)function createDocumentType(const name,
                                      publicId,
                                      systemId: WideString): TdomDocumentType;
                                      virtual;
                     <literallayout>
      Creates an empty TdomDocumentType using a non-namespace 
aware method.* Entity declarations and notations are not made available. 
Entity reference expansions and default attribute additions do not occur.

      Parameters:
      - Name
         The name of the document type to be created.
      - publicId 
         The public identifier of the document type.
      - systemId 
         The system identifier of the document type.
      Return Values:
         A new TdomDocumentType object. 
      Exceptions:
      - EInvalid_Character_Err
         Raised if the specified name contains an illegal
         character.</literallayout>
                  </para>
               </listitem>
               <listitem>
                  <para>
                     
(+) function createDocumentTypeNS(const qualifiedName,
                                        publicId,
                                        systemId: WideString): TdomDocumentType;
                                        virtual;
                     <literallayout>
      Creates an empty TdomDocumentType using a namespace aware method. 
Entity declarations and notations are not made available. 
Entity reference expansions and default attribute additions do not occur.

      Parameters:
      - qualifiedName
         The qualified name of the document type to be created.
      - publicId 
         The public identifier of the document type.
      - systemId 
         The system identifier of the document type.
      Return Values:
         A new TdomDocumentType object. 
      Exceptions:
      - EInvalid_Character_Err
         Raised if the specified qualified name contains an illegal character.
      - ENamespace_Err
         Raised if the specified qualified name is malformed.</literallayout>
                  </para>
               </listitem>
               <listitem>
                  <para>
                     
    function HasFeature(const feature, version: WideString): boolean;
                     <literallayout>
      Test if the DOM implementation implements a specific feature. 
      Parameters:
      - feature
		 The package name of the feature to test. 
In Level 1, the legal values are "HTML" and "XML" (case-insensitive).
      - version
		 This is the version number of the package name to test. 
In Level 1, this is the string "1.0" If the version is not specified, 
supporting any version of the feature will cause the method to return true.
 
      Return Value:
         true if the feature is implemented in the specified version, 
         false otherwise.</literallayout>
                  </para>
               </listitem>
               <listitem>
                  <para>
                     
(+) function GetDocumentClass(const aNamespaceUri,
                                    aQualifiedName: wideString):
                                    TdomDocumentClass; virtual;
                     <literallayout>
      Retrieves the last TdomDocumentClass that had been registered 
with the specified namespace URI and local name.

      Parameters:
      - aNamespaceUri
		 The namespace URI associated with the registered document class.
      - aQualifiedName
		 The qualified name associated with the registered document class.
      Return Value:
         A class derived from TdomDocument which is associated with the 
specified namespace URI and qualified name.

      Exceptions:
      - EDocumentFormatUnknown
         Raised if there is no document class which is associated with 
the specified namespace URI and local name.</literallayout>
                  </para>
               </listitem>
               <listitem>
                  <para>
                     
(+) class procedure RegisterDocumentFormat(const aNamespaceUri,
                                                 aQualifiedName: wideString;
                                                 aDocumentClass:
                                                 TdomDocumentClass); virtual;
                     <literallayout>
      Registers a new document class to the global list of 
registered document classes.  
The list being global means, that it is used from all 
TdomImplementation objects of an application simultaneously. 
The new TdomDocument object returned by the createDocument(name, doctype) 
method is of type aDocumentClass if 'name' equals 'aQualifiedName' and 
'aNamespaceUri' is an empty string. The new TdomDocument object returned 
by the createDocumentNS(namespaceURI, qualifiedName, doctype) method is 
of type aDocumentClass if 'name' equals 'aQualifiedName' and 'namespaceURI' 
equals 'aNamespaceUri'. Note, that this also effects the
TXmlToDomParser.FileToDom method.

      Use RegisterDocumentFormat if you want to implement your own node 
types for special purposes. 
For example if you want to implement a special treatment of XHTML-anchors 
you can do the following:
        1) Derive a new node type from TdomElement:
             type TxhtmlAnchor = class(TdomElement)
               ...
             end; 
        2) Derive a new node type from TdomDocument including a factory 
           method for TxhtmlAnchor objects:
             type TxhtmlDocument = class(TdomDocument)
               ...
             public;
               ...
               function createAnchor: TxhtmlAnchor; virtual;
             end; 
        3) Register the new document class:
             MyDomImplementation.RegisterDocumentFormat('','html',TxhtmlDocument
             );
        4) Now you can create a new TxhtmlDocument and use its factory method 
           to create an anchor object:
             procedure test(myDomImplementation: TdomImplementation);
             var
               myXhtmlDocument: TxhtmlDocument;
               myAnchor: TxhtmlAnchor; 
             begin 
               myXhtmlDocument:= 
                 TxhtmlDocument(MyDomImplementation.createDocument('html',nil));
               myAnchor:= 
                 myXhtmlDocument.createAnchor; 
             end;
        If you want to use the above example with namespace aware functions 
you should bind it to the XHTML1.0's namespace URI
"http://www.w3.org/1999/xhtml".

      Parameters:
      - aNamespaceUri
		 The namespace URI associated with the document class to be registered.
      - aQualifiedName
		 The qualified name associated with the document class to be registered.
      - aDocumentClass
		 The class derived from TdomDocumentto be registered.</literallayout>
                  </para>
               </listitem>
               <listitem>
                  <para>
                     
(+) function SupportsDocumentFormat(const aNamespaceUri,
                                          aQualifiedName: wideString): boolean;
                                          virtual;
                     <literallayout>
      Tests whether there is any document class registered for the specified 
namespace URI and qualified name.

      Parameters:
      - aNamespaceUri
		 The namespace URI associated with a registered document class.
      - aQualifiedName
		 The qualified name associated with a registered document class.
      Return Value:
         If there is a document class which is associated with the specified 
namespace URI and local name 'true' is returned, otherwise
'false'.</literallayout>
                  </para>
               </listitem>
               <listitem>
                  <para>
                     
(+) class procedure UnregisterDocumentClass(const aDocumentClass:
TdomDocumentClass); virtual;
                     <literallayout>
      Removes all references to the specified document class from the 
global list of registered document classes. 
The list being global means, that it is used from all 
TdomImplementation objects of an application simultaneously. 
UnregisterDocumentClass undoes all previous registrations of the 
specified document class carried out by the method RegisterDocumentFormat.

      Parameters:
      - aDocumentClass
		 A class derived from TdomDocument whoes references are 
being removed from the global list of registered document
classes.</literallayout>
                  </para>
               </listitem>
            </itemizedlist>
         </para>
      </sect1>
      <sect1>
         <title>TdomNodeList = class</title>
         <para>TdomNodeList provides the abstraction of an ordered collection of
         nodes. 
The items in the NodeList are accessible via an integral index, starting from
0.</para>
         <para>
            <emphasis>Properties</emphasis>
         </para>
         <para>
            <itemizedlist>
               <listitem>
                  <para>
                     
    property Length: integer (readonly)
                     <literallayout>
      The number of nodes in the NodeList instance. 
The range of valid child node indices is 0 to length-1
inclusive.</literallayout>
                  </para>
               </listitem>
            </itemizedlist>
         </para>
         <para>
            <emphasis>Protected methods</emphasis>
         </para>
         <para>
            <itemizedlist>
               <listitem>
                  <para>
                     
(+) function IndexOf(const Node: TdomNode): integer; virtual;
                     <literallayout>
      Returns the index of the item Node in the collection. 
If Node is not a member of the collection, -1 is returned.
      Parameters:
      - Node
         The node whoes index is being retrieved.
      Return Values:
         The index position of the node in the collection, 
or -1 if Node is not a member of the collection.</literallayout>
                  </para>
               </listitem>
            </itemizedlist>
         </para>
         <para>
            <emphasis>Public methods</emphasis>
         </para>
         <para>
            <itemizedlist>
               <listitem>
                  <para>
                     
    constructor Create(const NodeList: TList);
                     <literallayout>
	  Creates a new instance of a TdomNodeList object;
      Parameters:
      - NodeList
         The collection of nodes which is to be accessed by this TdomNodeList,
         given as a TList.
    function Item(const index: integer): TdomNode; virtual;
      Returns the indexth item in the collection. If index is greater than or
      equal 
to the number of nodes in the list, nil is returned.

      Parameters:
      - index
         Index into the collection
      Return Values:
         The node at the index position in the collection, or nil if that is not
         a valid index.</literallayout>
                  </para>
               </listitem>
            </itemizedlist>
         </para>
      </sect1>
      <sect1>
         <title>TdomElementsNodeList = class(TdomNodeList) (+)</title>
         <para>TdomElementsNodeList provides the abstraction of an ordered 
collection of TdomElement child nodes of a TdomDocument. 
The items in the NodeList are accessible via an integral index, starting from
0.</para>
         <para>
            <emphasis>Properties</emphasis>
         </para>
         <para>
            <itemizedlist>
               <listitem>
                  <para>
                     
(+) property Length: integer (readonly)
                     <literallayout>
      The number of nodes in the NodeList instance. 
The range of valid child node indices is 0 to length-1
inclusive.</literallayout>
                  </para>
               </listitem>
            </itemizedlist>
         </para>
         <para>
            <emphasis>Public methods</emphasis>
         </para>
         <para>
            <itemizedlist>
               <listitem>
                  <para>
                     
(+) constructor Create(const QueryName: WideString; const StartElement:
TdomNode);
                     <literallayout>
	  Creates a new instance of a TdomElementsNodeList object;
      Parameters:
      - QueryName
         The tagname of the TdomElement nodes that are accessed through the
         TdomElementsNodeList. 
If QueryName has the value '*' then every TdomElement node is being retrieved.
      - StartElement
	     The TdomElementsNodeList only retrieves the TdomElement nodes 
which are descendants of the StartElement. 
The StartElement itself is not being retrieved. 
To retrieve all TdomElement nodes the StartElement should be set to the
TdomDocument object of a document.</literallayout>
                  </para>
               </listitem>
               <listitem>
                  <para>
                     
(+) function IndexOf(const Node: TdomNode): integer; virtual;
                     <literallayout>
      Returns the index of the item Node in the collection. 
If Node is not a member of the collection, -1 is returned.

      Parameters:
      - Node
         The node whoes index is being retrieved.
      Return Values:
         The index position of the node in the collection, 
or -1 if Node is not a member of the collection.</literallayout>
                  </para>
               </listitem>
               <listitem>
                  <para>
                     
(+) function Item(const index: integer): TdomNode; virtual;
                     <literallayout>
      Returns the indexth item in the collection. 
If index is greater than or equal to the number of nodes in the list, nil is
returned.
      Parameters:
      - index
         Index into the collection
      Return Values:
         The node at the index position in the collection, or nil if that is not
         a valid index.</literallayout>
                  </para>
               </listitem>
            </itemizedlist>
         </para>
      </sect1>
      <sect1>
         <title>TdomElementsNodeListNS = class(TdomNodeList) (+)</title>
         <para>TdomElementsNodeListNS provides the abstraction of an ordered
         collection of TdomElement child nodes of a TdomDocument. The items in
         the NodeList are accessible via an integral index, starting from
         0.</para>
         <para>
            <emphasis>Properties</emphasis>
         </para>
         <para>
            <itemizedlist>
               <listitem>
                  <para>
                     
(+) property Length: integer (readonly)
                     <literallayout>
      The number of nodes in the NodeList instance. 
The range of valid child node indices is 0 to length-1
inclusive.</literallayout>
                  </para>
               </listitem>
            </itemizedlist>
         </para>
         <para>
            <emphasis>Public methods</emphasis>
         </para>
         <para>
            <itemizedlist>
               <listitem>
                  <para>
                     
(+) constructor Create(const QueryNamespaceURI,
                             QueryLocalName: WideString;
                       const StartElement: TdomNode); virtual;
                     <literallayout>
	  Creates a new instance of a TdomElementsNodeList object;
      Parameters:
      - QueryNamespaceURI
         The namespace URI of the TdomElement nodes to mach on. 
The special value '*' matches all namespaces.
      - QueryLocalName
         The local name of the TdomElement nodes to mach on. 
The special value '*' matches all local names.
      - StartElement
	     The TdomElementsNodeList only retrieves the TdomElement nodes 
which are descendants of the StartElement. 
The StartElement itself is not being retrieved. 
To retrieve all TdomElement nodes the StartElement should be set to the
TdomDocument object of a document.</literallayout>
                  </para>
               </listitem>
               <listitem>
                  <para>
                     
(+) function IndexOf(const Node: TdomNode): integer; virtual;
                     <literallayout>
      Returns the index of the item Node in the collection. 
If Node is not a member of the collection, -1 is returned.
      Parameters:
      - Node
         The node whoes index is being retrieved.
      Return Values:
         The index position of the node in the collection, 
or -1 if Node is not a member of the collection.</literallayout>
                  </para>
               </listitem>
               <listitem>
                  <para>
                      
(+) function Item(const index: integer): TdomNode; virtual;
                     <literallayout>
      Returns the indexth item in the collection. 
If index is greater than or equal to the number of nodes in the list, nil is
returned.
      Parameters:
      - index
         Index into the collection
      Return Values:
         The node at the index position in the collection, or nil if that is not
         a valid index.</literallayout>
                  </para>
               </listitem>
            </itemizedlist>
         </para>
      </sect1>
      <sect1>
         <title>TdomSpecialNodeList = class(TdomNodeList) (+)</title>
         <para>TdomSpecialNodeList provides the abstraction of an ordered
         collection of nodes of a special node type. The items in the NodeList
         are accessible via an integral index, starting from 0.</para>
         <para>
            <emphasis>Properties</emphasis>
         </para>
         <para>
            <itemizedlist>
               <listitem>
                  <para>
                     
(+) property Length: integer (readonly)
                     <literallayout>
      The number of nodes in the NodeList instance. 
The range of valid child node indices is 0 to length-1
inclusive.</literallayout>
                  </para>
               </listitem>
            </itemizedlist>
         </para>
         <para>
            <emphasis>Protected methods</emphasis>
         </para>
         <para>
            <itemizedlist>
               <listitem>
                  <para>
                     
(+) function IndexOf(const Node: TdomNode): integer; override;
                     <literallayout>
      Returns the index of the item Node in the collection. 
If Node is not a member of the collection, -1 is returned.
      Parameters:
      - Node
         The node whoes index is being retrieved.
      Return Values:
         The index position of the node in the collection, or -1 if Node is not
         a member of the collection.</literallayout>
                  </para>
               </listitem>
            </itemizedlist>
         </para>
         <para>
            <emphasis>Public methods</emphasis>
         </para>
         <para>
            <itemizedlist>
               <listitem>
                  <para>
                     
(+) constructor Create(const NodeList: TList; const AllowedNTs:
TDomNodeTypeSet); virtual;
                     <literallayout>
	  Creates a new instance of a TdomNodeList object;
      Parameters:
      - NodeList
         The collection of nodes which is to be accessed by this
         TdomSpecialNodeList, given as a TList.
     - AllowedNTs
	     A set of TdomNodeType objects that indicates which nodes from the
	     NodeList will be accessible through the TdomSpecialNodeList.  
Only those nodes of the NodeList which have one of the indicated node types are
being returned by the TdomSpecialNodeList, the others are being silently
ignored.</literallayout>
                  </para>
               </listitem>
               <listitem>
                  <para>
                     
(+) function Item(const index: integer): TdomNode; override;
                     <literallayout>
      Returns the indexth item in the collection. 
If index is greater than or equal to the number of nodes in the list, nil is
returned.
      Parameters:
      - index
         Index into the collection
      Return Values:
         The node at the index position in the collection, or nil if that is not
         a valid index.</literallayout>
                  </para>
               </listitem>
            </itemizedlist>
         </para>
      </sect1>
      <sect1>
         <title>TdomNamedNodeMap = class(TdomNodeList) (#*)</title>
         <para>
Objects implementing the TdomNamedNodeMap object are used to represent
collections of nodes that can be accessed by name. TdomNamedNodeMap are not
maintained in any particular order. Objects contained in an object implementing
TdomNamedNodeMap may also be accessed by an ordinal index, but this is simply to
allow convenient enumeration of the contents of a TdomNamedNodeMap, and does not
imply that the DOM specifies an order to these Nodes.</para>
         <para>
            <emphasis>Properties</emphasis>
         </para>
         <para>
            <itemizedlist>
               <listitem>
                  <para>
                     
    property length: integer (readonly)
                     <literallayout>
      The number of nodes in the NodeList instance. 
The range of valid child node indices is 0 to length-1
inclusive.</literallayout>
                  </para>
               </listitem>
               <listitem>
                  <para>
                     
(+) property ownerNode: TdomNode (readonly)
                     <literallayout>
      The TdomNode which uses the TdomNamedNodeMap, 
or nil if the TdomNamedNodeMap is not used by a TdomNode.</literallayout>
                  </para>
               </listitem>
               <listitem>
                  <para>
                     
(+) property namespaceAware: boolean
                     <literallayout>
      This property is by default false. 
It can be switched as long as the TdomNamedNodeMap has no child nodes. 
If namespaceAware is true, calling the following methods will lead to an
ENamespace_Err exception:
 getNamedIndex, getNamedItem, removeNamedItem, SetNamedItem. 
If namespaceAware is false, calling the following methods will lead to an
exception: 
getNamedItemNS, removeNamedItemNS, SetNamedItemNs. 
Trying to modify namespaceAware while the TdomNamedNodeMap has child nodes will
raise a ENo_Modification_Allowed_Err.</literallayout>
                  </para>
               </listitem>
            </itemizedlist>
         </para>
         <para>
            <emphasis>Protected methods</emphasis>
         </para>
         <para>
            <itemizedlist>
               <listitem>
                  <para>
                     
(+) function removeItem(const Arg: TdomNode): TdomNode; virtual;
                     <literallayout>
      Removes a node. [Not yet implemented: 
If the removed node is an Attribute with a default value it is immediately
replaced.]
	  Paramters:
	  - Arg
	     The node to remove.
      Return Values:
	     The node removed from the list.
      Exceptions:
      - ENot_Found_Err
	      Raised if Arg is not in the list.</literallayout>
                  </para>
               </listitem>
               <listitem>
                  <para>
                     
(+) function getNamedIndex(const Name: WideString): integer; virtual;
                     <literallayout>
      Returns the index of the Node identified by its name. 
If there is no node named Name in the list, -1 is returned.
      - ENamespace_Err 
	      Raised if namespaceAware is true.</literallayout>
                  </para>
               </listitem>
            </itemizedlist>
         </para>
         <para>
            <emphasis>Public methods</emphasis>
         </para>
         <para>
            <itemizedlist>
               <listitem>
                  <para>
                           
    constructor create(const AOwner, AOwnerNode: TdomNode; const NodeList:
    TList); virtual;
                     <literallayout>
	  Creates a new instance of a TdomNamedNodeMap object;
      Parameters:
      - AOwner
         The TdomNode that creates the TdomNamedNodeMap
      - AOwnerNode
         The TdomNode which uses the TdomNamedNodeMap, 
or nil if the TdomNamedNodeMap is not used by a TdomNode.
      - NodeList
         The collection of nodes which is to be accessed by this
         TdomNamedNodeMap, given as a TList.</literallayout>
                  </para>
               </listitem>
               <listitem>
                  <para>
                     
(*) function getNamedItem(const name: WideString): TdomNode;
                     <literallayout>
      Retrieves a node specified by name.
      Parameters:
      - Name
          Name of a node to retrieve.
      - ENamespace_Err (+)
	      Raised if namespaceAware is true.
      Return Values:
          A TdomNode (of any type) with the specified nodeName, 
or nil if it does not identify any node in the map.</literallayout>
                  </para>
               </listitem>
               <listitem>
                  <para>
                     

(*) function setNamedItem(const Arg: TdomNode): TdomNode; virtual;
                     <literallayout>
      Adds a node using its nodeName property. 
As the nodeName property is used to derive the name which the node must be
stored under, multiple nodes of certain types (those that have a "special"
string value) cannot be stored as the names would clash. 
This is seen as preferable to allowing nodes to be aliased. 
      Parameters:
      - arg
         A node to store in a named node map. 
The node will later be accessible using the value of the nodeName property of
the node. 
If a node with that name is already present in the map, it is replaced by the
new one.
      Return Values:
         If the new tdomNode replaces an existing node the replaced tdomNode is
         returned, 
otherwise nil is returned. 
      Exceptions:
      - EWrong_Document_Err 
         Raised if arg was created from a different TdomDocument than the one
         that created the TdomNamedNodeMap.
      - ENo_Modification_Allowed_Err 
	      Raised if this TdomNamedNodeMap is readonly.
      - EInuse_Attribute_Err (*)
          Raised if arg is a TdomAttr that is already an attribute of another
          Element object [*that means: if the ownerElement of the TdomAttr is
          neither nil nor identical with the ownerNode of the map]. The DOM user
          must explicitly clone Attr nodes to re-use them in other elements.
      - EInuse_Node_Err (+)
          Raised if arg is a TdomNode that is already a child of a node (if its
          parentNode property is not nil).
      - ENamespace_Err (+)
	      Raised if namespaceAware is true.</literallayout>
                  </para>
               </listitem>
               <listitem>
                  <para>
                     
(*) function removeNamedItem(const Name: WideString): TdomNode; virtual;
                     <literallayout>
      Removes a node specified by name.
      Parameters:
      - name
         The nodeName of the node to remove. [* not yet implemented: When this
         TdomNamedNodeMap contains the attribute attached to an element, as
         returned by the attributes property of the TdomNode interface, if the
         removed attribute is known to have a default value, an attribute
         immediately appears containing the default value as well as the
         corresponding namespace URI, local name, and prefix when applicable]
      Return Values:
         The node removed from the map if such a name exists. 
      Exceptions:
      - ENot_Found_Err
         Raised if there is no node named name in the map.
      - ENamespace_Err (+)
	      Raised if namespaceAware is true.</literallayout>
                  </para>
               </listitem>
               <listitem>
                  <para>
                     
    function item(const index: integer): TdomNode; virtual;
                     <literallayout>
      Returns the indexth item in the map. If index is greater than or equal to
      the number of nodes in the map, nil is returned.
      Parameters:
      - index
         Index into the map.
      Return Values:
         The node at the indexth position in the TdomNamedNodemmap, or nil if
         that is not a valid index.</literallayout>
                  </para>
               </listitem>
               <listitem>
                  <para>
                     
(#) function getNamedItemNS(const namespaceURI,
                                  localName: WideString): TdomNode;
                     <literallayout>
      Retrieves a node specified by local name and namespace URI.
      Parameters:
      - namespaceURI
          The namespace URI of a node to retrieve.
      - localName
          The local name of a node to retrieve.
      - ENamespace_Err (+)
	      Raised if namespaceAware is false.
      Return Values:
          A TdomNode (of any type) with the specified local name and namespace
          URI, or nil if it does not identify any node in the
          map.</literallayout>
                  </para>
               </listitem>
               <listitem>
                  <para>
                     
(#*)function setNamedItemNS(const arg: TdomNode): TdomNode; virtual;
                     <literallayout>
      Adds a node using its namespaceURI and localName property.  If a node with
      that namespace URI and that local name is already present in this map, it
      is replaced by the new one.
      Parameters:
      - arg
         A node to store in a named node map. The node will later be accessible
         using the value of the namespaceUri and localName property of the node.
         If a node with those namespace URI and local name is already present in
         the map, it is replaced by the new one.
      Return Values:
         If the new tdomNode replaces an existing node the replaced tdomNode is
         returned, otherwise nil is returned. 
      Exceptions:
      - EWrong_Document_Err 
         Raised if arg was created from a different TdomDocument than the one
         that created the TdomNamedNodeMap.
      - ENo_Modification_Allowed_Err
	      Raised if this TdomNamedNodeMap is readonly.
      - EInuse_Attribute_Err (*)
          Raised if arg is a TdomAttr that is already an attribute of another
          Element object [*that means: if the ownerElement of the TdomAttr is
          neither nil nor identical with the ownerNode of the map]. The DOM user
          must explicitly clone Attr nodes to re-use them in other elements.
      - EInuse_Node_Err (+)
          Raised if arg is a TdomNode that is already a child of a node (if its
          parentNode property is not nil).
      - ENamespace_Err (+)
	      Raised if namespaceAware is false.</literallayout>
                  </para>
               </listitem>
               <listitem>
                  <para>
                     
(#*)function removeNamedItemNS(const namespaceURI,
                                     localName: WideString): TdomNode; virtual;
                     <literallayout>
      Removes a node specified by local name and namespace URI.
      Parameters:
      - namespaceURI
          The namespace URI of a node to remove.
      - localName
          The local name of a node to remove. [* Not yet implemented: When this
          TdomNamedNodeMap contains the attribute attached to an element, as
          returned by the attributes property of the TdomNode interface, if the
          removed attribute is known to have a default value, an attribute
          immediately appears containing the default value as well as the
          corresponding namespace URI, local name, and prefix.]
      Return Values:
         The node removed from the map if such a local name and namespaceURI
         exists. 
      Exceptions:
      - ENot_Found_Err
         Raised if there is no node named name in the map.
      - ENamespace_Err (+)
	      Raised if namespaceAware is false.</literallayout>
                  </para>
               </listitem>
            </itemizedlist>
         </para>
      </sect1>
      <sect1>
         <title>TdomNode = class</title>
         <para>
The TdomNode object is the primary datatype for the entire Document Object
Model. It represents a single node in the document tree. While all objects
descending from TdomNode expose methods for dealing with children, not all
objects descending from TdomNode may have children. For example, TdomText nodes
may not have children, and adding children to such nodes results in a
EdomException being raised.</para>
         <para>
The attributes nodeName, nodeValue and attributes are included as a mechanism to
get at node information without casting down to the specific derived interface.
In cases where there is no obvious mapping of these attributes for a specific
nodeType (e.g., nodeValue for an TdomElement or attributes for a TdomComment),
this returns '' or nil respectivly.</para>
         <para>
The values of nodeName, nodeValue, and attributes vary according to the node
type as follows:*</para>
         <para>
            <literallayout>

                            nodeName             nodeValue         attributes
===============================================================================					   
Attribute                   name of attribute    value of              nil    
                                                 attribute
-------------------------------------------------------------------------------
AttributeDefinition         name of attribute    value of              nil    
                                                 attribute
-------------------------------------------------------------------------------
AttributeList               name of element      ''                    nil    
                            type                 
-------------------------------------------------------------------------------
CDATASection                #cdata-section       content of the        nil
                                                 CDATA Section
-------------------------------------------------------------------------------
ChoiceParticle              #choice-particle     ''                    nil
-------------------------------------------------------------------------------
Comment                     #comment             content of the        nil
                                                 comment
-------------------------------------------------------------------------------
ConditionalSection          #conditional-section ''                    nil
-------------------------------------------------------------------------------
Document                    #document            ''                    nil
-------------------------------------------------------------------------------
DocumentFragment            #document-fragment   ''                    nil
-------------------------------------------------------------------------------
DocumentType                document type name   entire content        nil
                                                 excluding name and
                                                 externalId*
-------------------------------------------------------------------------------
Element                     tagName              ''                NamedNodeMap
-------------------------------------------------------------------------------
ElementParticle             name of single       ''                    nil
                            particle
-------------------------------------------------------------------------------
ElementTypeDeclaration      element type name    value of decl.        nil
-------------------------------------------------------------------------------
Entity                      entity name          value of entity*      nil
-------------------------------------------------------------------------------
EntityDeclaration           entity name          value of entity       nil
-------------------------------------------------------------------------------
EntityReference             name of entity       ''                    nil
                            referenced
-------------------------------------------------------------------------------
ExternalParameterEntity     #external-parameter-entity   ''            nil
-------------------------------------------------------------------------------
ExternalParsedEntity        #external-parsed-entity      ''            nil
-------------------------------------------------------------------------------
ExternalSubset              #external-subset     ''                    nil
-------------------------------------------------------------------------------
InternalSubset              #internal-subset     ''                    nil
-------------------------------------------------------------------------------
Nametoken                   name of name token   ''                    nil
-------------------------------------------------------------------------------
Notation                    notation name        ''                    nil
-------------------------------------------------------------------------------
NotationDeclaration         notation declaration name    ''            nil
-------------------------------------------------------------------------------
ParameterEntity             parameter entity     value of              nil
                            name                 parameter entity 
-------------------------------------------------------------------------------
ParameterEntityDeclaration  parameter entity     parameter entity      nil
                            name                 value 
-------------------------------------------------------------------------------
ParameterEntityReference    name of parameter    ''                    nil
                            entity referenced
-------------------------------------------------------------------------------
ChoiceParticle              #pcdata-choice-particle      ''            nil
-------------------------------------------------------------------------------
ProcessingInstruction       target               entire content        nil
                                                 excluding the
                                                 target
-------------------------------------------------------------------------------
SequenceParticle            #sequence-particle   ''                    nil
-------------------------------------------------------------------------------
Text                        #text                content of the        nil
                                                 text node
-------------------------------------------------------------------------------
TextDeclaration             #text-declaration    ''                    nil
-------------------------------------------------------------------------------
XmlDeclaration              #xml-declaration     ''                    nil
</literallayout>
         </para>
         <para>
            <emphasis>Properties</emphasis>
         </para>
         <para>
            <itemizedlist>
               <listitem>
                  <para>
                     
    property Attributes: TdomNamedNodeMap (readonly)
                     <literallayout>
      Provides access to a NamedNodeMap containing the node's attributes (if it
      is an TdomElement) or nil otherwise.</literallayout>
                  </para>
               </listitem>
               <listitem>
                  <para>
                      
    property ChildNodes: TdomNodeList (readonly)
                     <literallayout>
      A NodeList object that contains all children of this node. If there are no
      children, this is a NodeList containing no nodes.</literallayout>
                  </para>
               </listitem>
               <listitem>
                  <para>
                     
(+) property Code: WideString (readonly)
                     <literallayout>
      Returns the cooresponding XML-code of the node and all its
      children.</literallayout>
                  </para>
               </listitem>
               <listitem>
                  <para>
                     
    property FirstChild: TdomNode (readonly)
                     <literallayout>
      The first child of a node. If there is no such node, this returns
      nil.</literallayout>
                  </para>
               </listitem>
               <listitem>
                  <para>
                      
    property LastChild: TdomNode (readonly)
                     <literallayout>
      The last child of a node. If there is no such node, this returns
      nil.</literallayout>
                  </para>
               </listitem>
               <listitem>
                  <para>
                     
(*) property LocalName: TdomNode (readonly)
                     <literallayout>
      Returns the local part of the qualified name of this node.</literallayout>
                  </para>
               </listitem>
               <listitem>
                  <para>
                     
    property NamespaceURI: WideString (readonly)
                     <literallayout>
      The namespace URI given at creation time of this node, or '' if it is
      unspecified.</literallayout>
                  </para>
               </listitem>
               <listitem>
                  <para>
                     
    property NextSibling: TdomNode (readonly)
                     <literallayout>
      The node immediately following the current node. If there is no such node,
      this returns nil.</literallayout>
                  </para>
               </listitem>
               <listitem>
                  <para>
                      
    property NodeName: WideString (readonly)
                     <literallayout>
      The name of the node depends on its type; see the table
      above.</literallayout>
                  </para>
               </listitem>
               <listitem>
                  <para>
                      
    property NodeType: TdomNodeType (readonly)
                     <literallayout>
      A code representing the type of the underlying object's type, as defined
      above.</literallayout>
                  </para>
               </listitem>
               <listitem>
                  <para>
                      
    property NodeValue: WideString (readonly)
                     <literallayout>
      The value of a node depends on its type; see the table above. On setting a
      ENo_Modification_Allowed_Err Exception is raised when the node is
      readonly.</literallayout>
                  </para>
               </listitem>
               <listitem>
                  <para>
                      
    property OwnerDocument: TdomDocument (readonly)
                     <literallayout>
      Provides access to the Document object associated with this Node. This is
      also the Document object used to create new Nodes. When the Node is a
      Document this is nil. When this node is a TdomDocument or a
      TdomDocumentType which is not used with any TdomDocument yet, this is
      nil.</literallayout>
                  </para>
               </listitem>
               <listitem>
                  <para>
                     
    property ParentNode: TdomNode (readonly)
                     <literallayout>
      The parent of the given Node instance. All nodes, except TdomDocument,
      TdomDocumentFragment, TdomAttr, TdomAttrDefinition, TdomEntity , and
      TdomNotation may have a parent. However, if a node has just been created
      and not yet added to the tree, or if it has been removed from the tree,
      this is nil.</literallayout>
                  </para>
               </listitem>
               <listitem>
                  <para>
                      
    property PreviousSibling: TdomNode (readonly)
                     <literallayout>        
      The node immediately preceding the current node. If there is no such node,
      nil is returned.</literallayout>
                  </para>
               </listitem>
               <listitem>
                  <para>
                      
(*) property Prefix: WideString
                     <literallayout>
      The namespace prefix of this node or '' if it is unspecified. Note that
      setting this attribute, when permitted, changes the nodeName attribute,
      which holds the qualified name, as well as the tagName and name attributes
      of the TdomElement and TdomAttr objects, when applicable. [*Not yet
      implemented: Note also that changing the prefix of an attribute that is
      known to have a default value, does not make a new attribute with the
      default value and the original prefix appear, since the namespaceURI and
      localName do not change.]
      Exceptions:
      - EInvalid_Character_Err
         Raised if the specified prefix contains an illegal character.
      - ENamespace_Err (*)
         Raised if the specified prefix is malformed, if the namespaceURI of
         this node is an empty string, if the specified prefix is 'xml' and the
         namespaceURI is different from 'http://wwww.w3.org/XML/1998/namespace',
         if the specified prefix is 'xmlns' and the namespaceURI is different
         from 'http://www.w3.org/2000/xmlns/', or if this node is an TdomAttr
         and the qualifiedName of this node is 'xmlns' [*, or if nodename of
         this node is not a qualified name].</literallayout>
                  </para>
               </listitem>
            </itemizedlist>
         </para>
         <para>
            <emphasis>Public methods</emphasis>
         </para>
         <para>
            <itemizedlist>
               <listitem>
                  <para>
                     
    constructor Create(const AOwner: TdomDocument);
                     <literallayout>
      Developers should not call 'create' directly.  Instead they should use the
      appropriate methode of a TdomDocument object.
      Parameters:
      - AOwner
	     The TdomDocument that creates the Node.  
    destructor Destroy; override; 
      Developers should not call 'destroy' directly.  Instead they should use
      the FreeAllNodes methode of the TdomDocument object that created the
      node.</literallayout>
                  </para>
               </listitem>
               <listitem>
                  <para>
                     
(+) procedure Clear; virtual;
                     <literallayout>
      Frees all child nodes of this node which are not readonly.
      Exceptions:
      - ENo_Modification_Allowed_Err
	      Raised if this node is readonly.</literallayout>
                  </para>
               </listitem>
               <listitem>
                  <para>
                     
    function InsertBefore(const newChild, refChild: TdomNode): TdomNode;
    virtual;
                     <literallayout>
	  Inserts a child node newChild before the existing child node refChild. If
	  refChild is nil, insert newChild at the end of the list of children. If
	  newChild is a DocumentFragment object, all of its children are inserted,
	  in the same order, before refChild. If the newChild is already in the
	  tree, it is first removed. 
	  Parameters:
      - newChild
		 The node to insert.
      - refChild
		 The reference node, i.e., the node before which the new node must be
		 inserted.
      Return Values:
         The node being inserted. 
      Exceptions:
      - EHierarchy_Request_Err
	      Raised if this node is of a type that does not allow children of the
	      type of the newChild node, or if the node to insert is one of this
	      node's ancestors.
      - EWrong_Document_Err 
	      Raised if newChild was created from a different document than the one
	      that created this node.
      - ENo_Modification_Allowed_Err
	      Raised if this node, or the previous parent of the newChild node being
	      inserted, is readonly.
      - ENot_Found_Err
	      Raised if refChild is not a child of this node.</literallayout>
                  </para>
               </listitem>
               <listitem>
                  <para>
                     
(*) function ReplaceChild(const newChild,oldChild: TdomNode): TdomNode; virtual;
                     <literallayout>
      Replaces the child node oldChild with newChild in the set of children of
      the given node, and returns the oldChild node. If the newChild is already
      in the tree, it is first removed. 
      Parameters: 
	  - newChild
         The new node to put in the child list.
      - oldChild
         The node being replaced in the list.
      Return Values:
         The node replaced. 
      Exceptions:
      - EHierarchy_Request_Err
	      Raised if this node is of a type that does not allow children of the
	      type of the newChild node, or if the node to insert is one of this
	      node's ancestors, or if the newChild node is a
	      TdomDocumentFragment(*).
      - EWrong_Document_Err 
	      Raised if newChild was created from a different document than the one
	      that created this node.
      - ENo_Modification_Allowed_Err
	      Raised if this node, or the previous parent of the newChild node, is
	      readonly.
      - ENot_Found_Err
	      Raised if refChild is not a child of this node.</literallayout>
                  </para>
               </listitem>
               <listitem>
                  <para>
                     
    function RemoveChild(const oldChild: TdomNode): TdomNode; virtual;
                     <literallayout>
      Removes the child node indicated by oldChild from the list of children and
      returns it. 
      Parameters:
      - oldChild
         The node being removed
      Return Values:
         The node removed. 
      Exceptions:
      - ENo_Modification_Allowed_Err
	     Raised if this node is readonly.
      - ENot_Found_Err
	     Raised if refChild is not a child of this node.</literallayout>
                  </para>
               </listitem>
               <listitem>
                  <para>
                     
(*) function AppendChild(const newChild: TdomNode): TdomNode; virtual;
                     <literallayout>
      Adds a child node to the end of the list of children for this node. If the
      newChild is already in the tree, it is first removed.
      Parameters:
      - newChild
         The node to add. If this is a TdomDocumentFragment object, the entire
         contents of the document fragment are moved into the child list of this
         node.
      Return Values:
         The node added. 
      Exceptions:
      - EHierarchy_Request_Err
	      Raised if this node is of a type that does not allow children of the
	      type of the newChild node, or if the node to append is one of this
	      node's ancestors.
      - EWrong_Document_Err 
	      Raised if newChild was created from a different document than the one
	      that created this node.
      - ENo_Modification_Allowed_Err
	      Raised if this node, or the previous parent of the node being
	      appended, is readonly.
      - ENot_Found_Err
	      Raised if refChild is not a child of this node.</literallayout>
                  </para>
               </listitem>
               <listitem>
                  <para>
                     
    function HasChildNodes: boolean; virtual;
                     <literallayout>
      This is a convenience method to allow easy determination of whether a node
      has children or not. 
      Return Values:
          true if the node has any children, false if the node has no
          children.</literallayout>
                  </para>
               </listitem>
               <listitem>
                  <para>
                      
(*) function CloneNode(const deep: boolean): TdomNode; virtual;
                     <literallayout>
      Returns a duplicate of the node, i.e., serves as a generic copy
      constructor for Nodes. The duplicate node has no parent (parentNode
      returns nil.). Cloning a TdomElement node copies all TdomAttr nodes and
      their values[, including those generated by the XML processor to represent
      defaulted attributes -- not yet implemeted*], but this method does not
      copy any text it contains unless it is a deep clone, since the text is
      contained in a child Text node. Cloning an TdomDocumentType node copies
      all TdomEntity nodes and TdomNotation nodes and their publicId, systemId
      and NotationNames. Cloning any other type of node simply returns a copy of
      this node. Note that cloning an immutable subtree results in a mutable
      copy, but the children of a TdomEntityReference, TdomEntity, [and
      TdomExternalSubset*] clone are readonly. In addition, clones of
      unspecified TdomAttr nodes are specified.
      Parameters:
      - deep
          If true, recursively clone the subtree under the specified node; if
          false, clone only the node itself (and its TdomAttr nodes, if it is a
          TdomElement node; and its TdomEntity nodes and TdomNotation nodes, if
          it is a TdomDocumentType). 
      - Return Values:
          The duplicate node.</literallayout>
                  </para>
               </listitem>
               <listitem>
                  <para>
                      
(#) procedure normalize; virtual;
                     <literallayout>
      Puts all Text nodes in the full depth of the sub-tree underneath this
      TdomElement, including attribute nodes, into a "normal" form where only
      markup (e.g., tags, comments, processing instructions, CDATA sections, and
      entity references) separates TdomText nodes, i.e., there are no adjacent
      TdomText nodes. This can be used to ensure that the DOM view of a document
      is the same as if it were saved and re-loaded, and is useful when
      operations (such as XPointer lookups) that depend on a particular document
      tree structure are to be used. Note: In cases where the document contains
      TdomCDATASection nodes, the normalize operation alone may not be
      sufficient, since XPointers do not differentiate between TdomText nodes
      and TdomCDATASection nodes.</literallayout>
                  </para>
               </listitem>
               <listitem>
                  <para>
                     
(#) function supports(const feature, version: WideString): boolean; virtual;
                     <literallayout>
      Test whether the DOM implementation implements a specific feature and that
      feature is supported by this node. 
      Parameters:
      - feature
		 The string of the feature to test. This is the same name which can be
		 passed to the method hasFeature on TDOMImplementation.
      - version
		 This is the version number of the feature to test. In Level 2, version
		 1, this is the string "2.0" If the version is not specified, supporting
		 any version of the feature will cause the method to return true. 
      Return Value:
         Returns true if the specified feature is supported on this node, false
         otherwise.</literallayout>
                  </para>
               </listitem>
               <listitem>
                  <para>
                      
(+) function IsAncestor(const AncestorNode: TdomNode): boolean; virtual;
                     <literallayout>
      This is a convenience method to allow easy determination of whether a node
      is an ancestor of this node.
      Paramters:
      - AncestorNode
	      The node which is being tested whether it is an ancestor of this node.
      Return Values:
          true if the AncestorNode is an ancestor of this node.</literallayout>
                  </para>
               </listitem>
               <listitem>
                  <para>
                     
(+)  procedure GetLiteralAsNodes(const RefNode: TdomNode); virtual;
                     <literallayout>
      [not yet fully implemented]</literallayout>
                  </para>
               </listitem>
            </itemizedlist>
         </para>
      </sect1>
      <sect1>
         <title>TdomDocument = class (TdomNode)</title>
         <para>
The Document interface represents the entire HTML or XML document. Conceptually,
it is the root of the document tree, and provides the primary access to the
document's data.</para>
         <para>
Since elements, text nodes, comments, processing instructions, etc. cannot exist
outside the context of a Document, the Document interface also contains the
factory methods needed to create these objects. The Node objects created have a
ownerDocument attribute which associates them with the Document within whose
context they were created.
</para>
         <para>
            <emphasis>Properties</emphasis>
         </para>
         <para>
            <itemizedlist>
               <listitem>
                  <para>
                     
    property Doctype: TdomDocumentType (readonly)
                     <literallayout>
      The document type declaration (TdomDocumentType) associated with this
      document. For XML documents without a document type definition this
      returns nil.</literallayout>
                  </para>
               </listitem>
               <listitem>
                  <para>
                      
(*) property DomImplementation: TdomImplementation (readonly)
                     <literallayout>
      The TdomImplementation object that handles this document. A DOM
      application may use objects from multiple implementations. (* In the DOM
      guidelines this property is called "Implementation". Since this is a
      reserved Delphi expression the property had to been
      renamed.)</literallayout>
                  </para>
               </listitem>
               <listitem>
                  <para>
                      
    property DocumentElement: TdomElement (readonly)
                     <literallayout>
      This is a convenience attribute that allows direct access to the child
      node that is the root element of the document.</literallayout>
                  </para>
               </listitem>
               <listitem>
                  <para>
                      
(+) property XMLDeclaration: TdomXmlDeclaration (readonly)
                     <literallayout>
      This is a convenience attribute that allows direct access to the
      XMLDeclaration of the document.</literallayout>
                  </para>
               </listitem>
               <listitem>
                  <para>
                      
(+) property CodeAsWideString: WideString (readonly)
                     <literallayout> 
      Returns the DOM as a valid well-formed XML document in a single UTF-16BE
      wideString, starting with '$feff'. If the DOM starts with an XML
      declaration its encoding declaration is set to 'UTF-16'.</literallayout>
                  </para>
               </listitem>
               <listitem>
                  <para>
                      
(+) property CodeAsString: String (readonly)
                     <literallayout> 
      Returns the DOM as a valid well-formed XML document in a single UTF-8
      string. If the DOM starts with an XML declaration its encoding declaration
      is set to 'UTF-8'. Every single line feed is replaced by carriage return +
      line feed.</literallayout>
                  </para>
               </listitem>
               <listitem>
                  <para>
                      
(+) property Filename: TFilename
                     <literallayout> 
      If a document is associated with a file on the local system, this property
      contains the full path to this file.</literallayout>
                  </para>
               </listitem>
            </itemizedlist>
         </para>
         <para>
            <emphasis>Protected methods</emphasis>
         </para>
         <para>
            <itemizedlist>
               <listitem>
                  <para>
                      	  
(+) function IsHTML: boolean; virtual;
                     <literallayout>
      This is a convenience method to allow easy determination of whether a
      document tree is HTML or not. 
      Return Values:
          true if the document tree is HTML, false if not.</literallayout>
                  </para>
               </listitem>
               <listitem>
                  <para>
                      
(+) function DuplicateNode(Node: TdomNode): TdomNode; virtual;
                     <literallayout>
      Duplicates a node. The duplicate node has no parent (parentNode returns
      nil.). Duplicating a TdomElement node copies all TdomAttr nodes and their
      values[, including those generated by the XML processor to represent
      defaulted attributes -- not yet implemeted *]. Cloning an TdomDocumentType
      node copies all TdomEntity nodes and TdomNotation nodes and their
      publicId, systemId and NotationNames. Duplicating any other type of node
      simply returns a copy of this node. 
      Parameters:
      - Node
         The node to be duplicated.
      Return Values:
         The new node. 
      Exceptions: 
      - ENot_Supported_Err
	     Raised if the NodeType of the node to be duplicated is not
	     specified.</literallayout>
                  </para>
               </listitem>
               <listitem>
                  <para>
                      
(+) procedure InitDoc(const TagName: wideString); virtual;
                     <literallayout>
      Appends a document element of the type specified to the document. Using
      this method on a document that already has a document element will raise
      an exception. This method is automatically called by the createDocument
      function of a TDomImplementation object. In derived classes of
      TdomDocument you can override this method to implement a default object
      tree.
      Parameters:
      - TagName
         The name of the document element type to instantiate. This is
         case-sensitive.
      Exceptions:
      - EInvalid_Character_Err
         Raised if an invalid name is specified.
      - EHierarchy_Request_Err
         Raised if the document already has a document element.</literallayout>
                  </para>
               </listitem>
               <listitem>
                  <para>
                      
(+) procedure InitDocNS(const namespaceURI,
                              qualifiedName: WideString); virtual;
                     <literallayout>
      Appends a document element of the given qualified name and namespace URI
      to the document. Using this method on a document that already has a
      document element will raise an exception. This method is automatically
      called by the createDocumentNS function of a TDomImplementation object. In
      derived classes of TdomDocument you can override this method to implement
      a default object tree.
      Parameters:
      - TagName
         The name of the root element type to instantiate. This is
         case-sensitive.
      - NamespaceURI
         The namespace URI of the document element type to instantiate.
      - QualifiedName
         The qualified name of the document element type to instantiate.
      Exceptions:
      - EInvalid_Character_Err
         Raised if the specified qualified name contains an illegal character.
      - ENamespace_Err (*)
         Raised if the qualifiedName is malformed, if the qualifiedName has a
         prefix and the namespaceURI is an empty string, if the qualifiedName
         has a prefix that is 'xml' and the namespaceURI is different from
         'http://wwww.w3.org/XML/1998/namespace'[*, if the qualifiedName has a
         prefix that is 'xmlns' and the namespaceURI is different from
         'http://www.w3.org/2000/xmlns/', or if the qualifiedName is 'xmlns',
         and the namespaceURI is different from
         'http://www.w3.org/2000/xmlns/'].
      - EHierarchy_Request_Err
         Raised if the document already has a document element.</literallayout>
                  </para>
               </listitem>
            </itemizedlist>
         </para>
         <para>
            <emphasis>Public methods</emphasis>
         </para>
         <para>
            <itemizedlist>
               <listitem>
                  <para>
                      
    constructor Create; virtual;
                     <literallayout>
	  Creates a new TdomDocument object. Developers should not call 'create'
	  directly.  Instead they should use the appropriate methode of a
	  TdomImpelementation object.</literallayout>
                  </para>
               </listitem>
               <listitem>
                  <para>
                      
(+) procedure Clear; virtual;
                     <literallayout>
      Frees all TdomNodes, TdomNodeLists, TdomNodeListNSs, TdomNodeIterators and
      TdomTreeWalkers that belong to the TdomDocument object, whether readonly
      or not.</literallayout>
                  </para>
               </listitem>
               <listitem>
                  <para>
                      
(+) procedure ClearInvalidNodeIterators; virtual;
                     <literallayout>
      Frees all TdomNodeIterators whoes state is 'invalid' which means that
      their detache method had been used.</literallayout>
                  </para>
               </listitem>
               <listitem>
                  <para>
                      
    function CreateElement(const TagName: WideString): TdomElement; virtual;
                     <literallayout>
      Create a TdomElement of the type specified. Note that the TdomElement
      returned implements the setAttribute method, so attributes can be
      specified directly on the returned object. 
      Parameters:
      - tagName
         The name of the element type to instantiate. This is case-sensitive.
      Return Values:
         A new TdomElement object. 
      Exceptions:
      - EInvalid_Character_Err
         Raised if an invalid name is specified.</literallayout>
                  </para>
               </listitem>
               <listitem>
                  <para>
                      
(#*)function CreateElementNS(const NamespaceURI,
                                   QualifiedName: WideString): TdomElement;
                                   virtual;
                     <literallayout>
      Creates a TdomElement of the given qualified name and namespace URI.
      Parameters:
      - NamespaceURI
         The namespace URI of the TdomElement to create.
      - QualifiedName
         The qualified name of the TdomElement to create.
      Return Values:
         A new TdomElement object. 
      Exceptions:
      - EInvalid_Character_Err
         Raised if the specified qualified name contains an illegal character.
      - ENamespace_Err (*)
         Raised if the qualifiedName is malformed, if the qualifiedName has a
         prefix and the namespaceURI is an empty string, if the qualifiedName
         has a prefix that is 'xml' and the namespaceURI is different from
         'http://wwww.w3.org/XML/1998/namespace'[*, if the qualifiedName has a
         prefix that is 'xmlns' and the namespaceURI is different from
         'http://www.w3.org/2000/xmlns/', or if the qualifiedName is 'xmlns',
         and the namespaceURI is different from
         'http://www.w3.org/2000/xmlns/'].</literallayout>
                  </para>
               </listitem>
               <listitem>
                  <para>
                      
    function CreateDocumentFragment: TdomDocumentFragment; virtual;
                     <literallayout>
      Create an empty TdomDocumentFragment object. 
      Return Values:
         A new TdomDocumentFragment object.</literallayout>
                  </para>
               </listitem>
               <listitem>
                  <para>
                       
    function CreateText(const Data: WideString): TdomText; virtual;
                     <literallayout>
      Create a TdomText node given the specified string. 
      Parameters:
      - data
         The data for the node.
      Return Values:
         The new TdomText object.</literallayout>
                  </para>
               </listitem>
               <listitem>
                  <para>
                       
    function CreateComment(const Data: WideString): TdomComment; virtual;
                     <literallayout>
      Create a TdomComment node given the specified string. 
      Parameters:
      - data
         The data for the node.
      Return Values:
         The new TdomComment object.</literallayout>
                  </para>
               </listitem>
               <listitem>
                  <para>
                      
(+) function CreateConditionalSection(const IncludeStmt: WideString):
TdomConditionalSection; virtual;
                     <literallayout>
      Create a TdomConditionalSection node. 
      Parameters:
      - IncludeStmt
         Either the WideString 'INCLUDE' or 'IGNORE' or a paramter entity
         reference that refers to a parameter entity containing such a
         WideString.
      Return Values:
         The new TdomConditionalSection object.</literallayout>
                  </para>
               </listitem>
               <listitem>
                  <para>
                       
(*) function CreateCDATASection(const Data: WideString): TdomCDATASection;
virtual;
                     <literallayout>
      Create a TdomCDATASection node whose value is the specified string. 
      Parameters:
      - data
         The data for the CDATASection contents.
      Return Values:
         The new TdomCDATASection object. 
      Exceptions: 
      [* not implemented (see function CreateElement): - ENot_Supported_Err
	     Raised if this document is an HTML document.]</literallayout>
                  </para>
               </listitem>
               <listitem>
                  <para>
                      
    function CreateProcessingInstruction(const Targ, Data : WideString):
    TdomProcessingInstruction; virtual;
                     <literallayout>
      Create a TdomProcessingInstruction node given the specified name and data
      strings. 
      Parameters:
      - target
         The target part of the processing instruction.
      - data
         The data for the node.
      Return Values:
         The new TdomProcessingInstruction object. 
      Exceptions:
      - EInvalid_Character_Err
         Raised if an invalid name is specified.
      [* not implemented (see function CreateElement): - ENot_Supported_Err
	     Raised if this document is an HTML document.]</literallayout>
                  </para>
               </listitem>
               <listitem>
                  <para>
                      
(+) function CreateXmlDeclaration(const Version,
                                        EncDl,
                                        SdDl: WideString): TdomXmlDeclaration;
                                        virtual;
                     <literallayout>
      Create a TdomXmlDeclaration given the specified version number, encoding
      declaration, and standalone declaration.
      Parameters:
      - Version
         The version number of the XML declaration.
      - EncDl
         The encoding declaration of the XML declaration.
      - SdDl
         The standalone declaration of the XML declaration. Valid values are
         'yes', 'no' or ''.
      Return Values:
         A new TdomXmlDeclaration object. 
      Exceptions:
      - EInvalid_Character_Err
         Raised if an invalid version number, encoding declaration or standalone
         declaration is specified.</literallayout>
                  </para>
               </listitem>
               <listitem>
                  <para>
                      
    function CreateAttribute(const Name: WideString): TdomAttr; virtual;
                     <literallayout>
      Creates a TdomAttr of the given name. Note that the TdomAttr instance can
      then be set on an TdomElement using the setAttribute method. 
      Parameters:
      - name
         The name of the TdomAttr.
      Return Values:
         A new TdomAttr object. 
      Exceptions:
      - EInvalid_Character_Err
         Raised if an invalid name is specified.</literallayout>
                  </para>
               </listitem>
               <listitem>
                  <para>
                      
(#) function CreateAttributeNS(const NamespaceURI,
                                     QualifiedName: WideString): TdomAttr;
                                     virtual;
                     <literallayout>
      Creates a TdomAttr of the given qualified name and namespace URI.
      Parameters:
      - NamespaceURI
         The namespace URI of the TdomAttr to create.
      - QualifiedName
         The qualified name of the TdomAttr to create.
      Return Values:
         A new TdomAttr object. 
      Exceptions:
      - EInvalid_Character_Err
         Raised if the specified qualified name contains an illegal character.
      - ENamespace_Err
         Raised if the qualifiedName is malformed, if the qualifiedName has a
         prefix and the namespaceURI is an empty string, if the qualifiedName
         has a prefix that is 'xml' and the namespaceURI is different from
         'http://wwww.w3.org/XML/1998/namespace', if the qualifiedName has a
         prefix that is 'xmlns' and the namespaceURI is different from
         'http://www.w3.org/2000/xmlns/', or if the qualifiedName is 'xmlns',
         and the namespaceURI is different from
         'http://www.w3.org/2000/xmlns/'.</literallayout>
                  </para>
               </listitem>
               <listitem>
                  <para>
                      
    function CreateEntityReference(const Name: WideString): TdomEntityReference;
    virtual;
                     <literallayout>
      Create a TdomEntityReference object. 
      Parameters:
      - name
         The name of the TdomEntityReference.
      Return Values:
         A new TdomEntityReference object. 
      Exceptions:
      [* not implemented (see function CreateElement): - ENot_Supported_Err
	     Raised if this document is an HTML document.]</literallayout>
                  </para>
               </listitem>
               <listitem>
                  <para>
                      
(+) function CreateParameterEntityReference(const Name: WideString):
TdomParameterEntityReference; virtual;
                     <literallayout>
      Create a TdomParameterEntityReference.
      Parameters:
      - name
         The name of the TdomParameterEntityReference.
      Return Values:
         A new TdomParameterEntityReference object.</literallayout>
                  </para>
               </listitem>
               <listitem>
                  <para>
                      
(+) function CreateDocumentType(const qualifiedName, PubId, SysId: WideString):
TdomDocumentType; virtual;
                     <literallayout>
      Create a TdomDocumentType. Note, that the factory method for creating a
      TdomDocumentType node according to the DOM2 specification is located at
      the TDocumentObjectModel. The XDOM provides factory methods on both the
      TDocumentObjectModel and the TdomDocument interface.
      Parameters:
      - qualifiedName
         The qualified name of the document type to be created.
      - PubId 
         The public identifier of the document type.
      - SysId 
         The system identifier of the document type.
      Return Values:
         A new TdomDocumentType object.</literallayout>
                  </para>
               </listitem>
               <listitem>
                  <para>
                      
(+) function CreateNotation(const Name, 
                                  PubId,
                                  SysId: WideString): TdomNotation; virtual;
                     <literallayout>
      Create a TdomNotation.
      Parameters:
      - name
         The name of the TdomNotation.
      - PubId 
         The public identifier for the notation. If the public identifier was
         not specified, this is nil. 
      - SysId 
         The system identifier for the notation. If the system identifier was
         not specified, this is nil. 
      Return Values:
         A new TdomNotation object.</literallayout>
                  </para>
               </listitem>
               <listitem>
                  <para>
                      
(+) function CreateNotationDeclaration(const Name, 
                                             PubId, 
                                             SysId: WideString):
                                                TdomNotationDeclaration;
                                                virtual;
                     <literallayout>
      Create a TdomNotationDeclaration.
      Parameters:
      - name
         The name of the TdomNotationDeclaration.
      - PubId 
         The public identifier for the notation declaration. If the public
         identifier was not specified, this is nil. 
      - SysId 
         The system identifier for the notation declaration. If the system
         identifier was not specified, this is nil. 
      Return Values:
         A new TdomNotationDeclaration object.</literallayout>
                  </para>
               </listitem>
               <listitem>
                  <para>
                      
(+) function CreateEntity(const Name, PubId, SysId, NotaName: WideString):
TdomEntity; virtual;
                     <literallayout>
      Create a TdomEntity.
      Parameters:
      - name
         The name of the TdomEntity.
      - PubId 
         The public identifier for the entity. If the public identifier was not
         specified, this is nil. 
      - SysId 
         The system identifier for the entity. If the system identifier was not
         specified, this is nil.
      - NotaName 
         The name of the notation of the entity.
      Return Values:
         A new TdomEntity object.</literallayout>
                  </para>
               </listitem>
               <listitem>
                  <para>
                      
(+) function CreateParameterEntity(const Name, PubId, SysId: WideString):
TdomParameterEntity; virtual;
                     <literallayout>
      Create a TdomParameterEntity.
      Parameters:
      - name
         The name of the TdomParameterEntity.
      - EntityValue
         The content of a comment, i.e. all the characters between the starting
         '&lt;!--' and ending '--&gt;'.
      - PubId 
         The public identifier for the entity. If the public identifier was not
         specified, this is nil. 
      - SysId 
         The system identifier for the entity. If the system identifier was not
         specified, this is nil.
      Return Values:
         A new TdomParameterEntity object.</literallayout>
                  </para>
               </listitem>
               <listitem>
                  <para>
                      
(+) function CreateEntityDeclaration(const Name, EntityValue, PubId, SysId,
NotaName: WideString): TdomEntityDeclaration; virtual;
                     <literallayout>
      Create a TdomEntityDeclaration.
      Parameters:
      - name
         The name of the TdomEntityDeclaration.
      - EntityValue
         The content of the declaration, if it is an internal entity.
      - PubId 
         The public identifier for the entity. If the public identifier was not
         specified, this is nil. 
      - SysId 
         The system identifier for the entity. If the system identifier was not
         specified, this is nil.
      - NotaName 
         The name of the notation of the entity.
      Return Values:
         A new TdomEntityDeclaration object.</literallayout>
                  </para>
               </listitem>
               <listitem>
                  <para>
                      
(+) function CreateParameterEntityDeclaration(const Name, EntityValue, PubId,
SysId: WideString): TdomParameterEntityDeclaration; virtual;
                     <literallayout>
      Create a TdomParameterEntityDeclaration.
      Parameters:
      - name
         The name of the TdomParameterEntityDeclaration.
      - EntityValue
         The content of the declaration, if it is an internal parameter entity.
      - PubId 
         The public identifier for the entity. If the public identifier was not
         specified, this is nil. 
      - SysId 
         The system identifier for the entity. If the system identifier was not
         specified, this is nil.
      Return Values:
         A new TdomParameterEntityDeclaration object.</literallayout>
                  </para>
               </listitem>
               <listitem>
                  <para>
                      
(+) function CreateElementTypeDeclaration(const Name: WideString;
                                          const Contspec: TdomContentspecType):
                                          TdomElementTypeDeclaration; virtual;
                     <literallayout>
      Create a TdomElementTypeDeclaration.
      Parameters:
      - name
         The name of the TdomElementTypeDeclaration.
      - Contspec 
         The content specification type for the element type declaration. Valid
         values are 'ctEmpty', 'ctAny', 'ctMixed', and 'ctChildren'.
      Return Values:
         A new TdomElementTypeDeclaration object.</literallayout>
                  </para>
               </listitem>
               <listitem>
                  <para>
                      
(+) function CreateSequenceParticle(const Freq: WideString):
TdomSequenceParticle; virtual;
                     <literallayout>
      Create a TdomSequenceParticle. This object represents a sequence list of
      content particles which is part of an element type declaration in the DTD
      (see section 3.2.1 of the XML 1.0 specification).
      Parameters:
      - Freq 
         The optional character following a sequence list which governs whether
         the element or the content particles in the list may occur one or more
         (+), zero or more (*), or zero or one times (?). The absence of such an
         operator means that the element or content particle must appear exactly
         once.
      Return Values:
         A new TdomSequenceParticle object. 
      Exceptions:
      - EInvalid_Character_Err
         Raised if Freq is neither '?', nor '*', nor '+', nor an empty
         string.</literallayout>
                  </para>
               </listitem>
               <listitem>
                  <para>
                      
(+) function CreateChoiceParticle(const Freq: WideString): TdomChoiceParticle;
virtual;
                     <literallayout>
      Create a TdomChoiceParticle. This object represents a choice list of
      content particles which is part of an element type declaration in the DTD
      (see section 3.2.1 of the XML 1.0 specification).  
      Parameters:
      - Freq 
         The optional character following a choice list which governs whether
         the element or the content particles in the list may occur one or more
         (+), zero or more (*), or zero or one times (?). The absence of such an
         operator means that the element or content particle must appear exactly
         once.
      Return Values:
         A new TdomChoiceParticle object. 
      Exceptions:
      - EInvalid_Character_Err
         Raised if Freq is neither '?', nor '*', nor '+', nor an empty
         string.</literallayout>
                  </para>
               </listitem>
               <listitem>
                  <para>
                      
(+) function CreatePcdataChoiceParticle: TdomDataChoiceParticle; virtual;
                     <literallayout>
      Create a TdomDataChoiceParticle. This object represents a mixed content
      which is part of an element type declaration in the DTD (see section 3.2.2
      of the XML 1.0 specification). The Frequency of the new
      TdomDataChoiceParticle is set to '*', since mixed content always may
      appear zero or more times. In that case it does not matter that XML allows
      the notation (#PCDATA), because it is aequivalent to (#PCDATA)*.
      Return Values:
         A new TdomDataChoiceParticle object.</literallayout>
                  </para>
               </listitem>
               <listitem>
                  <para>
                      
(+) function CreateElementParticle(const Name,
                                         Freq: WideString): TdomElementParticle;
                                         virtual;
                     <literallayout>
      Create a TdomElementParticle. This object represents a single content
      particle which is part of an element type declaration in the DTD (see
      section 3.2.1 of the XML 1.0 specification).
      Parameters:
      - name
         The name of the single particle.
      - Freq 
         The optional character following a single particle which governs
         whether the element or the content particles in the list may occur one
         or more (+), zero or more (*), or zero or one times (?). The absence of
         such an operator means that the element or content particle must appear
         exactly once.
      Return Values:
         A new TdomElementParticle object. 
      Exceptions:
      - EInvalid_Character_Err
         Raised if Freq is neither '?', nor '*', nor '+', nor an empty
         string.</literallayout>
                  </para>
               </listitem>
               <listitem>
                  <para>
                      
(+) function CreateAttributeList(const Name: WideString): TdomAttrList; virtual;
                     <literallayout>
      Create a TdomAttrList.
      Parameters:
      - name
         The element type for which the attributes are declared.
      Return Values:
         A new TdomAttrList object.</literallayout>
                  </para>
               </listitem>
               <listitem>
                  <para>
                      
(+) function CreateAttributeDefinition(const Name,
                                             AttType,
                                             DefaultDecl,
                                             AttValue: WideString) :
                                             TdomAttrDefinition; virtual;
                     <literallayout>
      Create a TdomAttrDefinition.
      Parameters:
      - name
         The name of the attribute being defined.
      - AttType
         The type of the attribute being defined.
      - DefaultDecl
         The default declaration of the attribute being defined.
      - AttValue
         The value of the attribute being defined.
      Return Values:
         A new TdomAttrDefinition object.</literallayout>
                  </para>
               </listitem>
               <listitem>
                  <para>
                      
(+) function CreateNametoken(const Name: WideString): TdomNametoken; virtual;
                     <literallayout>
      Create a TdomNametoken.
      Parameters:
      - name
         The name of the name token.
      Return Values:
         A new TdomNametoken object.</literallayout>
                  </para>
               </listitem>
               <listitem>
                  <para>
                      
(+) function CreateTextDeclaration(const Version,
                                         EncDl: WideString): 
										 TdomTextDeclaration; virtual;
                     <literallayout>
      Create a TdomTextDeclaration given the specified version number and
      encoding declaration.
      Parameters:
      - Version
         The version number of the XML declaration.
      - EncDl
         The encoding declaration of the XML declaration.
      Return Values:
         A new TdomTextDeclaration object. 
      Exceptions:
      - EInvalid_Character_Err
         Raised if an invalid version number or encoding declaration is
         specified.</literallayout>
                  </para>
               </listitem>
               <listitem>
                  <para>
                      
(+) function CreateExternalParsedEntity: TdomExternalParsedEntity; virtual;
                     <literallayout>
      Create a TdomExternalParsedEntity.</literallayout>
                  </para>
               </listitem>
               <listitem>
                  <para>
                      
(+) function CreateExternalParameterEntity: TdomExternalParameterEntity;
virtual;
                     <literallayout>
      Create a TdomExternalParameterEntity.</literallayout>
                  </para>
               </listitem>
               <listitem>
                  <para>
                      
(+) procedure FreeAllNodes(const node: TdomNode); virtual;
                     <literallayout>
      Frees a node, that was created by this TdomDocument object, and all of its
      children. The node to free must not have a parent node assigned or being
      used by a TdomElement or TdomAttrList. To free such a node it has to be
      removed before freeing it. Note, that a readonly node can only be freed
      together with an ancestor node which is not readonly, since attempting to
      remove a readonly node would raise an exception. Freeing a TdomElement
      node frees also all TdomAttr nodes attached to the TdomElement. Freeing a
      TdomAttrList node frees also all TdomAttrDefinition nodes attached to the
      TdomAttrList.
      Parameters:
      - node
         The node to free.
      Exceptions:
      - EWrong_Document_Err
         Raised if the node to free was created from a different TdomDocument.
      - ENo_Modification_Allowed_Err
         Raised if the TdomDocument tries to free itself.
      - EInuse_Node_Err
         Raised if the node to free has a parent node.
      - EInuse_Attribute_Err
         Raised if the node is a TdomAttr node which is used in a TdomElement
         node.
      - EInuse_AttributeDefinition_Err
         Raised if the node is a TdomAttrDefinition node which is used in a
         TdomAttrList node.</literallayout>
                  </para>
               </listitem>
<listitem>
<para> 
(+) procedure FreeTreeWalker(const treeWalker: TdomTreeWalker);
virtual;<literallayout>
      Frees a TdomTreeWalker, that was created by this TdomDocument object.
      Parameters:
      - treeWalker
         The TreeWalker to free (or nil).
      Exceptions:
      - EWrong_Document_Err
         Raised if the TreeWalker to free was created from a different
         TdomDocument.
</literallayout>
</para>
</listitem>
               <listitem>
                  <para>
                      
(#*) function GetElementsById(const elementId: WideString): TdomElement;
virtual;
                     <literallayout>
      Returns the TdomElement whose ID is given by elementId. If no such element
      exists nil is returned. The behavior is not defined if more than one
      element has this ID. Note: The DOM implementation must have information
      that says which attributes are of type ID. Attributes with the name "ID"
      are not of type ID unless so defined. [* Since this implementations does
      not know whether attributes are of type ID or not this function returns
      always nil.]
      Parameters:
      - elementId
         The unique id value for an element.
      Return Values:
         The matching element.</literallayout>
                  </para>
               </listitem>
               <listitem>
                  <para>
                      
    function GetElementsByTagName(const tagName: WideString): TdomNodeList;
    virtual;
                     <literallayout>
      Returns a TdomNodeList of all the TdomElement nodes with a given tag name
      in the order in which they would be encountered in a preorder traversal of
      the document tree. Note, that calling this function will internally create
      a TdomNodeList for the specified tag name unless this had been done by a
      previouse call. This TdomNodeList will be freed either when the clear
      method of the document is called or when the document itself is freed.
      Since calling the GetElementsByTagName function very often with different
      tag names will result in high memory usage, it is recommended to use a
      node iterator or a tree walker with an appropriate filter instead.
      Parameters:
      - tagname
         The name of the tag to match on. If the string "*" is given, this
         method returns all elements in the document.
      Return Values:
         A new TdomNodeList object containing all the
         TdomElements.</literallayout>
                  </para>
               </listitem>
               <listitem>
                  <para>
                      
(#) function GetElementsByTagNameNS(const namespaceURI, 
                                          localName: WideString): TdomNodeList;
                                          virtual;
                     <literallayout>
      Returns a TdomNodeList of all the TdomElements with a given local name and
      namespace URI in the order in which they would be encountered in a
      preorder traversal of the Document tree. Note, that calling this function
      will internally create a TdomNodeList for the specified namespace URI and
      local name unless this had been done by a previouse call.  This
      TdomNodeList will be freed either when the clear method of the document is
      called or when the document itself is freed.  Since calling the
      GetElementsByTagNameNS function very often with different tag names will
      result in high memory usage, it is recommended to use a node iterator or a
      tree walker with an appropriate filter instead.
      Parameters:
      - namespaceURI
         The namespace URI of the elements to match on. The special value '*'
         matches all namespaces.
      - localName
         The local name of the elements to match on. The special value '*'
         matches all local names.
      Return Values:
         A new TdomNodelist object containing all the matched
         TdomElements.</literallayout>
                  </para>
               </listitem>
               <listitem>
                  <para>
                      
    function ImportNode(const importedNode;
                        const deep: boolean): TdomNode; virtual;
                     <literallayout>
      Imports a node from another document to this document. The returned node
      has no parent (parentNode returns nil.). The source node is not altered or
      removed from the original document; this method creates a new copy of the
      source node. For all nodes, importing a node creates a node object owned
      by the importing document, with attribute values identical to the source
      node's nodeName and nodeType, plus the attributes related to namespaces
      (prefix and namespaces URI). As in the cloneNode operation on a Node, the
      source node is not altered. Additional information is copied as
      appropriate to the nodeType, attempting to mirror the behavior expected if
      a fragment of XML source was copied from one document to another,
      recognizing that the two documents may have different DTDs. 
	  Importing a TdomElement node copies all TdomAttr nodes and their values,
	  but this method does not copy any text it contains unless it is a deep
	  clone, since the text is contained in a child Text node. TDomDocument or
	  TdomDocumentType nodes cannot be imported.
	  Parameters:
      - importedNode
         The node to import.
      - deep
         If true, recursively import the subtree under the specified node; if
         false, import only the node itself (and its TdomAttr nodes, if it is a
         TdomElement node). This does not apply to TdomAttr, TdomAttrDefinition,
         TdomEntityReference, and TdomNotation nodes.
      Return Values:
         The imported node that belongs to this Document. 
      Exceptions:
      - ENot_Supported_Err
         Raised if the type of node being imported is a TdomDocument or
         TdomDocumentType node.</literallayout>
                  </para>
               </listitem>
               <listitem>
                  <para>
                      
(#) function CreateNodeIterator(const root: TdomNode;
                                      whatToShow: TdomWhatToShow;
                                      nodeFilter: TdomNodeFilter;
                                      entityReferenceExpansion: boolean):
                                                            TdomNodeIterator;
                                                            virtual;
                     <literallayout>
      Create a new TdomNodeIterator over the subtree rooted at the specified
      node.
	  Parameters:
      - root
         The node which will be iterated together with its children. The
         iterator is initially positioned just before this node. The whatToShow
         flags and the filter, if any, are not considered when setting this
         position.
      - whatToShow
         This flag specifies which node types may appear in the logical view of
         the tree presented by the iterator.
      - nodeFilter
         The Filter to be used with this TdomNodeIterator, or nil to indicate no
         filter.
      - entityReferenceExpansion
         The value of this flag determines whether entity reference nodes are
         expanded.
      Return Values:
         The newly created TdomNodeIterator.
      Exceptions:
      - ENot_Supported_Err
         Raised if the specified root node is nil.</literallayout>
                  </para>
               </listitem>
               <listitem>
                  <para>
                      
(#) function CreateTreeWalker(const root: TdomNode;
                                      whatToShow: TdomWhatToShow;
                                      nodeFilter: TdomNodeFilter;
                                      entityReferenceExpansion: boolean):
                                                            TdomTreeWalker;
                                                            virtual;
                     <literallayout>
      Create a new TdomTreeWalker over the subtree rooted at the specified node.
	  Parameters:
      - root
         The node which will serve as the root for the TdomTreeWalker. The
         whatToShow flags and the TdomNodeFilter are not considered when setting
         this value; any node type will be accepted as the root. The currentNode
         of the TdomTreeWalker is initialized to this node, whether or not it is
         visible. The root functions as a stopping point for traversal methods
         that look upward in the document structure, such as parentNode and
         nextNode. The root must not be nil.
      - whatToShow
         This flag specifies which node types may appear in the logical view of
         the tree presented by the iterator.
      - nodeFilter
         The Filter to be used with this TdomTreeWalker, or nil to indicate no
         filter.
      - entityReferenceExpansion
         The value of this flag determines whether entity reference nodes are
         expanded.
      Return Values:
         The newly created TdomTreeWalker.
      Exceptions:
      - ENot_Supported_Err
         Raised if the specified root node is nil.</literallayout>
                  </para>
               </listitem>
            </itemizedlist>
         </para>
      </sect1>
      <sect1>
         <title>TdomDocumentFragment = class (TdomNode)</title>
         <para>
             TdomDocumentFragment is a 
            <quote>lightweight</quote>
             or 
            <quote>minimal</quote>
             Document object. It is very common to want to be able to extract a
             portion of a document's tree or to create a new fragment of a
             document. Imagine implementing a user command like cut or
             rearranging a document by moving fragments around. It is desirable
             to have an object which can hold such fragments and it is quite
             natural to use a Node for this purpose. While it is true that a
             Document object could fulfil this role, a Document object can
             potentially be a heavyweight object, depending on the underlying
             implementation. What is really needed for this is a very
             lightweight object. TdomDocumentFragment is such an object.

         </para>
         <para>
Furthermore, various operations -- such as inserting nodes as children of
another Node -- may take TdomDocumentFragment objects as arguments; this results
in all the child nodes of the TdomDocumentFragment being moved to the child list
of this node.
</para>
         <para>
The children of a TdomDocumentFragment node are zero or more nodes representing
the tops of any sub-trees defining the structure of the document.
TdomDocumentFragment do not need to be well-formed XML documents (although they
do need to follow the rules imposed upon well-formed XML parsed entities, which
can have multiple top nodes). For example, a TdomDocumentFragment might have
only one child and that child node could be a Text node. Such a structure model
represents neither an HTML document nor a well-formed XML document. 
</para>
         <para>
When a TdomDocumentFragment is inserted into a TdomDocument (or indeed any other
Node that may take children) the children of the TdomDocumentFragment and not
the TdomDocumentFragment itself are inserted into the Node. This makes the
TdomDocumentFragment very useful when the user wishes to create nodes that are
siblings; the TdomDocumentFragment acts as the parent of these nodes so that the
user can use the standard methods from the TdomNode interface, such as
insertBefore and appendChild. 
</para>
         <para>
            <emphasis>Public methods</emphasis>
         </para>
         <para>
            <itemizedlist>
               <listitem>
                  <para>
                     
(+) constructor Create(const AOwner: TdomDocument); virtual;
                     <literallayout>
      Developers should not call 'create' directly.  Instead they should use the
      appropriate methode of a TdomDocument object.
      Parameters:
      - AOwner
	     The TdomDocument that creates the Node.</literallayout>
                  </para>
               </listitem>
            </itemizedlist>
         </para>
      </sect1>
      <sect1>
         <title>TdomCharacterData = class (TdomNode)</title>
         <para>The TdomCharacterData object extends TdomNode with a set of
         attributes and methods for accessing character data in the DOM. This
         set is defined here rather than on each object that uses these
         attributes and methods for clarity. No DOM objects correspond directly
         to TdomCharacterData, though TdomText and others do inherit the
         interface from it. All offsets in this interface start from 0.
</para>
         <para>
            <emphasis>Properties</emphasis>
         </para>
         <para>
            <itemizedlist>
               <listitem>
                  <para>
                      
    property Data: WideString (readonly)
                     <literallayout>
      This provides access to the character data of a node that implements this
      interface.</literallayout>
                  </para>
               </listitem>
               <listitem>
                  <para>
                      
    property length: integer (readonly)
                     <literallayout>
      This provides access to the number of characters that are available
      through data and the substringData method below. This may have the value
      zero, i.e., CharacterData nodes may be empty.</literallayout>
                  </para>
               </listitem>
            </itemizedlist>
         </para>
         <para>
            <emphasis>Public methods</emphasis>
         </para>
         <para>
            <itemizedlist>
               <listitem>
                  <para>
                      
    function SubstringData(const offset, count: integer):WideString; virtual;
                     <literallayout>
      Extracts a range of data from an object implementing this interface. 
      Parameters:
      - offset
         Start offset of substring to extract
      - count
         The number of characters to extract.
      Return Values:
        This method returns the specified substring. If the sum of offset and
        count exceeds the length, then all characters to the end of the data are
        returned. 
      Exceptions:
      - EIndex_Size_Err
         Raised if the specified offset is negative or greater than the number
         of characters in data, and if the specified count is
         negative.</literallayout>
                  </para>
               </listitem>
               <listitem>
                  <para>
                      
    procedure AppendData(const arg: WideString); virtual;
                     <literallayout>
      Append the WideString to the end of the character data in the object
      implementing this interface. Upon success, data provides access to the
      concatenation of data and the WideString specified. 
      Parameters:
      - arg
         The WideString to append.</literallayout>
                  </para>
               </listitem>
               <listitem>
                  <para>
                      
    procedure InsertData(const offset: integer; const arg: WideString); virtual;
                     <literallayout>
      Insert a WideString at the specified character offset. 
      Parameters:
      - offset
         The character offset at which to insert
      - arg
         The WideString to insert.
      Exceptions:
      - EIndex_Size_Err
         Raised if the specified offset is negative or greater than the number
         of characters in data, and if the specified count is
         negative.</literallayout>
                  </para>
               </listitem>
               <listitem>
                  <para>
                      
    procedure DeleteData(const offset, count: integer); virtual;
                     <literallayout>
      Remove a range of characters from the node. Upon success, data and length
      reflect the change. 
      Parameters:
      - offset
         The offset from which to remove characters.
      - count
         The number of characters to delete. If the sum of offset and count
         exceeds length then all characters from offset to the end of the data
         are deleted.
      Exceptions:
      - EIndex_Size_Err
         Raised if the specified offset is negative or greater than the number
         of characters in data, and if the specified count is
         negative.</literallayout>
                  </para>
               </listitem>
               <listitem>
                  <para>
                      
    procedure ReplaceData(const offset, count: integer; const arg: WideString);
    virtual;
                     <literallayout>
      Replace the characters starting at the specified character offset with the
      specified string. 
      Parameters:
      - offset
         The offset from which to start replacing.
      - count
         The number of characters to replace. If the sum of offset and count
         exceeds length, then all characters to the end of the data are replaced
         (i.e., the effect is the same as a remove method call with the same
         range, followed by an append method invocation).
      - arg
         The WideString with which the range must be replaced.
      Exceptions:
      - EIndex_Size_Err
         Raised if the specified offset is negative or greater than the number
         of characters in data, and if the specified count is
         negative.</literallayout>
                  </para>
               </listitem>
            </itemizedlist>
         </para>
      </sect1>
      <sect1>
         <title>TdomAttr = class (TdomNode) (#)</title>
         <para>The TdomAttr interface represents an attribute in an TdomElement
         object. Typically the allowable values for the attribute are defined in
         a document type definition.
</para>
         <para>
DOM Attribute objects inherit the Node interface, but since they are not
actually child nodes of the element they describe, the DOM does not consider
them part of the document tree. Thus, the Node attributes parentNode,
previousSibling, and nextSibling have a nil value for Attribute objects. The DOM
takes the view that attributes are properties of elements rather than having a
separate identity separate from the elements they are associated with; this
should make it more efficient to implement such features as default attributes
associated with all elements of a given type. Furthermore, Attribute nodes may
not be immediate children of a TdomDocumentFragment. However, they can be
associated with element nodes contained within a TdomDocumentFragment. In short,
users and implementors of the DOM need to be aware that Attribute nodes have
some things in common with other objects inheriting the Node interface, but they
also are quite distinct.
</para>
         <para>
The attribute's effective value is determined as follows: if this attribute has
been explicitly assigned any value, that value is the attribute's effective
value; otherwise, if there is a declaration for this attribute, and that
declaration includes a default value, then that default value is the attribute's
effective value; otherwise, the attribute does not exist on this element in the
structure model until it has been explicitly added. Note that the nodeValue
attribute on the Attribute instance can also be used to retrieve the string
version of the attribute's value(s). 
</para>
         <para>
In XML, the value of an attribute is represented by the child nodes of an
Attribute node, since the value can contain entity references. Thus, attributes
which contain entity references will have a child list containing both TdomText
nodes and TdomEntityReference nodes. In addition, because the attribute type may
be unknown, there are no tokenised attribute values. 
</para>
         <para>
            <emphasis>Properties</emphasis>
         </para>
         <para>
            <itemizedlist>
               <listitem>
                  <para>
                      
    property Name: WideString (readonly)
                     <literallayout>
      Returns the name of this attribute.</literallayout>
                  </para>
               </listitem>
               <listitem>
                  <para>
                      
    property Specified: boolean (readonly)
                     <literallayout>
      If this attribute was explicitly given a value in the original document,
      this is true; otherwise, it is false. Note that the implementation is in
      charge of this attribute, not the user. If the user changes the value of
      the attribute (even if it ends up having the same value as the default
      value) then the specified flag is automatically flipped to true. To
      re-specify the attribute as the default value from the DTD, the user must
      delete the attribute, and then the implementation will make a new
      attribute available with specified set to false and the default value (if
      one exists).
      In summary: If the attribute has an assigned value in the document and
      specified is true, the value is the assigned value. If the attribute has
      no assigned value in the document and has a default value in the DTD, then
      specified is false, and the value is the default value in the DTD. If the
      attribute has no assigned value in the document and has a value of
      #IMPLIED in the DTD, then the attribute does not appear in the structure
      model of the document.</literallayout>
                  </para>
               </listitem>
               <listitem>
                  <para>
                      
    property Value: WideString (readonly)
                     <literallayout>
      When used to get the Value of a TdomAttr, returns the value of the
      TdomAttr as a WideString. Character and general entity references are
      replaced with their values in the returned string. When used to set the
      Value of an TdomAttr, creates a TdomText node with the unparsed contents
      of the WideString.</literallayout>
                  </para>
               </listitem>
               <listitem>
                  <para>
                       
(#) property OwnerElement: TdomElement (readonly)
                     <literallayout>
      The TdomElement this attribute is attached to or nil if this attribute is
      not in use.</literallayout>
                  </para>
               </listitem>
            </itemizedlist>
         </para>
      </sect1>
      <sect1>
         <title>TdomElement = class (TdomNode) (*)</title>
         <para>
By far the vast majority (apart from TdomText) of objects that authors encounter
when traversing a document are TdomElement nodes. Assume the following XML
document: 
</para>
         <para>
            <literallayout>
     &lt;elementExample id="demo"&gt;
       &lt;subelement1/&gt;
       &lt;subelement2&gt;&lt;subsubelement/&gt;&lt;/subelement2&gt;
     &lt;/elementExample&gt;
</literallayout>
         </para>
         <para>
            
When represented using DOM, the top node is 
            <quote>elementExample</quote>
            , which contains two child Element nodes, one for  
            <quote>subelement1</quote>
             and one for 
            <quote>subelement2</quote>
            . 
            <quote>subelement1</quote>
             contains no child nodes.
Elements may have attributes associated with them; since the TdomElement object
inherits from TdomNode, the generic TdomNode method getAttributes may be used to
retrieve the set of all attributes for an TdomElement. There are methods on the
TdomElement interface to retrieve either an TdomAttr object by name or directly
an Attribute value by name. TdomAttr objects should be retrieved in XML, where
attributes may contain entity references, meaning that their values may be a
fairly complex sub-tree.

         </para>
         <para>
            <emphasis>Properties</emphasis>
         </para>
         <para>
            <itemizedlist>
               <listitem>
                  <para>
                      
    property TagName: WideString (readonly)
                     <literallayout>
      This attribute contains the string that is the element's name. For
      example, in: 
               &lt;elementExample id="demo"&gt; 
                       ... 
               &lt;/elementExample&gt; ,
      tagName has the value "elementExample". Note that this is case-preserving
      in XML, as are all of the operations of the DOM.</literallayout>
                  </para>
               </listitem>
            </itemizedlist>
         </para>
         <para>
            <emphasis>Public methods</emphasis>
         </para>
         <para>
            <itemizedlist>
               <listitem>
                  <para>
                     
(*) function GetAttribute(const Name: WideString): WideString; virtual;
                     <literallayout>
      Retrieves an attribute value by name. [*If there is no such Attribute then
      an empty WideString is returned.]
      Parameters:
      - name
         The name of the attribute to retrieve
      Return Values:
         The Attribute value as a string, or the empty string if that attribute
         does not have a specified or defaulted value. 
      Exceptions:
      - ENamespace_Err (+)
	      Raised if attributes.namespaceAware is true.</literallayout>
                  </para>
               </listitem>
               <listitem>
                  <para>
                     
(*) function SetAttribute(const Name, Value: WideString): TdomAttr; virtual;
                     <literallayout>
      Adds a new attribute. If an attribute with that name is already present in
      the element, its value is changed to be that of the value parameter. This
      value is a simple WideString, it is not parsed as it is being set. So any
      markup (such as syntax to be recognized as an entity reference) is treated
      as literal text, and needs to be appropriately escaped by the
      implementation when it is written out. In order to assign an attribute
      value that contains entity references, the user must create an TdomAttr
      node plus any TdomText and TdomEntityReference nodes, build the
      appropriate subtree, and use setAttributeNode to assign it as the value of
      an attribute. To set an attribute with a qualified name and namespace URI,
      use the setAttributeNS method. 
      Parameters:
      - name
         The name of an attribute to create or alter.
      - value
         Value to set in WideString form.
      Return Values: (+)
         The new TdomAttr object if one was created, otherwise nil. 
      Exceptions:
      - EInvalid_Character_Err
         Raised if an invalid name is specified.
      - ENamespace_Err (+)
	      Raised if attributes.namespaceAware is true.</literallayout>
                  </para>
               </listitem>
               <listitem>
                  <para>
                     
(*) function RemoveAttribute(const Name: WideString): TdomAttr; virtual;
                     <literallayout>
      Removes the Attribute with the specified name. [*Not yet implemented: If
      the removed Attribute has a default value it is immediately replaced.] To
      remove an attribute with a qualified name and namespace URI, use the
      removeAttributeNS method. 
      Parameters:
      - name
         The name of the attribute to remove.
      Return Values: (+)
         The removed TdomAttr object. 
      Exceptions:
      - ENot_Found_Err (+)
         Raised if there is no attribute named name in the list.
      - ENamespace_Err (+)
	      Raised if attributes.namespaceAware is true.</literallayout>
                  </para>
               </listitem>
               <listitem>
                  <para>
                     
(*) function GetAttributeNode(const Name: WideString): TdomAttr; virtual;
                     <literallayout>
      Retrieves an attribute node by name. To retrieve an attribute with a
      qualified name and namespace URI, use the getAttributeNS method. 
      - name
         The name of an attribute to retrieve.
      Return Values: 
         The TdomAttr node with the specified attribute name or nil if there is
         no such TdomAttr. 
      Exceptions:
      - ENamespace_Err (+)
	      Raised if attributes.namespaceAware is true.</literallayout>
                  </para>
               </listitem>
               <listitem>
                  <para>
                     
(*) function SetAttributeNode(const NewAttr: TdomAttr): TdomAttr; virtual;
                     <literallayout>
      Adds a new attribute. If an attribute with that name (nodename) is already
      present in the element, it is replaced by the new one. To add a new
      attribute node with a qualified name and namespace URI, use the
      setAttributeNodeNS method.  
      Parameters:
      - newAttr
         The attribute node to add to the attribute list 
      Return Values:
         If the newAttr attribute replaces an existing attribute with the same
         name, the previously existing Attribute node is returned, otherwise nil
         is returned. 
      Exceptions:
      - EWrong_Document_Err 
	      Raised if newAttr was created from a different TdomDocument than the
	      one that created the TdomElement.
      - EInuse_Attribute_Err
          Raised if newAttr is already an TdomAttr of another TdomElement
          object. The DOM user must explicitly clone TdomAttr nodes to re-use
          them in other TdomElements.
      - ENamespace_Err (+)
	      Raised if attributes.namespaceAware is true.</literallayout>
                  </para>
               </listitem>
               <listitem>
                  <para>
                     
(*) function RemoveAttributeNode(const OldAttr: TdomAttr): TdomAttr; virtual;
                     <literallayout>
      Removes the specified attribute. [*Not yet implemented: If the removed
      Attribute has a default value it is immediately replaced. The replacing
      attribute has the same namespace URI and local name, as well as the
      original prefix, when applicable.]
      Parameters:
      - oldAttr
         The TdomAttr node to remove from the attribute list.
      Return Values:
         Returns the TdomAttr node that was removed. 
      Exceptions:
      - ENot_Found_Err (+)
         Raised if oldAttr is not an TdomAttr of the
         TdomElement.</literallayout>
                  </para>
               </listitem>
               <listitem>
                  <para>
                     
    function GetElementsByTagName(const Name: WideString): TdomNodeList;
    virtual;
                     <literallayout>
      Returns a TdomNodeList of all descendant TdomElements with a given tag
      name in the order in which they would be encountered in a preorder
      traversal of the Element tree. Note, that calling this function will
      internally create a TdomNodeList for the specified tag name unless this
      had been done by a previouse call. This TdomNodeList will (only) be freed
      when the TdomElement itself is freed. Since calling the
      GetElementsByTagName function very often with different tag names will
      result in high memory usage, it is recommended to use a node iterator or a
      tree walker with an appropriate filter instead. 
      Parameters:
      - name
         The name of the tag to match on. The special value '*' matches all
         tags.
      Return Values:
         A list of matching TdomElement nodes.</literallayout>
                  </para>
               </listitem>
               <listitem>
                  <para>
                     
(#) function GetAttributeNS(const namespaceURI, 
                                  localName: WideString): WideString; virtual;
                     <literallayout>
      Retrieves an attribute value by local name and namespace URI. [*If there
      is no such Attribute then an empty WideString is returned.]
      Parameters:
      - namespaceURI
         The namespace URI of the attribute to retrieve
      - localName
         The local name of the attribute to retrieve
      Return Values:
         The Attribute value as a string, or the empty string if that attribute
         does not have a specified or defaulted value. 
      - ENamespace_Err (+)
	      Raised if attributes.namespaceAware is false.</literallayout>
                  </para>
               </listitem>
               <listitem>
                  <para>
                     
(#*)function SetAttributeNS(const namespaceURI, 
                                  qualifiedName,
								  Value: WideString): TdomAttr; virtual;
                     <literallayout>
      Adds a new attribute. If an attribute with that same local name and
      namespace URI is already present on the element, its prefix is changed to
      be the prefix part of the qualifiedName, and its value is changed to be
      the value parameter. This value is a simple WideString, it is not parsed
      as it is being set. So any markup (such as syntax to be recognized as an
      entity reference) is treated as literal text, and needs to be
      appropriately escaped by the implementation when it is written out. In
      order to assign an attribute value that contains entity references, the
      user must create an TdomAttr node plus any TdomText and
      TdomEntityReference nodes, build the appropriate subtree, and use
      setAttributeNS to assign it as the value of an attribute. 
      Parameters:
      - namespaceURI
         The namespace URI of the attribute to create or alter.
      - qualifiedName
         The qualified name of the attribute to create or alter.
      - value
         Value to set in WideString form.
      Return Values: (+)
         The new TdomAttr object if one was created, otherwise nil. 
      Exceptions:
      - EInvalid_Character_Err
         Raised if an invalid name is specified.
      - ENamespace_Err (*)
         Raised if the qualifiedName is malformed, if the qualifiedName has a
         prefix and the namespaceURI is an empty string, if the qualifiedName
         has a prefix that is 'xml' and the namespaceURI is different from
         'http://wwww.w3.org/XML/1998/namespace', if the qualifiedName has a
         prefix that is 'xmlns' and the namespaceURI is defferent from
         'http://www.w3.org/2000/xmlns/', or if the qualifiedName is 'xmlns',
         and the namespaceURI is different from 'http://www.w3.org/2000/xmlns/'[
         *, or if attributes.namespaceAware is false].</literallayout>
                  </para>
               </listitem>
               <listitem>
                  <para>
                     
(#*)function RemoveAttributeNS(const namespaceURI, 
                                     localName: WideString): TdomAttr; virtual;
                     <literallayout>
      Removes the Attribute by local name and namespace URI. [*Not yet
      implemented: If the removed Attribute has a default value it is
      immediately replaced. The replacing attribute has the same namespace URI
      and local name, as well as the original prefix.]
      Parameters:
      - namespaceURI
         The namespace URI of the attribute to remove.
      - localName
         The local name of the attribute to remove.
      Return Values: (+)
         The removed TdomAttr object. 
      Exceptions:	
      - ENot_Found_Err (+)
         Raised if there is no attribute named name in the list.
      - ENamespace_Err (+)
	      Raised if attributes.namespaceAware is false.</literallayout>
                  </para>
               </listitem>
               <listitem>
                  <para>
                     
(#*)function GetAttributeNodeNS(const namespaceURI, 
                                      localName: WideString): TdomAttr; virtual;
                     <literallayout>
      Retrieves an attribute node by local name and namespace URI. 
      - namespaceURI
         The namespace URI of the attribute to retrieve.
      - localName
         The local name of the attribute to retrieve.
      Return Value:
         The TdomAttr node with the specified attribute local name and namespace
         URI or nil if there is no such TdomAttr. 
      Exceptions:
      - ENamespace_Err (+)
	      Raised if attributes.namespaceAware is false.</literallayout>
                  </para>
               </listitem>
               <listitem>
                  <para>
                     
(#*)function SetAttributeNodeNS(const NewAttr: TdomAttr): TdomAttr; virtual;
                     <literallayout>
      Adds a new attribute. If an attribute with that local name and namespace
      URI is already present in the element, it is replaced by the new one.  
      Parameters:
      - newAttr
         The attribute node to add to the attribute list 
      Return Value:
         If the newAttr attribute replaces an existing attribute with the same
         local name and namespace URI, the replaced TdomAttribute node is
         returned, otherwise nil is returned. 
      Exceptions:
      - EWrong_Document_Err 
	      Raised if newAttr was created from a different TdomDocument than the
	      one that created the TdomElement.
      - EInuse_Attribute_Err
          Raised if newAttr is already an TdomAttr of another TdomElement
          object. The DOM user must explicitly clone TdomAttr nodes to re-use
          them in other TdomElements.
      - ENamespace_Err (+)
	      Raised if attributes.namespaceAware is false.</literallayout>
                  </para>
               </listitem>
               <listitem>
                  <para>
                     
(#*)function GetElementsByTagNameNS(const namespaceURI, 
                                          localName: WideString): TdomNodeList;
                                          virtual;
                     <literallayout>
      Returns a TdomNodeList of all the TdomElements with a given local name and
      namespace URI in the order in which they would be encountered in a
      preorder traversal of the Element tree, starting from this node.  Note,
      that calling this function will internally create a TdomNodeList for the
      specified tag name unless this had been done by a previouse call. This
      TdomNodeList will (only) be freed when the TdomElement itself is freed.
      Since calling the GetElementsByTagNameNS function very often with
      different tag names will result in high memory usage, it is recommended to
      use a node iterator or a tree walker with an appropriate filter instead.
      Parameters:
      - namespaceURI
         The namespace URI of the elements to match on. The special value '*'
         matches all namespaces.
      - localName
         The local name of the elements to match on. The special value '*'
         matches all local names.
      Return Value:
         A new TdomNodelist object containing all the matched
         TdomElements.</literallayout>
                  </para>
               </listitem>
               <listitem>
                  <para>
                     
(#*)function hasAttribute(const name: WideString): boolean;
                     <literallayout>
      Returns true when an attribute with a given name is specified on this
      element [not yet implemented: or has a default value].
      - name
         The name of the attribute to look for.
      Return Value: (*)
         true if an attribute with the given name is specified on this element
         [not yet implemented: or has a default value], false otherwise.
      Exceptions:
      - ENamespace_Err (+)
	      Raised if attributes.namespaceAware is true.</literallayout>
                  </para>
               </listitem>
               <listitem>
                  <para>
                     
(#*)function hasAttributeNS(const namespaceURI,
                                  localName: WideString): boolean;
                     <literallayout>
      Returns true when an attribute with a given local name and namespace URI
      is specified on this element [not yet implemented: or has a default
      value].
      - namespaceURI
         The namespace URI of the attribute to look for.
      - localName
         The local name of the attribute to look for.
      Return Value: (*)
         true if an attribute with a given local name and namespace URI is
         specified [not yet implemented: or has a default value] on this
         element, false otherwise.
      Exceptions:
      - ENamespace_Err (+)
	      Raised if attributes.namespaceAware is false.</literallayout>
                  </para>
               </listitem>
            </itemizedlist>
         </para>
      </sect1>
      <sect1>
         <title>TdomText = class (TdomCharacterData)</title>
         <para>The TdomText object represents the textual content (termed
         character data in XML) of an Element or Attribute. If there is no
         markup inside an element's content, the text is contained in a single
         object implementing the Text interface that is the child of the
         element. Any markup is parsed into child elements that are siblings of
         the text nodes on either side of it, and whose content is represented
         as text node children of the markup element.
</para>
         <para>
When a document is first made available to the DOM, there is only one TdomText
node for each block of text. Users may create adjacent Text nodes that represent
the contents of a given element without any intervening markup, but should be
aware that there is no way to represent the separations between these nodes in
XML or HTML, so they will not (in general) persist between DOM editing sessions.
The normalize method on TdomElement merges any such adjacent TdomText objects
into a single node for each block of text; this is recommended before employing
operations that depend on a particular document structure, such as navigation
with XPointers. 
</para>
         <para>
            <emphasis>Public methods</emphasis>
         </para>
         <para>
            <itemizedlist>
               <listitem>
                  <para>
                     
    function SplitText(const offset: integer): TdomText; virtual;
                     <literallayout>
      Breaks a text node into two text nodes at the specified offset, keeping
      both in the tree as siblings. This node then only contains all the content
      up to the offset point. And a new Text node, which is inserted as the next
      sibling of this node, contains all the content at and after the offset
      point.
      Parameters:
      - offset
         The offset at which to split, starting from 0.
      Return Values:
         This method returns the new text node containing all the content at and
         after the offset point. The original node contains all the content up
         to the offset point. 
      Exceptions:
      - EIndex_Size_Err
         Raised if the specified offset is negative or greater than the number
         of characters in data.</literallayout>
                  </para>
               </listitem>
            </itemizedlist>
         </para>
      </sect1>
      <sect1>
         <title>TdomComment = class (TdomCharacterData)</title>
         <para>This represents the content of a comment, i.e. all the characters
         between the starting '&lt;!--' and ending '--&gt;'. Note that this is
         the definition of a comment in XML, and, in practice, HTML, although
         some HTML tools may implement the full SGML comment structure. 

          </para>
      </sect1>
      <sect1>
         <title>TdomProcessingInstruction = class (TdomNode)</title>
         <para>
            The ProcessingInstruction interface represents a <quote>processing
            instruction</quote>, used in XML as a way to keep processor-specific
            information in the text of the document.


         </para>
         <para>
            <emphasis>Properties</emphasis>
         </para>
         <para>
            <itemizedlist>
               <listitem>
                  <para>
                      
    property Target: WideString read GetTarget;
                     <literallayout>
      The target of the processing instruction. XML defines this as being the
      first token following the markup that begins the processing
      instruction.</literallayout>
                  </para>
               </listitem>
               <listitem>
                  <para>
                      
    property Data: WideString read GetData write SetData;
                     <literallayout>
      The content of the processing instruction. This is from from the first non
      white space character after the target to the character immediately
      preceding the ?&gt;.</literallayout>
                  </para>
               </listitem>
            </itemizedlist>
         </para>
      </sect1>
      <sect1>
         <title>TdomXmlDeclaration = class (TdomNode) (+)</title>
         <para>This represents an optional XML declaration at the beginning of
         an XML document.

</para>
         <para>
            <emphasis>Properties</emphasis>
         </para>
         <para>
            <itemizedlist>
               <listitem>
                  <para>
                      
(+) property VersionNumber: WideString (readonly)
                     <literallayout>
      The version number of the XML declaration. An EInvalid_Character_Err is
      raised if an invalid version number is specified.</literallayout>
                  </para>
               </listitem>
               <listitem>
                  <para>
                      
(+) property EncodingDecl: WideString
                     <literallayout> 
      The encoding declaration of the XML declaration. An EInvalid_Character_Err
      is raised if an invalid name is specified.</literallayout>
                  </para>
               </listitem>
               <listitem>
                  <para>
                      
(+) property SDDecl: WideString
                     <literallayout> 
      The standalone declaration of the XML declaration.
	  Valid values are 'yes', 'no' or ''. An EInvalid_Character_Err is raised,
	  if an invalid value is specified.</literallayout>
                  </para>
               </listitem>
            </itemizedlist>
         </para>
         <para>
            <emphasis>Public Methods</emphasis>
         </para>
         <para>
            <itemizedlist>
               <listitem>
                  <para>
                      
(+) constructor Create(const AOwner: TdomDocument; const Version, EncDl, SdDl:
WideString); virtual;
                     <literallayout>
	  Creates a new instance of a TdomXmlDeclaration object. Developers should
	  not call 'create' directly. Instead they should use the appropriate
	  methode of a TdomDocument object.
      Parameters:
      - AOwner
         The TdomDocument that creates the TdomXmlDeclaration.
      - Version
         The version number of the XML declaration.
      - EncDl
         The encoding declaration of the XML declaration.
      - SdDl
         The standalone declaration of the XML declaration.</literallayout>
                  </para>
               </listitem>
            </itemizedlist>
         </para>
      </sect1>
      <sect1>
         <title>TdomCDATASection = class (TdomText)</title>
         <para>
            
            
            
            
            CDATA Sections are used to escape blocks of text containing
            characters that would otherwise be regarded as markup. The only
            delimiter that is recognised in a CDATA Section is the
            <quote>]]&gt;</quote> string that ends the CDATA Section. CDATA
            Sections can not be nested. The primary purpose is for including
            material such as XML fragments, without needing to escape all the
            delimiters.

         </para>
         <para>
The TdomCDATASection inherits the TdomCharacterData interface through the
TdomText interface. Adjacent CDATA Sections are not merged by use of the
TdomElement.normalize method. 
</para>
      </sect1>
      <sect1>
         <title>TdomCustomDocumentType = class (TdomNode) (+)</title>
         <para>TdomCustomDocumentType is the common parent class of
         TdomDocumentType, TdomExternalSubset, TdomInternalSubset, and
         TdomConditionalSection.  You should not use this node type in your
         Delphi projects.

          </para>
      </sect1>
      <sect1>
         <title>TdomDocumentType = class (TdomCustomDocumentType) (#*)</title>
         <para>
TdomDocumentType represents a XML document type declaration. TdomDocumentTypes
are readonly.* Each TdomDocumentType's child list contains only two child nodes:
A TdomInternalSubset and a TdomExternalSubset node which both are not readonly.*
Each document has a (possibly nil) attribute that contains a reference to a
TdomDocumentType object. Note, that the factory method for creating a
TdomDocumentType node according to the DOM2 specification is located at the
TDocumentObjectModel. The XDOM provides factory methods on both the
TDocumentObjectModel and the TdomDocument interface.

</para>
         <para>
            <emphasis>Properties</emphasis>
         </para>
         <para>
            <itemizedlist>
               <listitem>
                  <para>
                     
(+) property AttributeLists: TdomNamedNodeMap (readonly)
                     <literallayout>
      This is a NamedNodeMap containing the attribute lists declared in the
      DTD.</literallayout>
                  </para>
               </listitem>
               <listitem>
                  <para>
                     
    property Entities: TdomNamedNodeMap (readonly)
                     <literallayout>
      This is a NamedNodeMap containing the general entities, both external and
      internal, declared in the DTD. For example in: 
               &lt;!DOCTYPE ex SYSTEM "ex.dtd" [
                 &lt;!ENTITY foo "foo"&gt;
                 &lt;!ENTITY bar "bar"&gt;
                 &lt;!ENTITY % baz "baz"&gt;
               ]&gt;
               &lt;ex/&gt;
      the interface provides access to foo and bar but not baz. All objects
      supporting the Node interface that are accessed through this attribute,
      also support the Entity interface.</literallayout>
                  </para>
               </listitem>
               <listitem>
                  <para>
                     
    property Name: WideString (readonly)
                     <literallayout>
      The name attribute is a WideString that holds the name of DTD; i.e., the
      name immediately following the DOCTYPE keyword.</literallayout>
                  </para>
               </listitem>
               <listitem>
                  <para>
                     
    property Notations: TdomNamedNodeMap (readonly)
                     <literallayout>
      This is a TdomNamedNodeMap containing the notations declared in the DTD.
      Each node in this map also implements the TdomNotation
      object.</literallayout>
                  </para>
               </listitem>
               <listitem>
                  <para>
                     
(+) property ParameterEntities: TdomNamedNodeMap (readonly)
                     <literallayout>
      This is a NamedNodeMap containing the parameter entities, both external
      and internal, declared in the DTD.</literallayout>
                  </para>
               </listitem>
               <listitem>
                  <para>
                     
(#) property PublicId: wideString  (readonly)
                     <literallayout>
      The public identifier of the external subset.</literallayout>
                  </para>
               </listitem>
               <listitem>
                  <para>
                     
(#) property SystemId: wideString  (readonly)
                     <literallayout> 
      The system identifier of the external subset.</literallayout>
                  </para>
               </listitem>
               <listitem>
                  <para>
                     
(#) property InternalSubset: wideString  (readonly)
                     <literallayout>
      The internal subset as a wideString.</literallayout>
                  </para>
               </listitem>
               <listitem>
                  <para>
                     
(+) property ExternalSubsetNode: TdomExternalSubset  (readonly)
                     <literallayout> 
      This is a convenience attribute that allows direct access to the child
      node that contains the external subset of the DTD.</literallayout>
                  </para>
               </listitem>
               <listitem>
                  <para>
                     
(+) property InternalSubsetNode: TdomInternalSubset  (readonly)
                     <literallayout> 
      This is a convenience attribute that allows direct access to the child
      node that contains the internal subset of the DTD.</literallayout>
                  </para>
               </listitem>
            </itemizedlist>
         </para>
         <para>
            <emphasis>Public Methods</emphasis>
         </para>
         <para>
            <itemizedlist>
               <listitem>
                  <para>
                     
(#) constructor Create(const AOwner: TdomDocument; const Name, PubId, SysId:
WideString); virtual;
                     <literallayout>
	  Creates a new instance of a TdomDocumentType object. Developers should not
	  call 'create' directly. Instead they should use the appropriate methode of
	  a TdomDocument or TdomImplementation object.
      Parameters:
      - AOwner
         The TdomDocument that creates the TdomDocumentType.
      - Name
         The name of the DTD; i.e., the name immediately following the DOCTYPE
         keyword.
      - PubId 
         The public identifier of the document type.
      - SysId 
         The system identifier of the document type.</literallayout>
                  </para>
               </listitem>
            </itemizedlist>
         </para>
      </sect1>
      <sect1>
         <title>TdomConditionalSection = class (TdomCustomDocumentType)
         (+)</title>
         <para>This object represents a conditional section of an DTD external
         subset.  

</para>
         <para>
            <emphasis>Properties</emphasis>
         </para>
         <para>
            <itemizedlist>
               <listitem>
                  <para>
                      
(+) property Included: TdomNode (readonly)
                     <literallayout>
      This is either a text node -- with the value 'INCLUDE' or 'IGNORE' -- or a
      ParameterEntityReference node which refers to a ParameterEntity containing
      such a text node.</literallayout>
                  </para>
               </listitem>
               <listitem>
                  <para>
                      
(+) property AttributeLists: TdomNamedNodeMap (readonly)
                     <literallayout>
      This is a NamedNodeMap containing the attribute lists declared in the
      conditional section.</literallayout>
                  </para>
               </listitem>
               <listitem>
                  <para>
                      
(+) property Data: WideString
                     <literallayout>
      A WideString that holds the content of conditional section; i.e. all the
      characters between the inner brackets '[' and ']'.</literallayout>
                  </para>
               </listitem>
               <listitem>
                  <para>
                      
(+) property ParameterEntities: TdomNamedNodeMap (readonly)
                     <literallayout>
      This is a NamedNodeMap containing the parameter entities declared in the
      conditional section.</literallayout>
                  </para>
               </listitem>
            </itemizedlist>
         </para>
         <para>
            <emphasis>Public Methods</emphasis>
         </para>
         <para>
            <itemizedlist>
               <listitem>
                  <para>
                      
(+) constructor Create(const AOwner: TdomDocument;
                       const IncludeStmt: WideString); virtual;
                     <literallayout>
	  Creates a new instance of a TdomConditionalSection object. Developers
	  should not call 'create' directly. Instead they should use the appropriate
	  methode of a TdomDocument object.
      Parameters:
      - AOwner
         The TdomDocument that creates the TdomDocumentType.
      - IncludeStmt
         Either the WideString 'INCLUDE' or 'IGNORE' or a paramter entity
         reference that refers to a parameter entity containing such a
         WideString.
      Exceptions:
      - EInvalid_Character_Err
         Raised if an invalid IncludeStmt is specified.</literallayout>
                  </para>
               </listitem>
            </itemizedlist>
         </para>
      </sect1>
      <sect1>
         <title>TdomNotation = class (TdomNode)</title>
         <para>This object represents a notation. A notation either declares, by
         name, the format of an unparsed entity (see section 4.7 of the XML 1.0
         specification), or is used for formal declaration of Processing
         Instruction targets (see section 2.6 of the XML 1.0 specification). The
         nodeName attribute inherited from TdomNode is set to the declared name
         of the notation. Note, that TdomNotation is not a representation of the
         notation declaration in a DTD; use TdomNotationDeclaration instead.

</para>
         <para>
            <emphasis>Properties</emphasis>
         </para>
         <para>
            <itemizedlist>
               <listitem>
                  <para>
                     
    property PublicId: WideString (readonly)
                     <literallayout>
      The public identifier for the notation. If the public identifier was not
      specified, this is nil.</literallayout>
                  </para>
               </listitem>
               <listitem>
                  <para>
                     
    property SystemId: WideString (readonly)
                     <literallayout>
      The system identifier for the notation. If the system identifier was not
      specified, this is nil.</literallayout>
                  </para>
               </listitem>
               <listitem>
                  <para>
                     
(+) property ParentDocumentType: TdomDocumentType (readonly)
                     <literallayout>
      The parent TdomDocumentType of the given TdomNotation
      instance.</literallayout>
                  </para>
               </listitem>
            </itemizedlist>
         </para>
         <para>
            <emphasis>Public Methods</emphasis>
         </para>
         <para>
            <itemizedlist>
               <listitem>
                  <para>
                     
    constructor Create(const AOwner: TdomDocument; const Name, PublicId,
    SystemId: WideString); virtual;
                     <literallayout>
	  Creates a new instance of a TdomNotation object. Developers should not
	  call 'create' directly. Instead they should use the appropriate methode of
	  a TdomDocument object.
      Parameters:
      - AOwner
         The TdomDocument that creates the TdomNotation
      - name
         The name of the TdomNotation.
      - publicId 
         The public identifier for the notation. If the public identifier was
         not specified, this is nil. 
      - systemId 
         The system identifier for the notation. If the system identifier was
         not specified, this is nil.</literallayout>
                  </para>
               </listitem>
            </itemizedlist>
         </para>
      </sect1>
      <sect1>
         <title>TdomNotationDeclaration = class (TdomNode) (+)</title>
         <para>
This object represents a notation declaration in the DTD. A notation either
declares, by name, the format of an unparsed entity (see section 4.7 of the XML
1.0 specification), or is used for formal declaration of Processing Instruction
targets (see section 2.6 of the XML 1.0 specification). The nodeName attribute
inherited from TdomNode is set to the declared name of the notation. 

</para>
         <para>
            <emphasis>Properties</emphasis>
         </para>
         <para>
            <itemizedlist>
               <listitem>
                  <para>
                     
    property PublicId: WideString (readonly)
                     <literallayout>
      The public identifier for the notation. If the public identifier was not
      specified, this is nil.</literallayout>
                  </para>
               </listitem>
               <listitem>
                  <para>
                     
    property SystemId: WideString (readonly
                     <literallayout>)
      The system identifier for the notation. If the system identifier was not
      specified, this is nil.</literallayout>
                  </para>
               </listitem>
               <listitem>
                  <para>
                     
(+) property ParentDocumentType: TdomDocumentType (readonly)
                     <literallayout>
      The parent TdomDocumentType of the given TdomNotationDeclaration
      instance.</literallayout>
                  </para>
               </listitem>
            </itemizedlist>
         </para>
         <para>
            <emphasis>Public Methods</emphasis>
         </para>
         <para>
            <itemizedlist>
               <listitem>
                  <para>
                     
    constructor Create(const AOwner: TdomDocument; const Name, PublicId,
    SystemId: WideString); virtual;
                     <literallayout>
	  Creates a new instance of a TdomNotationDeclaration object. Developers
	  should not call 'create' directly. Instead they should use the appropriate
	  methode of a TdomDocument object.
      Parameters:
      - AOwner
         The TdomDocument that creates the TdomNotation
      - name
         The name of the notation.
      - publicId 
         The public identifier for the notation. If the public identifier was
         not specified, this is nil. 
      - systemId 
         The system identifier for the notation. If the system identifier was
         not specified, this is nil.</literallayout>
                  </para>
               </listitem>
            </itemizedlist>
         </para>
      </sect1>
      <sect1>
         <title>TdomCustomDeclaration = class (TdomNode) (+)</title>
         <para>TdomCustomDeclaration is the common parent class of
         TdomElementTypeDeclaration, TdomAttrList, and TdomCustomEntity.  You
         should not use this node type in your Delphi projects.

          </para>
      </sect1>
      <sect1>
         <title>TdomElementTypeDeclaration = class (TdomCustomDeclaration)
         (+)</title>
         <para>This object represents an element type declared in the DTD.

</para>
         <para>
            <emphasis>Properties</emphasis>
         </para>
         <para>
            <itemizedlist>
               <listitem>
                  <para>
                      
(+) property Value: WideString
                     <literallayout>
      Returns the value of the TdomElementTypeDeclaration as a WideString.
      Character and general entity references are replaced with their values in
      the returned string. When used to set the Value of an
      TdomElementTypeDeclaration, creates a TdomText node with the unparsed
      contents of the WideString.</literallayout>
                  </para>
               </listitem>
               <listitem>
                  <para>
                      
(+) property Code: WideString (readonly) (inherited from TdomNode)
                     <literallayout>
      Returns the cooresponding XML-code of the node and all its children.
      Exceptions:
      - ENot_Supported_Err
         Raised if the TdomElementTypeDeclaration has no child nodes while its
         contentspec is neither 'ctEmpty' nor 'ctAny'.</literallayout>
                  </para>
               </listitem>
               <listitem>
                  <para>
                      
(+) property Contentspec: TdomContentspecType (readonly)
                     <literallayout>
      The content specification type for the element type declaration.  Valid
      values are 'ctEmpty', 'ctAny', 'ctMixed', and
      'ctChildren'.</literallayout>
                  </para>
               </listitem>
            </itemizedlist>
         </para>
         <para>
            <emphasis>Public Methods</emphasis>
         </para>
         <para>
            <itemizedlist>
               <listitem>
                  <para>
                      
(+) constructor Create(const AOwner: TdomDocument; 
	                   const Name: WideString;
					   const Contspec: TdomContentspecType); virtual;
                     <literallayout>
	  Creates a new instance of a TdomElementTypeDeclaration object. Developers
	  should not call 'create' directly. Instead they should use the appropriate
	  methode of a TdomDocument object.
      Parameters:
      - AOwner
         The TdomDocument that creates the TdomElementTypeDeclaration.
      - name
         The element type being declared.
      - Contspec 
         The content specification type for the element type declaration.  Valid
         values are 'ctEmpty', 'ctAny', 'ctMixed', and
         'ctChildren'.</literallayout>
                  </para>
               </listitem>
               <listitem>
                  <para>
                      
(+) function AppendChild(const newChild: TdomNode): TdomNode; override;
                     <literallayout>
      Adds a child node to this node. If the newChild is already in the tree, it
      is first removed. Note, that it is not allowed that the
      TdomElementTypeDeclaration has more than one child node.
      Parameters:
      - newChild
         The node to add. If this is a TdomDocumentFragment object, the entire
         contents of the document fragment are moved into the child list of this
         node.
      Return Values:
         The node added. 
      Exceptions:
      - EHierarchy_Request_Err
	      Raised if this node is of a type that does not allow children of the
	      type of the newChild node, or if the node to append is one of this
	      node's ancestors.
      - EWrong_Document_Err 
	      Raised if newChild was created from a different document than the one
	      that created this node.
      - ENo_Modification_Allowed_Err
	      Raised if this node, or the previous parent of the node being
	      appended, is readonly.
      - ENot_Supported_Err
          Raised if the TdomElementTypeDeclaration has already a child node
          which is different from newchild, or if its contentspec is either
          'ctEmpty' or 'ctAny'.</literallayout>
                  </para>
               </listitem>
               <listitem>
                  <para>
                      
(+) function InsertBefore(const newChild, refChild: TdomNode): TdomNode;
override;
                     <literallayout>
	  Inserts a child node newChild to the node. refChild has to be either
	  identical with newChild or nil, in order to make sure that the
	  TdomElementTypeDeclaration has not more than one child node.
	  Parameters:
      - newChild
		 The node to insert.
      - refChild
		 The reference node, i.e., the node before which the new node must be
		 inserted.
      Return Values:
         The node being inserted. 
      Exceptions:
      - EHierarchy_Request_Err
	      Raised if this node is of a type that does not allow children of the
	      type of the newChild node, or if the node to insert is one of this
	      node's ancestors.
      - EWrong_Document_Err 
	      Raised if newChild was created from a different document than the one
	      that created this node.
      - ENo_Modification_Allowed_Err
	      Raised if this node, or the previous parent of the newChild node, is
	      readonly.
      - ENot_Found_Err
	      Raised if refChild is not a child of this node.
      - ENot_Supported_Err
         Raised if the TdomElementTypeDeclaration has already a child node which
         is different from newchild, or if its contentspec is either 'ctEmpty'
         or 'ctAny'.</literallayout>
                  </para>
               </listitem>
            </itemizedlist>
         </para>
      </sect1>
      <sect1>
         <title>TdomAttrList = class(TdomCustomDeclaration) (+)</title>
         <para>This object represents an attribute list declared in the DTD.

</para>
         <para>
            <emphasis>Properties</emphasis>
         </para>
         <para>
            <itemizedlist>
               <listitem>
                  <para>
                      
(+) property Value: WideString (readonly)
                     <literallayout>
      Returns the value of the TdomAttrList as a WideString. Character and
      general entity references are replaced with their values in the returned
      string. When used to set the Value of an TdomAttrList, creates a TdomText
      node with the unparsed contents of the WideString.</literallayout>
                  </para>
               </listitem>
               <listitem>
                  <para>
                      
(+) property AttributeDefinitions: TdomNamedNodeMap (readonly)
                     <literallayout>
      This is a TdomNamedNodeMap containing the attribute definitions of the
      attribute list.</literallayout>
                  </para>
               </listitem>
            </itemizedlist>
         </para>
         <para>
            <emphasis>Public Methods</emphasis>
         </para>
         <para>
            <itemizedlist>
               <listitem>
                  <para>
                      
(+) constructor Create(const AOwner: TdomDocument;
	                   const Name: WideString); virtual;
                     <literallayout>
	  Creates a new instance of a TdomAttrList object. Developers should not
	  call 'create' directly. Instead they should use the appropriate methode of
	  a TdomDocument object.
      Parameters:
      - AOwner
         The TdomDocument that creates the TdomAttrList.
      - name
         The element type for which the attributes are declared.</literallayout>
                  </para>
               </listitem>
               <listitem>
                  <para>
                      
(+) function RemoveAttributeDefinition(const Name: WideString):
TdomAttrDefinition; virtual;
                     <literallayout>
      Removes the specified attribute definition from 'AttributeDefinitions'. 
      Parameters:
      - name
         The name of the attribute definition being removed.
      Return Values:
	     The attribute definition node being removed.
      Exceptions:
      - ENot_Found_Err
	      Raised if there is no definition with that name in the
	      'AttributeDefinitions'.</literallayout>
                  </para>
               </listitem>
               <listitem>
                  <para>
                      
(+) function GetAttributeDefinitionNode(const Name: WideString):
TdomAttrDefinition; virtual;
                     <literallayout>
      Retrieves a definition node from 'AttributeDefinitions'.
      Parameters:
      - Name
          Name of the definition node to retrieve.
      Return Values:
          The definition node with the specified name, or nil if the specified
          name did not identify any node in the list.</literallayout>
                  </para>
               </listitem>
               <listitem>
                  <para>
                      
(+) function SetAttributeDefinitionNode(const NewAttDef: TdomAttrDefinition):
boolean; virtual;
                     <literallayout>
      Adds a new attribute definition to 'AttributeDefinitions'. 
      Parameters:
      - NewAttDef
	     The attribute definition node being added.
      Return Values:
	     Returns 'true' if the new attribute definition node was set. If there
	     is already existing an attribute definition node with the same name
	     than the new node is ignored and 'false' is returned.
      Exceptions:
      - EWrong_Document_Err
         Raised if NewAttDef was created from a different TdomDocument than the
         one that created the TdomAttrList.
      - EInuse_AttributeDefinition_Err
         Raised if an attempt is made to add an attribute definition node that
         is already inuse elsewhere.</literallayout>
                  </para>
               </listitem>
               <listitem>
                  <para>
                      
(+) function RemoveAttributeDefinitionNode(const OldAttDef: TdomAttrDefinition):
TdomAttrDefinition; virtual;
                     <literallayout>
      Removes the specified attribute definition from 'AttributeDefinitions'. 
      Parameters:
      - OldAttDef
	     The attribute definition node being removed.
      Return Values:
	     The attribute definition node being removed.
      Exceptions:
      - ENot_Found_Err
	     Raised if OldAttDef is not an TdomAttrDefinition of the
	     'AttributeDefinitions'.</literallayout>
                  </para>
               </listitem>
            </itemizedlist>
         </para>
      </sect1>
      <sect1>
         <title>TdomAttrDefinition = class(TdomNode) (+)</title>
         <para>This object represents an attribute definition which is part of
         an attribute list declared in the DTD.

</para>
         <para>
            <emphasis>Properties</emphasis>
         </para>
         <para>
            <itemizedlist>
               <listitem>
                  <para>
                      
(+) property AttributeType: WideString (readonly)
                     <literallayout>
      Returns the attribute type.</literallayout>
                  </para>
               </listitem>
               <listitem>
                  <para>
                      
(+) property DefaultDeclaration: WideString (readonly)
                     <literallayout>
      Returns the default declaration of the attribute.</literallayout>
                  </para>
               </listitem>
               <listitem>
                  <para>
                      
(+) property Name: WideString (readonly)
                     <literallayout>
      Returns the name of the attribute.</literallayout>
                  </para>
               </listitem>
               <listitem>
                  <para>
                      
(+) property ParentAttributeList: TdomAttrList (readonly)
                     <literallayout>
      Returns the parent TdomAttrList of the given TdomAttrDefinition
      instance.</literallayout>
                  </para>
               </listitem>
            </itemizedlist>
         </para>
         <para>
            <emphasis>Public Methods</emphasis>
         </para>
         <para>
            <itemizedlist>
               <listitem>
                  <para>
                      
(+) constructor Create(const AOwner: TdomDocument; 
	                   const Name,
                             AttType,
                             DefaultDecl,
                             AttValue: WideString); virtual;
                     <literallayout>
	  Creates a new instance of a TdomAttrDefinition object. Developers should
	  not call 'create' directly. Instead they should use the appropriate
	  methode of a TdomDocument object.
      Parameters:
      - AOwner
         The TdomDocument that creates the TdomAttrDefinition.
      - name
         The name of the attribute being defined.
      - AttType
         The type of the attribute being defined.
      - DefaultDecl
         The default declaration of the attribute being defined.
      - AttValue
         The value of the attribute being defined.
      Exceptions:
      - EInvalid_Character_Err
         Raised if an invalid name, attribute type, default declaration or
         attribute value is specified.</literallayout>
                  </para>
               </listitem>
            </itemizedlist>
         </para>
      </sect1>
      <sect1>
         <title>TdomNametoken = class (TdomNode) (+)</title>
         <para>This object represents a name token which is part of an attribute
         definition declared in the DTD.
</para>
         <para>
            <emphasis>Public Methods</emphasis>
         </para>
         <para>
            <itemizedlist>
               <listitem>
                  <para>
                      
(+) constructor Create(const AOwner: TdomDocument; 
	                   const Name: WideString); virtual;
                     <literallayout>
	  Creates a new instance of a TdomNametoken object. Developers should not
	  call 'create' directly. Instead they should use the appropriate methode of
	  a TdomDocument object.
      Parameters:
      - AOwner
         The TdomDocument that creates the TdomNametoken.
      - name
         The name of the name token.</literallayout>
                  </para>
               </listitem>
            </itemizedlist>
         </para>
      </sect1>
      <sect1>
         <title>TdomParticle = class (TdomNode) (+)</title>
         <para>TdomParticle is the common parent class of TdomSequenceParticle,
         TdomChoiceParticle, TdomPcdataChoiceParticle, and TdomElementParticle.
         You should not use this node type in your Delphi projects.

          </para>
      </sect1>
      <sect1>
         <title>TdomSequenceParticle = class (TdomParticle) (+)</title>
         <para>This object represents a sequence list of content particles which
         is part of an element type declaration in the DTD (see section 3.2.1 of
         the XML 1.0 specification).

</para>
         <para>
            <emphasis>Properties</emphasis>
         </para>
         <para>
            <itemizedlist>
               <listitem>
                  <para>
                      
(+) property Frequency: WideString
                     <literallayout>
      The optional character following a sequence list which governs whether the
      element or the content particles in the list may occur one or more ('+'),
      zero or more ('*'), or zero or one times ('?'). The absence of such an
      operator means that the element or content particle must appear exactly
      once.
      Exceptions:
      - EInvalid_Character_Err
         Raised if the Frequency to be set is neither '+', nor '*', nor '?', nor
         an empty string.</literallayout>
                  </para>
               </listitem>
               <listitem>
                  <para>
                      
(+) property Code: WideString (readonly) (inherited from TdomNode)
                     <literallayout>
      Returns the cooresponding XML-code of the node and all its children.
      Exceptions:
      - ENot_Supported_Err
         Raised if the TdomSequenceParticle has no child nodes.</literallayout>
                  </para>
               </listitem>
            </itemizedlist>
         </para>
         <para>
            <emphasis>Public Methods</emphasis>
         </para>
         <para>
            <itemizedlist>
               <listitem>
                  <para>
                      
(+) constructor Create(const AOwner: TdomDocument; 
	                   const Freq: WideString); virtual;
                     <literallayout>
	  Creates a new instance of a TdomSequenceParticle object. Developers should
	  not call 'create' directly. Instead they should use the appropriate
	  methode of a TdomDocument object.
      Parameters:
      - AOwner
         The TdomDocument that creates the TdomSequenceParticle.
      - Freq
         The frequency of the sequence list.
      Exceptions:
      - EInvalid_Character_Err
         Raised if an invalid frequency is specified.</literallayout>
                  </para>
               </listitem>
            </itemizedlist>
         </para>
      </sect1>
      <sect1>
         <title>TdomChoiceParticle = class (TdomParticle) (+)</title>
         <para>This object represents a choice list of content particles which
         is part of an element type declaration in the DTD (see section 3.2.1 of
         the XML 1.0 specification).

</para>
         <para>
            <emphasis>Properties</emphasis>
         </para>
         <para>
            <itemizedlist>
               <listitem>
                  <para>
                      
(+) property Frequency: WideString
                     <literallayout>
      The optional character following a choice list which governs whether the
      element or the content particles in the list may occur one or more ('+'),
      zero or more ('*'), or zero or one times ('?'). The absence of such an
      operator means that the element or content particle must appear exactly
      once.
      Exceptions:
      - EInvalid_Character_Err
         Raised if the Frequency to be set is neither '+', nor '*', nor '?', nor
         an empty string.</literallayout>
                  </para>
               </listitem>
               <listitem>
                  <para>
                      
(+) property Code: WideString (readonly) (inherited from TdomNode)
                     <literallayout>
      Returns the cooresponding XML-code of the node and all its children.
      Exceptions:
      - ENot_Supported_Err
         Raised if the TdomSequenceParticle has no child nodes.</literallayout>
                  </para>
               </listitem>
            </itemizedlist>
         </para>
         <para>
            <emphasis>Public Methods</emphasis>
         </para>
         <para>
            <itemizedlist>
               <listitem>
                  <para>
                      
(+) constructor Create(const AOwner: TdomDocument; 
	                   const Freq: WideString); virtual;
                     <literallayout>
	  Creates a new instance of a TdomChoiceParticle object. Developers should
	  not call 'create' directly. Instead they should use the appropriate
	  methode of a TdomDocument object.
      Parameters:
      - AOwner
         The TdomDocument that creates the TdomChoiceParticle.
      - Freq
         The frequency of the choice list.
      Exceptions:
      - EInvalid_Character_Err
         Raised if an invalid frequency is specified.</literallayout>
                  </para>
               </listitem>
            </itemizedlist>
         </para>
      </sect1>
      <sect1>
         <title>TdomPcdataChoiceParticle = class (TdomParticle) (+)</title>
         <para>This object represents a list of mixed content which is part of
         an element type declaration in the DTD (see section 3.2.2 of the XML
         1.0 specification).  The Frequency of the new TdomDataChoiceParticle
         must always be '*', since mixed content always may appear zero or more
         times. In that case it does not matter that XML allows the notation
         (#PCDATA), because it is aequivalent to (#PCDATA)*.

</para>
         <para>
            <emphasis>Properties</emphasis>
         </para>
         <para>
            <itemizedlist>
               <listitem>
                  <para>
                      
(+) property Frequency: WideString
                     <literallayout>
      This must always remain '*'.
      Exceptions:
      - EInvalid_Character_Err
         Raised if the Frequency to be set is not '*'.</literallayout>
                  </para>
               </listitem>
            </itemizedlist>
         </para>
         <para>
            <emphasis>Public Methods</emphasis>
         </para>
         <para>
            <itemizedlist>
               <listitem>
                  <para>
                      
(+) constructor Create(const AOwner: TdomDocument; 
	                   const Freq: WideString); virtual;
                     <literallayout>
	  Creates a new instance of a TdomChoiceParticle object. Developers should
	  not call 'create' directly. Instead they should use the appropriate
	  methode of a TdomDocument object.
      Parameters:
      - AOwner
         The TdomDocument that creates the TdomChoiceParticle.
      - Freq
         The frequency of the choice list.
      Exceptions:
      - EInvalid_Character_Err
         Raised if the specified frequency is not '*'.</literallayout>
                  </para>
               </listitem>
            </itemizedlist>
         </para>
      </sect1>
      <sect1>
         <title>TdomElementParticle = class (TdomParticle) (+)</title>
         <para>This object represents a single content particle which is part of
         an element type declaration in the DTD (see section 3.2.1 of the XML
         1.0 specification).

</para>
         <para>
            <emphasis>Properties</emphasis>
         </para>
         <para>
            <itemizedlist>
               <listitem>
                  <para>
                      
(+) property Frequency: WideString
                     <literallayout>
      The optional character following a single particle which governs whether
      the element or the content particles in the list may occur one or more
      ('+'), zero or more ('*'), or zero or one times ('?'). The absence of such
      an operator means that the element or content particle must appear exactly
      once.
      Exceptions:
      - EInvalid_Character_Err
         Raised if the Frequency to be set is neither '+', nor '*', nor '?', nor
         an empty string.</literallayout>
                  </para>
               </listitem>
            </itemizedlist>
         </para>
         <para>
            <emphasis>Public Methods</emphasis>
         </para>
         <para>
            <itemizedlist>
               <listitem>
                  <para>
                      
(+) constructor Create(const AOwner: TdomDocument; 
	                   const Name,
					         Freq: WideString); virtual;
                     <literallayout>
	  Creates a new instance of a TdomElementParticle object. Developers should
	  not call 'create' directly. Instead they should use the appropriate
	  methode of a TdomDocument object.
      Parameters:
      - AOwner
         The TdomDocument that creates the TdomElementParticle.
      - Name
         The name of the single particle.
      - Freq
         The frequency of the single particle.
      Exceptions:
      - EInvalid_Character_Err
         Raised if an invalid name or frequency is specified.</literallayout>
                  </para>
               </listitem>
            </itemizedlist>
         </para>
      </sect1>
      <sect1>
         <title>TdomCustomEntity = class (TdomCustomDeclaration) (+)</title>
         <para>TdomCustomEntity is the common parent class of TdomEntity and
         TdomParameterEntity.  You should not use this node type in your Delphi
         projects.

          </para>
      </sect1>
      <sect1>
         <title>TdomEntity = class (TdomCustomEntity) (*)</title>
         <para>This interface represents an entity, either parsed or unparsed,
         in an XML document. Note that this models the entity itself not the
         entity declaration.
</para>
         <para>
The nodeName attribute that is inherited from Node contains the name of the
entity.
</para>
         <para>
XML does not mandate that a non-validating XML processor read and process entity
declarations made in the external subset or declared in external parameter
entities. This means that parsed entities declared in the external subset need
not be expanded by some classes of applications, and that the replacement value
of the entity may not be available. When the replacement value is available, the
corresponding Entity node's child list represents the structure of that
replacement text. Otherwise, the child list is empty.
</para>
         <para>
An Entity node does not have any parent. 
	 
</para>
         <para>
            <emphasis>Properties</emphasis>
         </para>
         <para>
            <itemizedlist>
               <listitem>
                  <para>
                      
    property PublicId: WideString (readonly)
                     <literallayout>
      The public identifier for the entity. If the public identifier was not
      specified, this is an empty string.</literallayout>
                  </para>
               </listitem>
               <listitem>
                  <para>
                      
    property SystemId: WideString  (readonly)
                     <literallayout>
      The system identifier for the entity. If the system identifier was not
      specified, this is an empty string.</literallayout>
                  </para>
               </listitem>
               <listitem>
                  <para>
                      
(+) property IsInternalEntity: boolean (readonly
                     <literallayout>)
      Returns 'true' if the entity is an internal entity; otherwise 'false' is
      returned.</literallayout>
                  </para>
               </listitem>
               <listitem>
                  <para>
                      
    property NotationName: WideString  (readonly)
                     <literallayout>
      For unparsed entities, the name of the notation for the entity. For parsed
      entities, this is an empty string.</literallayout>
                  </para>
               </listitem>
               <listitem>
                  <para>
                      
(+) property ParentDocumentType: TdomDocumentType (readonly)
                     <literallayout>
      The parent TdomDocumentType of the given TdomEntity
      instance.</literallayout>
                  </para>
               </listitem>
               <listitem>
                  <para>
                      
(+) property Value: WideString
                     <literallayout> 
      When used to get the Value of a TdomEntity, returns the value of the
      TdomEntity as a WideString. Character and general entity references are
      replaced with their values in the returned string. When used to set the
      value of an TdomEntity, creates a TdomText node with the unparsed contents
      of the WideString.</literallayout>
                  </para>
               </listitem>
            </itemizedlist>
         </para>
         <para>
            <emphasis>Public Methods</emphasis>
         </para>
         <para>
            <itemizedlist>
               <listitem>
                  <para>
                      
    constructor Create(const AOwner: TdomDocument;
                       const Name,
                             PubId,
                             SysId,
                             NotaName: WideString); virtual;
                     <literallayout>
      Creates a new instance of a TdomEntity object. Developers should not call
      'create' directly. Instead they should use the appropriate methode of a
      TdomDocument object.
      Parameters:
      - AOwner
         The TdomDocument that creates the TdomEntity
      - name
         The name of the TdomEntity.
      - PubId 
         The public identifier for the entity. If the public identifier was not
         specified, this is an empty string. 
      - SysId 
         The system identifier for the entity. If the system identifier was not
         specified, this is an empty string. 
      - NotaName 
         The name of the notation of the entity.
      Exceptions:
      - EInvalid_Character_Err
         Raised if an invalid name, PubId or SysId is specified.</literallayout>
                  </para>
               </listitem>
            </itemizedlist>
         </para>
      </sect1>
      <sect1>
         <title>TdomParameterEntity = class (TdomCustomEntity) (+)</title>
         <para>This interface represents an parameter entity in the DTD.  
</para>
         <para>
A ParameterEntity node does not have any parent. 

</para>
         <para>
            <emphasis>Properties</emphasis>
         </para>
         <para>
            <itemizedlist>
               <listitem>
                  <para>
                      
(+) property PublicId: WideString (readonly)
                     <literallayout>
      The public identifier for the parameter entity. If the public identifier
      was not specified, this is nil.</literallayout>
                  </para>
               </listitem>
               <listitem>
                  <para>
                      
(+) property SystemId: WideString  (readonly)
                     <literallayout>
      The system identifier for the parameter entity. If the system identifier
      was not specified, this is nil.</literallayout>
                  </para>
               </listitem>
               <listitem>
                  <para>
                       
(+) property IsInternalEntity: boolean (readonly)
                     <literallayout>
      Returns 'true' if the parameter entity is an internal entity; otherwise
      'false' is returned.</literallayout>
                  </para>
               </listitem>
               <listitem>
                  <para>
                      
(+) property ParentDocumentType: TdomDocumentType (readonly)
                     <literallayout>
      The parent TdomDocumentType of the given TdomParameterEntity
      instance.</literallayout>
                  </para>
               </listitem>
               <listitem>
                  <para>
                      
(+) property Value: WideString
                     <literallayout> 
      When used to get the Value of a TdomParameterEntity, returns the value of
      the TdomParameterEntity as a WideString. Character and general entity
      references are replaced with their values in the returned string. When
      used to set the Value of an TdomParameterEntity, creates a TdomText node
      with the unparsed contents of the WideString.</literallayout>
                  </para>
               </listitem>
            </itemizedlist>
         </para>
         <para>
            <emphasis>Public Methods</emphasis>
         </para>
         <para>
            <itemizedlist>
               <listitem>
                  <para>
                      
(+) constructor Create(const AOwner: TdomDocument;
                       const Name,
                             PubId,
                             SysId: WideString); virtual;
                     <literallayout>
      Creates a new instance of a TdomParameterEntity object. Developers should
      not call 'create' directly. Instead they should use the appropriate
      methode of a TdomDocument object.
      Parameters:
      - AOwner
         The TdomDocument that creates the TdomParameterEntity
      - name
         The name of the TdomParameterEntity.
      - PubId 
         The public identifier for the TdomParameterEntity. If the public
         identifier was not specified, this is an empty string. 
      - SysId 
         The system identifier for the TdomParameterEntity. If the system
         identifier was not specified, this is an empty string. 
      Exceptions:
      - EInvalid_Character_Err
         Raised if an invalid name, PubId or SysId is specified.</literallayout>
                  </para>
               </listitem>
            </itemizedlist>
         </para>
      </sect1>
      <sect1>
         <title>TdomEntityDeclaration = class (TdomCustomEntity) (+)</title>
         <para>This interface represents an entity declaration in the DTD. The
         nodeName attribute that is inherited from TdomNode contains the name of
         the entity. If its an internal entity, the nodeValue attribute that is
         inherited from TdomNode contains the entity value.

</para>
         <para>
            <emphasis>Properties</emphasis>
         </para>
         <para>
            <itemizedlist>
               <listitem>
                  <para>
                      
(+) property ExtParsedEnt: TdomExternalParsedEntity
                     <literallayout>
      If the declared entity is internal, this is nil. If the declared entity is
      external, this may point to its corresponding external parsed entity node.
      Trying to set a TdomExternalParsedEntity for an internal entity will raise
      an ENo_External_Entity_Allowed_Err.</literallayout>
                  </para>
               </listitem>
               <listitem>
                  <para>
                      
(+) property IsInternalEntity: boolean (readonly)
                     <literallayout>
      Returns 'true' if the entity is an internal entity; otherwise 'false' is
      returned.</literallayout>
                  </para>
               </listitem>
               <listitem>
                  <para>
                      
(+) property NotationName: WideString  (readonly)
                     <literallayout>
      For unparsed entities, the name of the notation for the entity. For parsed
      entities, this is nil.</literallayout>
                  </para>
               </listitem>
               <listitem>
                  <para>
                      
(+) property ParentDocumentType: TdomDocumentType (readonly)
                     <literallayout>
      The parent TdomDocumentType of the given TdomEntity
      instance.</literallayout>
                  </para>
               </listitem>
               <listitem>
                  <para>
                      
(+) property PublicId: WideString (readonly)
                     <literallayout>
      The public identifier for the entity. If the public identifier was not
      specified, this is nil.</literallayout>
                  </para>
               </listitem>
               <listitem>
                  <para>
                      
(+) property SystemId: WideString  (readonly)
                     <literallayout>
      The system identifier for the entity. If the system identifier was not
      specified, this is nil.</literallayout>
                  </para>
               </listitem>
               <listitem>
                  <para>
                      
(+) property Value: WideString
                     <literallayout> 
      When used to get the Value of a TdomEntity, returns the value of the
      TdomEntity as a WideString. Character and general entity references are
      replaced with their values in the returned string. When used to set the
      Value of an TdomEntity, creates a TdomText node with the unparsed contents
      of the WideString.</literallayout>
                  </para>
               </listitem>
            </itemizedlist>
         </para>
         <para>
            <emphasis>Public Methods</emphasis>
         </para>
         <para>
            <itemizedlist>
               <listitem>
                  <para>
                      
(+) constructor Create(const AOwner: TdomDocument;
                       const Name,
                             PubId,
                             SysId,
                             NotaName: WideString); virtual;
                     <literallayout>
      Creates a new instance of a TdomEntityDeclaration object. Developers
      should not call 'create' directly. Instead they should use the appropriate
      methode of a TdomDocument object.
      Parameters:
      - AOwner
         The TdomDocument that creates the TdomEntityDeclaration.
      - name
         The name of the TdomEntityDeclaration.
      - PubId 
         The public identifier for the TdomEntityDeclaration. If the public
         identifier was not specified, this is an empty string. 
      - SysId 
         The system identifier for the TdomEntityDeclaration. If the system
         identifier was not specified, this is an empty string. 
      - NotaName 
         The name of the notation of the TdomEntityDeclaration.
      Exceptions:
      - EInvalid_Character_Err
         Raised if an invalid name, PubId or SysId is specified.</literallayout>
                  </para>
               </listitem>
            </itemizedlist>
         </para>
      </sect1>
      <sect1>
         <title>TdomParameterEntityDeclaration = class (TdomCustomEntity)
         (+)</title>
         <para>This interface represents a parameter entity declaration in the
         DTD. The nodeName attribute that is inherited from TdomNode contains
         the name of the entity. If its an internal entity, the nodeValue
         attribute that is inherited from TdomNode contains the entity value.

</para>
         <para>
            <emphasis>Properties</emphasis>
         </para>
         <para>
            <itemizedlist>
               <listitem>
                  <para>
                      
(+) property ExtParamEnt: TdomExternalParameterEntity
                     <literallayout>
      If the declared parameter entity is internal, this is nil. If the declared
      parameter entity is external, this may point to its corresponding external
      parameter entity node. Trying to set a TdomExternalParameterEntity for an
      internal entity will raise an
      ENo_External_Entity_Allowed_Err.</literallayout>
                  </para>
               </listitem>
               <listitem>
                  <para>
                      
(+) property IsInternalEntity: boolean (readonly)
                     <literallayout>
      Returns 'true' if the parameter entity is an internal entity; otherwise
      'false' is returned.</literallayout>
                  </para>
               </listitem>
               <listitem>
                  <para>
                      
(+) property ParentDocumentType: TdomDocumentType (readonly)
                     <literallayout>
      The parent TdomDocumentType of the given TdomParameterEntity
      instance.</literallayout>
                  </para>
               </listitem>
               <listitem>
                  <para>
                      
(+) property PublicId: WideString (readonly)
                     <literallayout>
      The public identifier for the parameter entity. If the public identifier
      was not specified, this is nil.</literallayout>
                  </para>
               </listitem>
               <listitem>
                  <para>
                      
(+) property SystemId: WideString  (readonly)
                     <literallayout>
      The system identifier for the parameter entity. If the system identifier
      was not specified, this is nil.</literallayout>
                  </para>
               </listitem>
               <listitem>
                  <para>
                      
(+) property Value: WideString
                     <literallayout> 
      When used to get the Value of a TdomParameterEntity, returns the value of
      the TdomParameterEntity as a WideString. Character and general entity
      references are replaced with their values in the returned string. When
      used to set the Value of an TdomParameterEntity, creates a TdomText node
      with the unparsed contents of the WideString.</literallayout>
                  </para>
               </listitem>
            </itemizedlist>
         </para>
         <para>
            <emphasis>Public Methods</emphasis>
         </para>
         <para>
            <itemizedlist>
               <listitem>
                  <para>
                      
(+) constructor Create(const AOwner: TdomDocument;
                       const Name,
                             PubId,
                             SysId: WideString); virtual;
                     <literallayout>
      Creates a new instance of a TdomEntity object. Developers should not call
      'create' directly. Instead they should use the appropriate methode of a
      TdomDocument object.
      Parameters:
      - AOwner
         The TdomDocument that creates the TdomParameterEntityDeclaration
      - name
         The name of the TdomParameterEntityDeclaration.
      - PubId 
         The public identifier for the TdomParameterEntityDeclaration. If the
         public identifier was not specified, this is nil. 
      - SysId 
         The system identifier for the TdomParameterEntityDeclaration. If the
         system identifier was not specified, this is nil. 
      Exceptions:
      - EInvalid_Character_Err
         Raised if an invalid name, PubId or SysId is specified.</literallayout>
                  </para>
               </listitem>
            </itemizedlist>
         </para>
      </sect1>
      <sect1>
         <title>TdomReference (+)</title>
         <para>TdomReference is the common parent class of TdomEntityReference
         and TdomParameterEntityReference.  You should not use this node type in
         your Delphi projects.

          </para>
      </sect1>
      <sect1>
         <title>TdomEntityReference = class (TdomReference)</title>
         <para>TdomEntityReference objects may be inserted into the structure
         model when an entity reference is in the source document, or when the
         user wishes to insert an entity reference. Note that character entities
         are considered to be expanded by the HTML or XML processor so that
         characters are represented by their Unicode equivalent rather than by
         an entity reference. The replacement value of the referenced Entity, if
         available, appears in the child list of the TdomEntityReference object.
         Alternatively, the XML processor may completely expand references to
         entities while building the structure model, instead of providing
         EntityReference objects.
</para>
         <para>
XML does not mandate that a non-validating XML processor read and process entity
declarations made in the external subset or declared in external parameter
entities. This means that parsed entities declared in the external subset need
not be expanded by some classes of applications, and that the replacement value
of the entity may not be available. 
</para>
         <para>
The resolution of the children of the EntityReference (the replacement value of
the referenced entity) may be lazily evaluated; actions by the user (such as
calling the childNodes method on the EntityReference Node) are assumed to
trigger the evaluation. 

</para>
         <para>
            <emphasis>Properties</emphasis>
         </para>
         <para>
            <itemizedlist>
               <listitem>
                  <para>
                      
(+) property Declaration: TdomCustomEntity (readonly)
                     <literallayout>
      Points to the declaration of the entity reference.</literallayout>
                  </para>
               </listitem>
            </itemizedlist>
         </para>
         <para>
            <emphasis>Public Methods</emphasis>
         </para>
         <para>
            <itemizedlist>
               <listitem>
                  <para>
                      
    constructor Create(const AOwner: TdomDocument;
                       const Name); override;
                     <literallayout>
      Creates a new instance of a TdomEntityReference object. Developers should
      not call 'create' directly. Instead they should use the appropriate
      methode of a TdomDocument object.
      Parameters:
      - AOwner
         The TdomDocument that creates the TdomEntityReference.
      - name
         The name of the TdomEntityReference.
      Exceptions:
      - EInvalid_Character_Err
         Raised if an invalid name is specified.</literallayout>
                  </para>
               </listitem>
            </itemizedlist>
         </para>
      </sect1>
      <sect1>
         <title>TdomParameterEntityReference (+)</title>
         <para>This interface represents a parameter entity reference in the
         DTD.  

</para>
         <para>
            <emphasis>Properties</emphasis>
         </para>
         <para>
            <itemizedlist>
               <listitem>
                  <para>
                      
(+) property Declaration: TdomCustomEntity (readonly)
                     <literallayout>
      Points to the declaration of the parameter entity
      reference.</literallayout>
                  </para>
               </listitem>
            </itemizedlist>
         </para>
         <para>
            <emphasis>Public Methods</emphasis>
         </para>
         <para>
            <itemizedlist>
               <listitem>
                  <para>
                      
(+) constructor Create(const AOwner: TdomDocument;
                       const Name); override;
                     <literallayout>
      Creates a new instance of a TdomParameterEntityReference object.
      Developers should not call 'create' directly. Instead they should use the
      appropriate methode of a TdomDocument object.
      Parameters:
      - AOwner
         The TdomDocument that creates the TdomParameterEntityReference.
      - name
         The name of the TdomParameterEntityReference.
      Exceptions:
      - EInvalid_Character_Err
         Raised if an invalid name is specified.</literallayout>
                  </para>
               </listitem>
            </itemizedlist>
         </para>
      </sect1>
      <sect1>
         <title>TdomExternalParsedEntity = class (TdomNode) (+)</title>
         <para>This node contains an analyzed external entity.  The ExtParsedEnt
         property of a TdomEntityDeclaration may refere to it.
         TdomExternalParsedEntity owns exactly the same properties and methods
         than TdomNode.

          </para>
      </sect1>
      <sect1>
         <title>TdomExternalParameterEntity = class (TdomNode) (+)</title>
         <para>This node contains an analyzed parameter entity.  The ExtParamEnt
         property of a TdomParameterEntityDeclaration may refere to it.
         TdomExternalParameterEntity owns exactly the same properties and
         methods than TdomNode.

          </para>
      </sect1>
      <sect1>
         <title>TdomTextDeclaration = class (TdomNode) (+)</title>
         <para>This represents an optional text declaration at the beginning of
         an external entity.

</para>
         <para>
            <emphasis>Properties</emphasis>
         </para>
         <para>
            <itemizedlist>
               <listitem>
                  <para>
                      
(+) property VersionNumber: WideString (readonly)
                     <literallayout>
      The version number of the XML declaration. An EInvalid_Character_Err is
      raised if an invalid version number is specified.</literallayout>
                  </para>
               </listitem>
               <listitem>
                  <para>
                      
(+) property EncodingDecl: WideString
                     <literallayout> 
      The encoding declaration of the XML declaration. An EInvalid_Character_Err
      is raised if an invalid name is specified.</literallayout>
                  </para>
               </listitem>
            </itemizedlist>
         </para>
         <para>
            <emphasis>Public Methods</emphasis>
         </para>
         <para>
            <itemizedlist>
               <listitem>
                  <para>
                      
(+) constructor Create(const AOwner: TdomDocument; const Version, EncDl:
WideString); virtual;
                     <literallayout>
	  Creates a new instance of a TdomTextDeclaration object. Developers should
	  not call 'create' directly. Instead they should use the appropriate
	  methode of a TdomDocument object.
      Parameters:
      - AOwner
         The TdomDocument that creates the TdomTextDeclaration.
      - Version
         The version number of the XML declaration.
      - EncDl
         The encoding declaration of the XML declaration.</literallayout>
                  </para>
               </listitem>
            </itemizedlist>
         </para>
      </sect1>
      <sect1>
         <title>TdomExternalSubset = class (TdomCustomDocumentType) (+)</title>
         <para>This object represents the external subset of a DTD. Note, that a
         TdomExternalSubset cannot be removed from its parent TdomDocumentType,
         since TdomDocumentTypes are readonly.

</para>
         <para>
            <emphasis>Properties</emphasis>
         </para>
         <para>
            <itemizedlist>
               <listitem>
                  <para>
                      
(+) property AttributeLists: TdomNamedNodeMap (readonly)
                     <literallayout>
      This is a NamedNodeMap containing the attribute lists declared in the
      external subset.</literallayout>
                  </para>
               </listitem>
               <listitem>
                  <para>
                      
(+) property Data: WideString
                     <literallayout>
      A WideString that holds the content of the external
      subset.</literallayout>
                  </para>
               </listitem>
               <listitem>
                  <para>
                      
(+) property ParameterEntities: TdomNamedNodeMap (readonly)
                     <literallayout>
      This is a NamedNodeMap containing the parameter entities declared in the
      external subset.</literallayout>
                  </para>
               </listitem>
            </itemizedlist>
         </para>
      </sect1>
      <sect1>
         <title>TdomInternalSubset = class (TdomCustomDocumentType) (+)</title>
         <para>This object represents the internal subset of a DTD. Note, that a
         TdomInternalSubset cannot be removed from its parent TdomDocumentType,
         since TdomDocumentTypes are readonly.

</para>
         <para>
            <emphasis>Properties</emphasis>
         </para>
         <para>
            <itemizedlist>
               <listitem>
                  <para>
                      
(+) property AttributeLists: TdomNamedNodeMap (readonly)
                     <literallayout>
      This is a NamedNodeMap containing the attribute lists declared in the
      internal subset.</literallayout>
                  </para>
               </listitem>
               <listitem>
                  <para>
                      
(+) property Data: WideString
                     <literallayout>
      A WideString that holds the content of the internal subset; i.e. all the
      characters between the inner brackets of the XML document type declaration
      '[' and ']'.</literallayout>
                  </para>
               </listitem>
               <listitem>
                  <para>
                      
(+) property ParameterEntities: TdomNamedNodeMap (readonly)
                     <literallayout>
      This is a NamedNodeMap containing the parameter entities declared in the
      internal subset.</literallayout>
                  </para>
               </listitem>
            </itemizedlist>
         </para>
      </sect1>
   </chapter>
   <chapter>
      <title>The Implementation of the XML Parser (+)</title>
      <para>Note, that specifications for an XML parser are not part of DOM
      Level 2. So all classes presented here are additional to the DOM and may
      change when DOM Level 3 is released.
</para>
      <sect1>
         <title>Exceptions</title>
         <para>
            <itemizedlist>
               <listitem>
                  <para>
EParserException = class(Exception);
</para>
               </listitem>
               <listitem>
                  <para>
EParserMissingWhiteSpace_Err = class(EParserException);
</para>
               </listitem>
               <listitem>
                  <para>
EParserMissingQuotationMark_Err = class(EParserException);
</para>
               </listitem>
               <listitem>
                  <para>
EParserMissingEqualitySign_Err = class(EParserException);
</para>
               </listitem>
               <listitem>
                  <para>
EParserDoubleEqualitySign_Err = class(EParserException);
</para>
               </listitem>
               <listitem>
                  <para>
EParserInvalidElementName_Err = class(EParserException);
</para>
               </listitem>
               <listitem>
                  <para>
EParserInvalidAttributeName_Err = class(EParserException);
</para>
               </listitem>
               <listitem>
                  <para>
EParserInvalidAttributeValue_Err = class(EParserException);
</para>
               </listitem>
               <listitem>
                  <para>
EParserDoubleAttributeName_Err = class(EParserException);
</para>
               </listitem>
               <listitem>
                  <para>
EParserInvalidEntityName_Err = class(EParserException);
</para>
               </listitem>
               <listitem>
                  <para>
EParserInvalidProcessingInstruction_Err = class(EParserException);
</para>
               </listitem>
               <listitem>
                  <para>
EParserInvalidXmlDeclaration_Err = class(EParserException);
</para>
               </listitem>
               <listitem>
                  <para>
EParserInvalidCharRef_Err = class(EParserException);
</para>
               </listitem>
               <listitem>
                  <para>
EParserMissingStartTag_Err = class(EParserException);
</para>
               </listitem>
               <listitem>
                  <para>
EParserInvalidEndTag_Err = class(EParserException);
</para>
               </listitem>
               <listitem>
                  <para>
EParserInvalidCharacter_Err = class(EParserException);
</para>
               </listitem>
               <listitem>
                  <para>
EParserNotInRoot_Err = class(EParserException);
</para>
               </listitem>
               <listitem>
                  <para>
EParserDoubleRootElement_Err = class(EParserException);
</para>
               </listitem>
               <listitem>
                  <para>
EParserRootNotFound_Err = class(EParserException);
</para>
               </listitem>
               <listitem>
                  <para>
EParserWrongOrder_Err = class(EParserException);
</para>
               </listitem>
               <listitem>
                  <para>
EParserInvalidDoctype_Err = class(EParserException);
</para>
               </listitem>
               <listitem>
                  <para>
EParserInvalidTextDeclaration_Err = class(EParserException);
</para>
               </listitem>
               <listitem>
                  <para>
EParserDoubleDoctype_Err = class(EParserInvalidDoctype_Err);
</para>
               </listitem>
               <listitem>
                  <para>
EParserInvalidEntityDeclaration_Err = class(EParserInvalidDoctype_Err);
</para>
               </listitem>
               <listitem>
                  <para>
EParserInvalidElementDeclaration_Err = class(EParserInvalidDoctype_Err);
</para>
               </listitem>
               <listitem>
                  <para>
EParserInvalidAttributeDeclaration_Err = class(EParserInvalidDoctype_Err);
</para>
               </listitem>
               <listitem>
                  <para>
EParserInvalidNotationDeclaration_Err = class(EParserInvalidDoctype_Err);
</para>
               </listitem>
               <listitem>
                  <para>
EParserInvalidConditionalSection_Err = class(EParserInvalidDoctype_Err);
</para>
               </listitem>
            </itemizedlist>
         </para>
      </sect1>
      <sect1>
         <title>General Functions</title>
         <para>
            <itemizedlist>
               <listitem>
                  <para> 
procedure XMLAnalysePCDATA(Source: WideString;
                           var Lines: TStringList);
</para>
               </listitem>
               <listitem>
                  <para> 
procedure XMLAnalyseTag(const Source: WideString;
                        var TagName,
                            AttribSequence: WideString);
</para>
               </listitem>
               <listitem>
                  <para> 
procedure XMLAnalyseEntityDef(    Source: WideString;
                              var EntityValue,
                                  SystemLiteral,
                                  PubidLiteral,
                                  NDataName: WideString;
                              var Error: boolean);
</para>
               </listitem>
               <listitem>
                  <para> 
procedure XMLAnalyseNotationDecl(const Decl: WideString;
                                   var SystemLiteral,
                                       PubidLiteral: WideString;
                                   var Error: boolean);
</para>
               </listitem>
               <listitem>
                  <para> 
procedure XMLIsolateQuote(    Source: WideString;
                          var content,
                              rest: WideString;
                          var QuoteType: WideChar;
                          var Error: boolean);
</para>
               </listitem>
               <listitem>
                  <para> 
function  XMLTrunc(const Source: WideString): WideString;
</para>
               </listitem>
               <listitem>
                  <para> 
procedure XMLTruncAngularBrackets(const Source: WideString;
                                    var content: WideString;
                                    var Error: boolean);
</para>
               </listitem>
               <listitem>
                  <para> 
procedure XMLTruncRoundBrackets(const Source: WideString;
                                  var content: WideString;
                                  var Error: boolean);
</para>
               </listitem>
               <listitem>
                  <para> 
function  XMLAnalysePubSysId(const PublicId,
                                   SystemId,
                                   NotaName: WideString): WideString;
</para>
               </listitem>
            </itemizedlist>
         </para>
      </sect1>
      <sect1>
         <title> General Classes</title>
         <para>
            <itemizedlist>
               <listitem>
                  <para> 
TXmlParserLanguage = (de,en);
</para>
               </listitem>
               <listitem>
                  <para> 
TdomPieceType = (xmlProcessingInstruction,xmlXmlDeclaration,
                 xmlTextDeclaration,xmlComment,xmlCDATA,xmlPCDATA,
                 xmlDoctype,xmlStartTag,xmlEndTag,xmlEmptyElementTag,
                 xmlCharRef,xmlEntityRef,xmlParameterEntityRef,
                 xmlEntityDecl,xmlElementDecl,xmlAttributeDecl,
                 xmlNotationDecl,xmlCharacterError);
</para>
               </listitem>
               <listitem>
                  <para> 
TdomEncodingType = (etUTF8,etUTF16BE,etUTF16LE);
</para>
               </listitem>
            </itemizedlist>
         </para>
      </sect1>
      <sect1>
         <title>TXmlMemoryStream = class(TMemoryStream)</title>
         <para>
This class defines a stream that is used in the TXmlToDomParser interface. It is
identical with the Delphi class TMemoryStream apart from that it makes the
procedure 'SetPointer(Ptr: Pointer; Size: Longint)' public which is functionally
identical with the SetPointer procedure of the Delphi class TCustomMemoryStream.
See the Delphi Online Help for details.
          </para>
      </sect1>
      <sect1>
         <title>TXmlInputSource</title>
         <para>
This class encapsulates information about a parser's input source in a single
object.

</para>
         <para>
            <emphasis>Properties</emphasis>
         </para>
         <para>
            <itemizedlist>
               <listitem>
                  <para>
                      
    property Encoding: TdomEncodingType (readonly)
                     <literallayout>
      The encoding type of the input source, which is either 'etUTF8',
      'etUTF16BE', or 'etUTF16LE'.</literallayout>
                  </para>
               </listitem>
               <listitem>
                  <para>
                      
    property PublicId: WideString (readonly)
                     <literallayout>
      The public identifier of the input source.</literallayout>
                  </para>
               </listitem>
               <listitem>
                  <para>
                      
    property Stream: TStream (readonly)
                     <literallayout>
      A stream that contains the text of the input source.</literallayout>
                  </para>
               </listitem>
               <listitem>
                  <para>
                      
    property SystemId: WideString (readonly)
                     <literallayout>
      The system identifier of the input source.</literallayout>
                  </para>
               </listitem>
            </itemizedlist>
         </para>
         <para>
            <emphasis>Public Methods</emphasis>
         </para>
         <para>
            <itemizedlist>
               <listitem>
                  <para>
                      
    constructor create(const Stream: TStream;
                       const PublicId,
                             SystemId: wideString); virtual;
                     <literallayout>
	  Creates a new TXmlInputSource object.  The position of the Stream is set
	  to its first character, i.e. the first byte if the encoding type is UTF-8
	  or the third/fourth byte if the encoding type is UTF-16.
      Parameters:
	  - Stream
          A stream that contains the text of the input source.
      - PublicId
         The public identifier of the input source. 
	  - SystemId
         The system identifier of the input source.</literallayout>
                  </para>
               </listitem>
            </itemizedlist>
         </para>
      </sect1>
      <sect1>
         <title>TXmlParserError</title>
         <para>This class is used in the TXmlToDomParser interface for recording
         errors in the parsed document. A TXmlParserError object represents
         exactly one parsing error.

</para>
         <para>
            <emphasis>Properties</emphasis>
         </para>
         <para>
            <itemizedlist>
               <listitem>
                  <para>
                      
    property ErrorStr: WideString (readonly)
                     <literallayout>
      A WideString that contains a detailed error message.</literallayout>
                  </para>
               </listitem>
               <listitem>
                  <para>
                      
    property ErrorType: ShortString (readonly)
                     <literallayout>
      A ShortString that contains the name of the parsing error according to the
      list above (see 3.1. above).</literallayout>
                  </para>
               </listitem>
               <listitem>
                  <para>
                      
    property StartLine: integer (readonly)
                     <literallayout>
      The number of the first line of the code that caused the parsing
      error.</literallayout>
                  </para>
               </listitem>
               <listitem>
                  <para>
                      
    property EndLine: integer (readonly)
                     <literallayout>
      The number of the line line of the code that caused the parsing
      error.</literallayout>
                  </para>
               </listitem>
            </itemizedlist>
         </para>
         <para>
            <emphasis>Public Methods</emphasis>
         </para>
         <para>
            <itemizedlist>
               <listitem>
                  <para>
                      
    constructor Create(const ErrorType: ShortString;
                       const StartLine,
                             EndLine: integer;
                       const SourceCodeText: WideString;
                       const lang: TXmlParserLanguage); virtual;
                     <literallayout>
	  Creates a new TXmlParserError object.
      Parameters:
	  - ErrorType
         The name of the parsing error.
      - StartLine
         The number of the first line of the code that caused the parsing error. 
      - EndLine
         The number of the last line of the code that caused the parsing error. 
	  - SourceCodeText
         The code that caused the parsing error.
	  - lang
         The language for the detailed error message. Valid values are 'en' for
         English, and 'de' for German.</literallayout>
                  </para>
               </listitem>
            </itemizedlist>
         </para>
      </sect1>
      <sect1>
         <title>Event classes</title>
         <sect2>
            <title>TParserEvent = procedure(Sender: TObject; const  PublicId,
            SystemId: WideString; var extSubset: WideString) of object;</title>
            <para>
               <literallayout>Defines the event class which is used for
               OnExternalSubset events in TXmlToDomParser objects. For a
               describtion of its properties, see below.</literallayout>
            </para>
         </sect2>
      </sect1>
      <sect1>
         <title>TCustomParser = class (TComponent)</title>
         <para>TCustomParser is a general class from which other parsers can be
         derived, such as TXmlToDomParser. For details please refer to the
         source code and the description of the TXmlToDomParser properties and
         functions. You should not use this node type in your Delphi projects.

          </para>
      </sect1>
      <sect1>
         <title>TXmlToDomParser = class (TCustomParser)</title>
         <para>
This component is the fundamental interface to the XML parser which can be
placed as a non-visual component on every formular. Before it can be used a
TdomDocument object must be assigned to its Document property. Currently the
parser supports UTF-8 as well as big endian and little endian UTF-16 files.
Note, that UTF-8 is only compatibel with (7 bit) ASCII, but not with (8 bit)
Latin 1.

</para>
         <para>
            <emphasis>Public properties</emphasis>
         </para>
         <para>
            <itemizedlist>
               <listitem>
                  <para>
                      

    property DocumentSC: TXmlSourceCode
                     <literallayout>
      An TXmlSourceCode object that holds a sequential view of the source code
      of an XML document after using the following methods: FileToDom,
      DocMemoryToDom, DocStreamToDom, DocStringToDom, and
      DocWideStringToDom.</literallayout>
                  </para>
               </listitem>
               <listitem>
                  <para>
                      
    property DOMImpl: TdomImplementation
                     <literallayout>
      The TdomImplementation object to which the document tree will be attached
      while parsing an XML file using the FileToDom method.</literallayout>
                  </para>
               </listitem>
               <listitem>
                  <para>
                      
    property ErrorList: TList (readonly)
                     <literallayout> 
      After parsing a document this property contains a list of all
      TXmlParserError objects that were created during the parsing
      process.</literallayout>
                  </para>
               </listitem>
               <listitem>
                  <para>
                      
    property ErrorStrings: TStringList (readonly)
                     <literallayout> 
      After parsing a document this property contains a list of all detailed
      error messages of the errors that occured during the parsing
      process.</literallayout>
                  </para>
               </listitem>
               <listitem>
                  <para>
                      
    property ExternalSubsetSC: TXmlSourceCode
                     <literallayout>
      An TXmlSourceCode object that holds a sequential view of the source code
      of an XML external subset document after using the following methods:
      FileToDom (only if parsing the external subset has been performed),
      ExtDtdMemoryToDom, ExtDtdStreamToDom, ExtDtdStringToDom, and
      ExtDtdWideStringToDom.</literallayout>
                  </para>
               </listitem>
               <listitem>
                  <para>
                      
    property InternalSubsetSC: TXmlSourceCode
                     <literallayout>
      An TXmlSourceCode object that holds a sequential view of the source code
      of the internal subset of an XML document after using the following
      methods: FileToDom, IntDtdMemoryToDom, IntDtdStreamToDom,
      IntDtdStringToDom, and IntDtdWideStringToDom.</literallayout>
                  </para>
               </listitem>
            </itemizedlist>
         </para>
         <para>
            <emphasis>Published properties</emphasis>
         </para>
         <para>
            <itemizedlist>
               <listitem>
                  <para>
                      
    property Language: TXmlParserLanguage
                     <literallayout>
       The language for the detailed error message (see the 'ErrorStrings'
       property). Valid values are 'en' for English, and 'de' for
       German.</literallayout>
                  </para>
               </listitem>
            </itemizedlist>
         </para>
         <para>
            <emphasis>Events</emphasis>
         </para>
         <para>
            <itemizedlist>
               <listitem>
                  <para>
                     

    property OnExternalSubset: TParserEvent
                     <literallayout>
      TParserEvent = procedure(       Sender: TObject;
                               const  PublicId,
                                      SystemId: WideString;
                                  var extSubset: WideString) of object;
      This event is called when the parser finds an external subset declaration
      in a document's document type definition while parsing a document by the
      FileToDom method.
      Parameters:
	  - Sender
         The parser object that called the event.
      - publicId 
         The public identifier of the external subset declaration.
      - systemId 
         The system identifier of the external subset declaration.
      Return values:
      - extSubset 
         The event routine for OnExternalSubset must return the text of the
         external subset as an UTF-16BE coded wideString, which then will be
         parsed into the 'externalSubsetNode' node of the document's 'doctype'
         node, using the ExtDtdWideStringToDom method. Note, that all parsed
         nodes are readonly.</literallayout>
                  </para>
               </listitem>
            </itemizedlist>
         </para>
         <para>
            <emphasis>Public Methods</emphasis>
         </para>
         <para>
            <itemizedlist>
               <listitem>
                  <para>
                      
    constructor Create(aOwner: TComponent); override;
                     <literallayout>
	  Creates a new TXmlToDomParser object. Note, that TXmlToDomParser objects
	  are automatically being created when adding them from the component's
	  palette onto a form.
      Parameters:
      - AOwner
         The component that holds the new TXmlToDomParser
         object.</literallayout>
                  </para>
               </listitem>
               <listitem>
                  <para>
                      
    function FileToDom(const filename: TFileName): TdomDocument; virtual;
                     <literallayout>
	  Reads an XML document from a data medium and parses both, the whole
	  document as well as its DTD, into a tree of nodes. The Entities property
	  of the TdomDocumentType object of the returned TdomDocuments holds a list
	  of all declared entities including a readonly subtree holding the
	  corresponding entity value. Likewise the Notations property of this
	  TdomDocumentType object holds a list of all declared notations. Entity
	  references in the body of the document are not being resolved (this has
	  been postponed to a later XDOM version). Note, that this procedure only
	  proofs the well-formedness of the document, but is not a non-validating
	  XML processor since it does NOT normalize attribute values or include the
	  replacement text of internal entities. If there is a reference to an
	  external subset in the DTD the event OnExternalSubset (see above) is
	  called, and if it returns the text of an external subset, this is
	  automatically parsed into the 'externalSubsetNode' node of the document's
	  'doctype' node, using the ExtDtdWideStringToDom method. Note, that all
	  parsed nodes of an external subset are readonly.
      Parameters:
	  - filename
         The filename of the document to be parsed.
      Return Value:
         A newly created TdomDocument node containing the resulting document
         tree of the parsing process, or an object of a class derived from
         TdomDocument if this class has previously been registered with the
         specified name (see the describtion of
         TdomImplementation.RegisterDocumentFormat for more details). The
         Filename property of this TdomDocument is set to the specified
         'filename' value. This TdomDocument node is attached to the
         TDOMImplementation object specified by the DOMImpl property at the time
         the function is called -- which means that this TdomDocument node is
         automatically freed, when the TDOMImplementation object is being
         destroyed. However the document can be freed explicitly by calling the
         FreeDocument method of the TDOMImplementation belonging to it. Here is
         a code example:
                procedure parseAndFree;
                var
                  doc: TdomDocument;
                begin
                  doc:= myParser.FileToDom('myFile.xml');
                  ... // Code ommitted here.
                  myParser.DOMImpl.FreeDocument(doc);
                end;
      Exceptions:
      - EParserException
         Raised if the parser stumbles over a non-wellformed entity. Details
         about the XML code that caused the exception are returned in the
         property ErrorList as TXmlParserError objects, as well as in the
         property ErrorStrings as a list of wideStrings.
      - EAccessViolation
         This Delphi exception is raised, if no DOMImpl is assigned or no
         filename specified.
      - EParserException
         Raised if the parser stumbles over a non-wellformed entity. Details
         about the XML code that caused the exception are returned in the
         property ErrorList as TXmlParserError objects, as well as in the
         property ErrorStrings as a list of wideStrings.</literallayout>
                  </para>
               </listitem>
               <listitem>
                  <para>
                      
    procedure DocMemoryToDom(const Ptr: Pointer;
                             const Size: Longint;
                             const RefNode: TdomNode;
                             const readonly: boolean); virtual;
                     <literallayout>
	  Reads an XML document from the computer's memory. If the document to be
	  parsed starts with '$feff' it is assumed, that it is encoded in UTF-16BE;
	  if it starts with '$fffe' it is assumed, that it is encoded in UTF-16LE;
	  otherwise it is assumed, that is is encoded in UTF-8.
      Parameters:
	  - Ptr
         This points to the beginning of the memory block to be parsed.
	  - Size
         The size of the memory block to be parsed.
	  - EncodingType
         The encoding type of the text in the memory block. Valid values are
         'etUTF8', 'etUTF16BE', and 'etUTF16LE'.
	  - RefNode
         The node were the result of the parsing process is to be inserted.
	  - readonly
         If true, all nodes created during the parsing process are readonly. If
         false, only child nodes resulting of parsing entity declarations,
         entity references and parameter entity references are readonly.
         TdomExternalSubset and TdomInternalSubset nodes are never readonly.
      Exceptions:
      - EParserException
         Raised if the parser stumbles over a non-wellformed entity. Details
         about the XML code that caused the exception are returned in the
         property ErrorList as TXmlParserError objects, as well as in the
         property ErrorStrings as a list of wideStrings.</literallayout>
                  </para>
               </listitem>
               <listitem>
                  <para>
                      
    procedure DocSourceCodeToDom(const DocSourceCode: TXmlSourceCode;
                                 const RefNode: TdomNode;
                                 const readonly: boolean); virtual;
                     <literallayout>
	  Parses a sequence of TXmlSourceCodePiece[s] which are listed in the
	  DocSourceCode object into a document tree.  TXmlSourceCodePiece[s]
	  modeling the DTD are not allowed and will raise an EParserException. 
	  - DocSourceCode
         The TXmlSourceCode object to be parsed.
	  - RefNode
         The node were the result of the parsing process is to be inserted.
	  - readonly
         If true, all nodes created during the parsing process are readonly. If
         false, only child nodes resulting of parsing entity declarations,
         entity references and parameter entity references are readonly.
         TdomExternalSubset and TdomInternalSubset nodes are never readonly.
      Exceptions:
      - EParserException
         Raised if the parser stumbles over a non-wellformed entity. Details
         about the XML code that caused the exception are returned in the
         property ErrorList as TXmlParserError objects, as well as in the
         property ErrorStrings as a list of wideStrings.</literallayout>
                  </para>
               </listitem>
               <listitem>
                  <para>
                      
    procedure DocStreamToDom(const Stream: TStream;
                             const RefNode: TdomNode;
                             const readonly: boolean); virtual;
                     <literallayout>
	  Reads an XML document from a stream. If the stream to be parsed starts
	  with '$feff' it is assumed, that it is encoded in UTF-16BE; if it starts
	  with '$fffe' it is assumed, that it is encoded in UTF-16LE; otherwise it
	  is assumed, that is is encoded in UTF-8.
	  - Stream
         The stream to be parsed.
	  - RefNode
         The node were the result of the parsing process is to be inserted.
	  - readonly
         If true, all nodes created during the parsing process are readonly. If
         false, only child nodes resulting of parsing entity declarations,
         entity references and parameter entity references are readonly.
         TdomExternalSubset and TdomInternalSubset nodes are never readonly.
      Exceptions:
      - EParserException
         Raised if the parser stumbles over a non-wellformed entity. Details
         about the XML code that caused the exception are returned in the
         property ErrorList as TXmlParserError objects, as well as in the
         property ErrorStrings as a list of wideStrings.</literallayout>
                  </para>
               </listitem>
               <listitem>
                  <para>
                      
    procedure DocStringToDom(const Str: string;
                             const RefNode: TdomNode;
                             const readonly: boolean); virtual;
                     <literallayout>
	  Reads an XML document that is contained in a string and uses only the
	  following characters: $09, $0A, $xD, $20-$FF.
      Parameters:
	  - Str
         The string to be parsed.
	  - RefNode
         The node were the result of the parsing process is to be inserted.
	  - readonly
         If true, all nodes created during the parsing process are readonly. If
         false, only child nodes resulting of parsing entity declarations,
         entity references and parameter entity references are readonly.
         TdomExternalSubset and TdomInternalSubset nodes are never readonly.
      Exceptions:
      - EParserException
         Raised if the parser stumbles over a non-wellformed entity. Details
         about the XML code that caused the exception are returned in the
         property ErrorList as TXmlParserError objects, as well as in the
         property ErrorStrings as a list of wideStrings.</literallayout>
                  </para>
               </listitem>
               <listitem>
                  <para>
                      
    procedure DocWideStringToDom(      Str: WideString;
                                 const RefNode: TdomNode;
                                 const readonly: boolean); virtual;
                     <literallayout>
	  Reads an XML document that is encoded in UTF-16BE (Unicode) and is
	  contained in a WideString.
      Parameters:
	  - Str
         The WideString to be parsed.
	  - RefNode
         The node were the result of the parsing process is to be inserted.
	  - readonly
         If true, all nodes created during the parsing process are readonly.  If
         false, only child nodes resulting of parsing entity declarations,
         entity references and parameter entity references are readonly.
      Exceptions:
      - EParserException
         Raised if the parser stumbles over a non-wellformed entity. Details
         about the XML code that caused the exception are returned in the
         property ErrorList as TXmlParserError objects, as well as in the
         property ErrorStrings as a list of wideStrings.</literallayout>
                  </para>
               </listitem>
               <listitem>
                  <para>
                      
    procedure ExtDtdMemoryToDom(const Ptr: Pointer;
                                const Size: Longint;
                                const RefNode: TdomNode;
                                const readonly: boolean); virtual;
                     <literallayout>
	  Reads the external subset of a document type definition from the
	  computer's memory. Note, that, unlike XML 1.0 states, parameter entities
	  will only be resolved correctly, if they appear in those places where they
	  might appear in an internal subset, too. A complete XML 1.0 compatible
	  treatment of external subsets has been postponed to a further release of
	  the XDOM. For a describtion of the parameters, see
	  'DocMemoryToDom'.</literallayout>
                  </para>
               </listitem>
               <listitem>
                  <para>
                      
    procedure ExtDtdSourceCodeToDom(const ExtDtdSourceCode: TXmlSourceCode;
                                    const RefNode: TdomNode;
                                    const readonly: boolean); virtual;
                     <literallayout>
	  Parses a sequence of TXmlSourceCodePiece[s] which are listed in the
	  ExtDtdSourceCode object into a document tree.  Only TXmlSourceCodePiece[s]
	  modeling an external subset of a DTD are allowed, otherwise an
	  EParserException will be raised. 
	  - ExtDtdSourceCode
         The TXmlSourceCode object to be parsed.
	  - RefNode
         The node were the result of the parsing process is to be inserted.
      Exceptions:
      - EParserException
         Raised if the parser stumbles over a non-wellformed entity. Details
         about the XML code that caused the exception are returned in the
         property ErrorList as TXmlParserError objects, as well as in the
         property ErrorStrings as a list of wideStrings.</literallayout>
                  </para>
               </listitem>
               <listitem>
                  <para>
                      
    procedure ExtDtdStreamToDom(const Stream: TStream;
                                const RefNode: TdomNode;
                                const readonly: boolean); virtual;
                     <literallayout>
	  Reads the external subset of a document type definition from a stream.
	  Note, that, unlike XML 1.0 states, parameter entities will only be
	  resolved correctly, if they appear in those places where they might appear
	  in an internal subset, too. A completely XML 1.0 compatible treatment of
	  external subsets has been postponed to a further release of the XDOM. For
	  a describtion of the parameters, see 'DocStreamToDom'.</literallayout>
                  </para>
               </listitem>
               <listitem>
                  <para>
                      
    procedure ExtDtdStringToDom(const Str: string;
                                const RefNode: TdomNode;
                                const readonly: boolean); virtual;
                     <literallayout>
	  Reads the external subset of a document type definition from a string.
	  Note, that, unlike XML 1.0 states, parameter entities will only be
	  resolved correctly, if they appear in those places where they might appear
	  in an internal subset, too. A completely XML 1.0 compatible treatment of
	  external subsets has been postponed to a further release of the XDOM. For
	  a describtion of the parameters, see 'DocStringToDom'.</literallayout>
                  </para>
               </listitem>
               <listitem>
                  <para>
                      
    procedure ExtDtdWideStringToDom(      Str: WideString;
                                    const RefNode: TdomNode;
                                    const readonly: boolean); virtual;
                     <literallayout>
	  Reads the external subset of a document type definition from a wideString.
	  Note, that, unlike XML 1.0 states, parameter entities will only be
	  resolved correctly, if they appear in those places where they might appear
	  in an internal subset, too. A completely XML 1.0 compatible treatment of
	  external subsets has been postponed to a further release of the XDOM. For
	  a describtion of the parameters, see 'DocWideStringToDom'.</literallayout>
                  </para>
               </listitem>
               <listitem>
                  <para>
                      
    procedure IntDtdMemoryToDom(const Ptr: Pointer;
                                const Size: Longint;
                                const RefNode: TdomNode;
                                const readonly: boolean); virtual;
                     <literallayout>
	  Reads the internal subset of a document type definition from the
	  computer's memory. For a describtion of the parameters, see
	  'DocMemoryToDom'.</literallayout>
                  </para>
               </listitem>
               <listitem>
                  <para>
                      
    procedure IntDtdSourceCodeToDom(const IntDtdSourceCode: TXmlSourceCode;
                                    const RefNode: TdomNode); virtual;
                     <literallayout>
	  Parses a sequence of TXmlSourceCodePiece[s] which are listed in the
	  IntDtdSourceCode object into a document tree.  Only TXmlSourceCodePiece[s]
	  modeling an internal subset of a DTD are allowed, otherwise an
	  EParserException will be raised. 
	  - IntDtdSourceCode
         The TXmlSourceCode object to be parsed.
	  - RefNode
         The node were the result of the parsing process is to be inserted.
      Exceptions:
      - EParserException
         Raised if the parser stumbles over a non-wellformed entity. Details
         about the XML code that caused the exception are returned in the
         property ErrorList as TXmlParserError objects, as well as in the
         property ErrorStrings as a list of wideStrings.</literallayout>
                  </para>
               </listitem>
               <listitem>
                  <para>
                      
    procedure IntDtdStreamToDom(const Stream: TStream;
                                const RefNode: TdomNode;
                                const readonly: boolean); virtual;
                     <literallayout>
	  Reads the internal subset of a document type definition from a stream. For
	  a describtion of the parameters, see 'DocStreamToDom'.</literallayout>
                  </para>
               </listitem>
               <listitem>
                  <para>
                      
    procedure IntDtdStringToDom(const Str: string;
                                const RefNode: TdomNode;
                                const readonly: boolean); virtual;
                     <literallayout>
	  Reads the internal subset of a document type definition from a string. For
	  a describtion of the parameters, see 'DocStringToDom'.</literallayout>
                  </para>
               </listitem>
               <listitem>
                  <para>
                      
    procedure IntDtdWideStringToDom(      Str: WideString;
                                const RefNode: TdomNode;
                                const readonly: boolean); virtual;
                     <literallayout>
	  Reads the internal subset of a document type definition from a wideString.
	  For a describtion of the parameters, see
	  'DocWideStringToDom'.</literallayout>
                  </para>
               </listitem>
            </itemizedlist>
         </para>
      </sect1>
      <sect1>
         <title>TXmlSourceCode = class(TList);</title>
         <para>This class defines a sequential view of the source code of an XML
         document. It consists of a list of TXmlSourceCodePiece objects which
         represent distinct parts of an XML document such as e.g. text, start
         tags, end tags, empty element tags, or processing instructions.
         TXmlSourceCode objects are internally used by the XDOM's parser
         components, but might be created and specified by the application as
         well, in order to get easy access to a sequential rather than a tree
         view of an XML document. As TXMLSourceCode is derived from TList it
         holds the same properties, methods and functions. The following only
         describes where the TXmlSourceCode methods depart from the
         corresponding TList methods. For a full discribtion of the TList
         methods see the Delphi online manual.

</para>
         <para>
            <emphasis>Public properties</emphasis>
         </para>
         <para>
            <itemizedlist>
               <listitem>
                  <para>
                      

    property NameOfFirstTag: wideString
                     <literallayout>
      The name of the first tag (start tag or empty element tag) in the list or
      an empty string if there is no start tag in the list.</literallayout>
                  </para>
               </listitem>
            </itemizedlist>
         </para>
         <para>
            <emphasis>Public Methods</emphasis>
         </para>
         <para>
            <itemizedlist>
               <listitem>
                  <para>
                      
    function Add(Item: Pointer): Integer;
                     <literallayout>
      Adds a new source code piece to the end of the list setting its
      ownerSourceCode to this TXMLSourceCode object, and calculates the 'offset'
      of the added item. If the previous item is a nil pointer the whole list is
      packed and afterwards the 'offset' of all list items is re-calculated. The
      application has to make sure, that the specified item points to an object
      of type TXmlSourceCodePiece.
      Exceptions:		 
      - EListError
          This native Delphi exception is raised if 'item' is nil or points to a
          TXmlSourceCodePiece object that is already inuse in this list or
          elsewhere.</literallayout>
                  </para>
               </listitem>
               <listitem>
                  <para>
                      
    procedure Clear;
                     <literallayout>
      Removes all source code pieces from the list setting their offset to '0'
      and their ownerSourceCode to nil.</literallayout>
                  </para>
               </listitem>
               <listitem>
                  <para>
                      
    procedure ClearAndFree;
                     <literallayout>
      Removes all source code pieces from the list and frees
      them.</literallayout>
                  </para>
               </listitem>
               <listitem>
                  <para>
                      
    procedure Delete(Index: Integer);
                     <literallayout>
      Deletes the source code piece at the specified index position from the
      list setting its offset to '0' and its ownerSourceCode to nil, and
      re-calculates the 'offset' of all list items whoes index is greater than
      or equals the specified 'index'. If a nil pointer is found during
      re-calculation the list is packed and afterwards the 'offset' of all list
      items is recalculated.</literallayout>
                  </para>
               </listitem>
               <listitem>
                  <para>
                      
    procedure Exchange(Index1, Index2: Integer);
                     <literallayout>
      Exchanges the two specified source code pieces and re-calculates the
      'offset' of  all list items whoes index is greater than or equals the
      smallest of the two specified index values. If a nil pointer is found
      during re-calculation the list is packed and afterwards the 'offset' of
      all list items is recalculated.</literallayout>
                  </para>
               </listitem>
               <listitem>
                  <para>
                      
    function GetPieceAtPos(pos: integer): TXmlSourceCodePiece;
                     <literallayout>
	  Returns the source code piece that holds the character at the specified
	  position in the XML document. If a nil pointer is found during evaluation
	  the list is packed and the evaluation is started again.
      Parameters:
	  - pos
         The position of the character in the XML document, starting with 1 for
         the first character.
      Return Value:
         The TXmlSourceCodePiece object which holds the character at the
         specified position in the XML document, or nil if there is no such
         TXmlSourceCodePiece object or pos is smaller than 1.</literallayout>
                  </para>
               </listitem>
               <listitem>
                  <para>
                      
    procedure Insert(Index: Integer; Item: Pointer);
                     <literallayout>
      Adds a new source code piece at the specified index position to the list
      setting its ownerSourceCode to this TXMLSourceCode object, and
      re-calculates the 'offset'  of all list items whoes index is greater than
      or equals the specified 'index'. If a nil pointer is found during
      re-calculation the list is packed and afterwards the 'offset' of all list
      items is recalculated. The application has to make sure, that the
      specified item points to an object of type TXmlSourceCodePiece.
      Exceptions:		 
      - EListError
          This native Delphi exception is raised if 'item' is nil or points to a
          TXmlSourceCodePiece object that is already inuse in this list or
          elsewhere.</literallayout>
                  </para>
               </listitem>
               <listitem>
                  <para>
                      
    procedure Move(CurIndex, NewIndex: Integer);
                     <literallayout>
      Moves the source code piece from 'CurIndex' to 'NewInde' and re-calculates
      the 'offset' of all list items whoes index is greater than or equals the
      smallest of the two specified index values. If a nil pointer is found
      during re-calculation the list is packed and afterwards the 'offset' of
      all list items is recalculated.</literallayout>
                  </para>
               </listitem>
               <listitem>
                  <para>
                      
    procedure Pack;
                     <literallayout>
	  Deletes all nil-pointers from the list and re-calculates the 'offset' of
	  all list items. WARNING: Do not use nil pointers to remove items from the
	  list unless to free them, because their ownerSourceCode property will not
	  be updated and any attempt to add or insert them again will lead to an
	  EListError exception. Also take into account, that modifying the pointer
	  items directly will not automatically re-calculate the list items' offset
	  property, which might lead to hardly predictable results when modifying
	  the list again, due to the re-calculation behavior described above.
	  However, if you want to remove a series of source code pieces from the
	  list, it will be slow to remove them individually, because that will
	  always call the offset re-calculation routine. Instead set the respective
	  pointer items to 'nil', free the objects and call the pack procedure which
	  will automatically guarantee the list's integrity. Here is a code example:
            with myXmlSourceCode do begin
              items[indexOf(myXmlSourceCodePiece1)]:= nil;
              items[indexOf(myXmlSourceCodePiece2)]:= nil;
              items[indexOf(myXmlSourceCodePiece3)]:= nil;
              myXmlSourceCodePiece1.free;
              myXmlSourceCodePiece2.free;
              myXmlSourceCodePiece3.free;
			  pack; // Don't forget this!
            end;</literallayout>
                  </para>
               </listitem>
               <listitem>
                  <para>
                      
    function Remove(Item: Pointer): Integer;
                     <literallayout>
      Remove a source code piece from the list setting its offset to '0' and its
      ownerSourceCode to nil, and re-calculates the 'offset' of all list items
      whoes index is greater than or equals (now) the previous list position of
      the removed source code piece. If a nil pointer is found during
      re-calculation the list is packed and afterwards the 'offset' of all list
      items is recalculated.</literallayout>
                  </para>
               </listitem>
               <listitem>
                  <para>
                      
    procedure Sort(Compare: TListSortCompare);
                     <literallayout>
      Sorts the list according the specified Compare object and re-calculates
      the 'offset' of all list items.</literallayout>
                  </para>
               </listitem>
            </itemizedlist>
         </para>
      </sect1>
      <sect1>
         <title>TXmlSourceCodePiece = class</title>
         <para>This defines the class of objects which are used in
         TXmlSourceCode to represent a sequential view of the source code of an
         XML document.
</para>
         <para>
            <emphasis>Public properties</emphasis>
         </para>
         <para>
            <itemizedlist>
               <listitem>
                  <para>
                      

    property pieceType: TdomPieceType (readonly)
                     <literallayout>
      The type of the code pieces.</literallayout>
                  </para>
               </listitem>
               <listitem>
                  <para>
                      
    property text: wideString
                     <literallayout>
      The text of the code pieces.</literallayout>
                  </para>
               </listitem>
               <listitem>
                  <para>
                      
    property offset: integer (readonly)
                     <literallayout>
      The number of characters in the XML document which proceed this code
      piece. 
      The offset of the first code pieces is always '0'. 
      UTF-16 surrogates are counting as two characters.</literallayout>
                  </para>
               </listitem>
               <listitem>
                  <para>
                      
    property ownerSourceCode: TXmlSourceCode (readonly)
                     <literallayout>
      The TXmlSourceCode object that holds this code piece.</literallayout>
                  </para>
               </listitem>
            </itemizedlist>
         </para>
         <para>
            <emphasis>Public Methods</emphasis>
         </para>
         <para>
            <itemizedlist>
               <listitem>
                  <para>
                      
    constructor Create(pt: TdomPieceType); virtual;
                     <literallayout>
	  Creates a new TXmlSourceCodePiece object.
      Parameters:
	  - pt
         The piece type of the new TXmlSourceCodePiece object.</literallayout>
                  </para>
               </listitem>
            </itemizedlist>
         </para>
      </sect1>
   </chapter>
   <chapter>
      <title>Document Object Model Traversal (#)</title>
      <para>
         
         
         
         
         For a detailed explanation of the the behavior of TdomIterators and
         TdomTreeWalkers please see sec. 7 of the <quote>Document Object Model
         (DOM) Level 2 Specification. Version 1.0. W3C Candidate Recommendation
         07 March,
         2000</quote>("http://www.w3.org/TR/2000/CR-DOM-Level-2-20000307").
</para>
      <sect1>
         <title>General Classes</title>
         <sect2>
            <title>TdomFilterResult (#)</title>
            <para>The following constants are returned by the acceptNode method.
</para>
            <para>
Defined Constants:
</para>
            <para>
               <itemizedlist>
                  <listitem>
                     <para>
                         
filter_accept
                        <literallayout>
      Accept the node. Navigation methods defined for TdomNodeIterator or
      TdomTreeWalker will return this node.</literallayout>
                     </para>
                  </listitem>
                  <listitem>
                     <para>
                         
filter_reject
                        <literallayout>
      Reject the node. Navigation methods defined for TdomNodeIterator or
      TreeWalker will not return this node. 
      For TreeWalker, the children of this node will also be rejected. 
      Iterators treat this as a synonym for filter_skip.</literallayout>
                     </para>
                  </listitem>
                  <listitem>
                     <para>
                         
filter_skip
                        <literallayout>
      Skip this single node. Navigation methods defined for TdomNodeIterator or
      TdomTreeWalker will not return this node.
      For both TdomNodeIterator and TdomTreewalker, the children of this node
      will still be considered.</literallayout>
                     </para>
                  </listitem>
               </itemizedlist>
            </para>
         </sect2>
         <sect2>
            <title>TdomWhatToShow (#)</title>
            <para>TdomWhatToShow = set of TDomNodeType;
</para>
            <para>
These are the available values for the whatToShow parameter used in
TdomTreeWalkers and TdomIterators. If a node type is not contained in
whatToShow, that will be taken as a request to skip over this type of node; the
behavior in that case is similar to that of filter_skip.

          </para>
         </sect2>
      </sect1>
      <sect1>
         <title>TdomNodeIterator = class (#*)</title>
         <para> NodeIterators are used to step through a set of nodes, e.g. the
         set of nodes in a NodeList, the document subtree governed by a
         particular node, the results of a query, or any other set of nodes. The
         set of nodes to be iterated is determined by the implementation of the
         NodeIterator. DOM Level 2 specifies a single NodeIterator
         implementation for document-order traversal of a document subtree.
         Instances of these iterators are created by calling
         TdomDocument.createNodeIterator.

</para>
         <para>
            <emphasis>Properties</emphasis>
         </para>
         <para>
            <itemizedlist>
               <listitem>
                  <para>
                      
(*) property expandEntityReferences: boolean (readonly)
                     <literallayout>
      The value of this flag determines whether the children of entity reference
      nodes are visible to the iterator. If false, they and their descendents
      will be rejected. Note that this rejection takes precedence over
      whatToShow and the filter. Also note that this is currently the only
      situation where Iterators may reject a complete subtree rather than
      skipping individual nodes. To produce a view of the document that has
      entity references expanded and does not expose the entity reference node
      itself, use the whatToShow flags to hide the entity reference node and set
      expandEntityReferences to true when creating the iterator. To produce a
      view of the document that has entity reference nodes but no entity
      expansion, use the whatToShow flags to show the entity reference node and
      set expandEntityReferences to false. [*This behavior has not yet been
      implemented]</literallayout>
                  </para>
               </listitem>
               <listitem>
                  <para>
                      
    property filter: TdomNodeFilter (readonly)
                     <literallayout>
      The filter used to screen nodes.</literallayout>
                  </para>
               </listitem>
               <listitem>
                  <para>
                      
    property root: TdomNode (readonly)
                     <literallayout>
      The root node of the Iterator, as specified when it was
      created.</literallayout>
                  </para>
               </listitem>
               <listitem>
                  <para>
                      
    property whatToShow: TdomWhatToShow (readonly)
                     <literallayout>
      This attribute determines which node types are presented via the iterator.
      The available set of constants is defined in the TdomNodeFilter interface.
      Nodes not accepted by whatToShow will be skipped, but their children may
      still be considered. Note that this skip takes precedence over the filter,
      if any.</literallayout>
                  </para>
               </listitem>
            </itemizedlist>
         </para>
         <para>
            <emphasis>Public Methods</emphasis>
         </para>
         <para>
            <itemizedlist>
               <listitem>
                  <para>
                      
    procedure detach; virtual;
                     <literallayout>
      Detaches the iterator from the set which it iterated over, releasing any
      computational resources and placing the iterator in the INVALID state.
      After detach has been invoked, calls to nextNode or previousNode will
      raise the exception INVALID_STATE_ERR.</literallayout>
                  </para>
               </listitem>
               <listitem>
                  <para>
                      
    function NextNode: TdomNode; virtual;
                     <literallayout>
      Returns the next node in the set and advances the position of the iterator
      in the set. After a NodeIterator is created, the first call to nextNode
      returns the first node in the set.
      Return Value:
         The next Node in the set being iterated over, or nil if there are no
         more members in that set.
      Exceptions:		 
      - EInvalid_State_Err
          Raised if this method is called after the detach method was
          invoked.</literallayout>
                  </para>
               </listitem>
               <listitem>
                  <para>
                      
    function PreviousNode: TdomNode; virtual;
                     <literallayout>
      Returns the previous node in the set and moves the position of the
      iterator backwards in the set.
      Return Value:
         The next Node in the set being iterated over, or nil if there are no
         more members in that set.
      Exceptions:		 
      - EInvalid_State_Err
          Raised if this method is called after the detach method was
          invoked.</literallayout>
                  </para>
               </listitem>
            </itemizedlist>
         </para>
      </sect1>
      <sect1>
         <title>TdomNodeFilter = class (#)</title>
         <para>
            Filters are objects that know how to <quote>filter out</quote>
            nodes. If a TdomNodeIterator or TdomTreeWalker is given a filter, it
            applies the filter before it returns the next node. If the filter
            says to accept the node, the iterator returns it; otherwise, the
            iterator looks for the next node and pretends that the node that was
            rejected was not there.
The DOM does not provide any filters. Filter is just an abstract interface that
users can override to provide their own filters.

         </para>
         <para>
Filters do not need to know how to iterate, nor do they need to know anything
about the data structure that is being iterated. This makes it very easy to
write filters, since the only thing they have to know how to do is evaluate a
single node. One filter may be used with a number of different kinds of
iterators, encouraging code reuse.

</para>
         <para>
            <emphasis>Public Methods</emphasis>
         </para>
         <para>
            <itemizedlist>
               <listitem>
                  <para>
                      
    function acceptNode(const node: TdomNode): TdomFilterResult; virtual;
    abstract;
                     <literallayout>
      Test whether a specified node is visible in the logical view of a
      TreeWalker or NodeIterator. This function will be called by the
      implementation of TreeWalker and NodeIterator; it is not intended to be
      called directly from user code.
      Parameters:
	  - node
         The node to check to see if it passes the filter or not.
      Return Value:
         A constant to determine whether the node is accepted, rejected, or
         skipped.</literallayout>
                  </para>
               </listitem>
            </itemizedlist>
         </para>
      </sect1>
      <sect1>
         <title>TdomTreeWalker = class (#)</title>
         <para> TreeWalker objects are used to navigate a document tree or
         subtree using the view of the document defined by its whatToShow flags
         and any filters that are defined for the TreeWalker. Any function which
         performs navigation using a TreeWalker will automatically support any
         view defined by a TreeWalker.
</para>
         <para>
Omitting nodes from the logical view of a subtree can result in a structure that
is substantially different from the same subtree in the complete, unfiltered
document. Nodes that are siblings in the TreeWalker view may be children of
different, widely separated nodes in the original view. For instance, consider a
Filter that skips all nodes except for Text nodes and the root node of a
document. In the logical view that results, all text nodes will be siblings and
appear as direct children of the root node, no matter how deeply nested the
structure of the original document.

</para>
         <para>
            <emphasis>Properties</emphasis>
         </para>
         <para>
            <itemizedlist>
               <listitem>
                  <para>
                      
    property currentNode: TdomNode
                     <literallayout>
      The node at which the TreeWalker is currently positioned. The value must
      not be nil. Alterations to the DOM tree may cause the current node to no
      longer be accepted by the TreeWalkers associated filter. currentNode may
      also be explicitly set to any node, whether or not it is within the
      subtree specified by the root node or would be accepted by the filter and
      whatToShow flags. Further traversal occurs relative to currentNode even if
      it is not part of the current view by applying the filters in the
      requested direction (not changing currentNode where no traversal is
      possible).
      Exceptions:		 
      - ENot_Supported_Err
          Raised if the specified currentNode is nil.</literallayout>
                  </para>
               </listitem>
               <listitem>
                  <para>
                      
(*) property expandEntityReferences: boolean (readonly)
                     <literallayout>
      The value of this flag determines whether the children of entity reference
      nodes are visible to the TreeWalker. 
If false, they and their descendents will be rejected. 
Note that this rejection takes precedence over whatToShow and the filter, if
any. 
To produce a view of the document that has entity references expanded and does
not 
 expose the entity reference node itself, use the whatToShow flags to hide 
 the entity reference node and set expandEntityReferences to true when creating
 the TreeWalker. 
 To produce a view of the document that has entity reference nodes but no entity
 expansion, 
 use the whatToShow flags to show the entity reference node and set
 expandEntityReferences to false. 
[*This behavior has not yet been implemented]</literallayout>
                  </para>
               </listitem>
               <listitem>
                  <para>
                      
    property filter: TdomNodeFilter (readonly)
                     <literallayout>
      The filter used to screen nodes.</literallayout>
                  </para>
               </listitem>
               <listitem>
                  <para>
                      
    property root: TdomNode (readonly)
                     <literallayout>
      The root node of the Iterator, as specified when it was
      created.</literallayout>
                  </para>
               </listitem>
               <listitem>
                  <para>
                      
    property whatToShow: TdomWhatToShow (readonly)
                     <literallayout>
      This attribute determines which node types are presented via the
      TreeWalker. 
The available set of constants is defined in the TdomNodeFilter interface. 
Nodes not accepted by whatToShow will be skipped, but their children may still
be considered. 
Note that this skip takes precedence over the filter, if any.</literallayout>
                  </para>
               </listitem>
            </itemizedlist>
         </para>
         <para>
            <emphasis>Public Methods</emphasis>
         </para>
         <para>
            <itemizedlist>
               <listitem>
                  <para>
                      
    function firstChild: TdomNode; virtual;
                     <literallayout>
      Moves the TdomTreeWalker to the first visible child of the current node,
      and returns the new node. 
If the current node has no visible children, returns nil, and retains the
current node.
      Return Value:
         The new node, or nil if the current node has no visible children in the
         TdomTreeWalkers logical view.</literallayout>
                  </para>
               </listitem>
               <listitem>
                  <para>
                      
    function lastChild: TdomNode; virtual;
                     <literallayout>
      Moves the TdomTreeWalker to the last visible child of the current node,
      and returns the new node. 
If the current node has no visible children, returns nil, and retains the
current node.
      Return Value:
         The new node, or nil if the current node has no visible children in the
         TdomTreeWalkers logical view.</literallayout>
                  </para>
               </listitem>
               <listitem>
                  <para>
                      
    function nextNode: TdomNode; virtual;
                     <literallayout>
      Moves the TdomTreeWalker to the next visible node in document order
      relative to the current node, 
      and returns the new node. 
      If the current node has no next node, or if the search for nextNode
      attempts to step upward 
      from the TdomTreeWalkers root node, returns nil, and retains the current
      node.
      Return Value:
         The new node, or nil if the current node has no next node in the
         TdomTreeWalkers logical view.</literallayout>
                  </para>
               </listitem>
               <listitem>
                  <para>
                      
    function nextSibling: TdomNode; virtual;
                     <literallayout>
      Moves the TdomTreeWalker to the next sibling of the current node 
      If the current node has no visible next sibling returns nil, and retains
      the current node.
      Return Value:
         The new node, or nil if the current node has no next sibling in the
         TdomTreeWalkers logical view.</literallayout>
                  </para>
               </listitem>
               <listitem>
                  <para>
                      
    function parentNode: TdomNode; virtual;
                     <literallayout>
      Moves to and returns the closest visible ancestor node of the current
      node. 
      If the search for parentNode attempts to step upward from the
      TdomTreeWalkers root node,
      or if it fails to find a visible ancestor node, this method retains the
      current position and returns nil.
      Return Value:
         The new parent node, or nil if the current node has no parent in the
         TdomTreeWalkers logical view.</literallayout>
                  </para>
               </listitem>
               <listitem>
                  <para>
                      
    function previousNode: TdomNode; virtual;
                     <literallayout>
      Moves the TdomTreeWalker to the previous visible node in document order
      relative to the current node, 
      and returns the new node. If the current node has no previous node, 
      or if the search for previousNode attempts to step upward from the
      TdomTreeWalkers root node, 
      returns nil, and retains the current node.
      Return Value:
         The new node, or nil if the current node has no previous node in the
         TdomTreeWalkers logical view.</literallayout>
                  </para>
               </listitem>
               <listitem>
                  <para>
                      
    function previousSibling: TdomNode; virtual;
                     <literallayout>
      Moves the TdomTreeWalker to the previous sibling of the current node 
      If the current node has no visible previous sibling returns nil, and
      retains the current node.
      Return Value:
         The new node, or nil if the current node has no previous sibling in the
         TdomTreeWalkers logical view.</literallayout>
                  </para>
               </listitem>
            </itemizedlist>
         </para>
      </sect1>
   </chapter>
</book>
